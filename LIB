//standard lib
using System;
using System.Collections.Generic;
using System.Text;
using PAT.Common.Classes.Expressions.ExpressionClass;
//have to use the following namespace
namespace PAT.Lib
{
//define a datatype "Unitype" to express the data that we do not know which type it is
	public class Unitype:ExpressionValue
	{
//define a set of public functions to check the datatype of the data
		public bool IsConstant ()
		{
			return this is Constant;
		} 
		public bool IsNonce ()
		{
			return this is Nonce;
		}
		public bool IsSKey()
		{
			return this is SKey;
		}
		public bool IsPKey()
		{
			return this is PKey;
		}
		public bool IsAEnc()
		{
			return this is AEnc;
		}
		public bool IsPEnc()
		{
			return this is PEnc;
		}
		public bool IsSEnc()
		{
			return this is SEnc;
		}
		public bool IsPair()
		{
			return this is Pair;
		}
		public bool IsADec()
		{
			return this is ADec;
		}
		public bool IsPDec()
		{
			return this is PDec;
		}
		public bool IsSDec()
		{
			return this is SDec;
		}
		public bool IsCommit()
		{
			return this is Commit;
		}
		public  bool IsSign()
		{
			return this is Sign;
		}
		public bool IsVerifySign()
		{
			return this is VerifySign;
		}
		public bool IsGetSignMsg()
		{
			return this is GetSignMsg;
		}
		public bool IsOpen()
		{
			return this is Open;
		}
		public bool IsBitstring()
		{
			return this is Bitstring;
		}
		public bool IsKey()
		{
			return this is Key;
		}
		public bool IsHash()
		{
			return this is Hash;
		}
		public virtual bool Constantequal(Constant i)
		{
			return false;
		}
		public virtual bool Nonceequal(Nonce i)
		{
			return false;
		}
		public virtual bool SKeyequal(SKey i)
		{
			return false;
		}
		public virtual bool PKeyequal(PKey i)
		{
			return false;
		}
		public virtual bool AEncequal(AEnc i)
		{
			return false;
		}
		public virtual bool SEncequal(SEnc i)
		{
			return false;
		}
		public virtual bool PEncequal(PEnc i)
		{
			return false;
		}
		public virtual bool Pairequal(Pair i)
		{
			return false;
		}
		public virtual bool Hashequal(Hash i)
		{
			return false;
		}
		public virtual bool Signequal(Sign i)
		{
			return false;
		}
		public virtual bool Commitequal(Commit i)
		{
			return false;
		}
		public virtual bool ADecequal(ADec i)
		{
			return false;
		}
		public virtual bool SDecequal(SDec i)
		{
			return false;
		}
		public virtual bool PDecequal(PDec i)
		{
			return false;
		}
		public virtual bool Msgequal(GetSignMsg i)
		{
			return false;
		}
		public virtual bool Openequal(Open i)
		{
			return false;
		}
//define a public function to check the syntactical equality of two data
		public bool equal(Unitype i)
		{
//if the input data "i" is of the same type of the current data, then check their equality by calling its corresponding equalitycheck function, otherwise return false 
			if (this.IsNonce()==true && i.IsNonce () == true) {
				return this.Nonceequal ((Nonce)(Object)i);
			}else if (this.IsConstant()==true && i.IsConstant () == true) {
				return this.Constantequal ((Constant)(Object)i);
			}
			else if (this.IsSKey()==true && i.IsSKey () == true) {
				return this.SKeyequal ((SKey)(Object)i);
			}
			else if (this.IsPKey()==true && i.IsPKey () == true) {
				return this.PKeyequal ((PKey)(Object)i);
			}
			else if (this.IsAEnc()==true && i.IsAEnc () == true) {
				return this.AEncequal ((AEnc)(Object)i);
			}
			else if (this.IsSEnc()==true && i.IsSEnc () == true) {
				return this.SEncequal ((SEnc)(Object)i);
			}
			else if (this.IsPEnc()==true && i.IsPEnc () == true) {
				return this.PEncequal ((PEnc)(Object)i);
			}
			else if (this.IsPair()==true && i.IsPair () == true) {
				return this.Pairequal ((Pair)(Object)i);
			}
			else if (this.IsHash()==true && i.IsHash () == true) {
				return this.Hashequal ((Hash)(Object)i);
			}
			else if (this.IsSign()==true && i.IsSign () == true) {
				return this.Signequal ((Sign)(Object)i);
			}
			else if (this.IsCommit()==true && i.IsCommit () == true) {
				return this.Commitequal ((Commit)(Object)i);
			}
			else if (this.IsADec()==true && i.IsADec () == true) {
				return this.ADecequal ((ADec)(Object)i);
			}
			else if (this.IsSDec()==true && i.IsSDec () == true) {
				return this.SDecequal ((SDec)(Object)i);
			}
			else if (this.IsPDec()==true && i.IsPDec () == true) {
				return this.PDecequal ((PDec)(Object)i);
			}
			else if (this.IsGetSignMsg()==true && i.IsGetSignMsg () == true) {
				return this.Msgequal ((GetSignMsg)(Object)i);
			}
			else if (this.IsOpen()==true && i.IsOpen () == true) {
				return this.Openequal ((Open)(Object)i);
			}
			else return false;
		}
//standard methods that have to be included
		public override string ToString()
		{
			return "Unitype";      
		} 
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return ""; }
		}
	}
//define a data type "Bitstring" which inheritates Unitype (a Bitstring is a Unitype)
	public class Bitstring:Unitype
	{
		public Bitstring()
		{
		}
		public override string ToString()
		{
			return "Bitstring";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return ""; }
		}
	}
//define a data type "Key" which inheritates Unitype (a Bitstring is a Unitype)
	public class Key:Unitype
	{
		public Key()
		{
		}
		public override string ToString()
		{
			return "Key";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return ""; }
		}

	}
//To do
	public class State<T>:ExpressionValue
	{   T s;
		public bool updateCurrent(T i)
		{
			s=i;
			return true;
		}
		public T getCurrent()
		{
			return s;
		}
		public override string ToString()
		{
			return "State";
		}	
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return ""; }
		}
	}
	public class State:State<Unitype>{}
	public class ConstantState: State<Constant>{}
	//public class BitstringState: State<Bitstring>{}
	//public class KeyState:State<Key>{}

//define a data type "Constant" which inheritates Bitstring (a Constant is a Bitstring)
	public class Constant: Bitstring
	{
		public Constant()
		{
		}
//define a function to test the equality of two constants: each constant is an object; two constants are syntatically equal if they have exactly the same reference
		public override bool Constantequal(Constant i)
		{
			if(System.Object.ReferenceEquals(this, i))
			{ 
				return true;
			}
			else{return false;}
		}
		public override string ToString()
		{
			return "Constant";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return "PAT.Lib.Constant"; }
		}

	}
//define a data type "Nonce" which inheritates Bitstring (a Nonce is a Bitstring)
	public class Nonce : Bitstring
	{
		public Nonce()
		{
		}
//define a function to test the equality of two Nonces: each Nonce is an object; two Nonces are syntatically equal if they have exactly the same reference
		public override bool Nonceequal(Nonce i)
		{ 
			if(System.Object.ReferenceEquals(this,i))
			{ 
				return true;
			}
			else{return false;}
		}
		public override string ToString()
		{
			return "Nonce";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return "PAT.Lib.Nonce"; }
		}

	}
//define a data type "Symmetric Key - Skey" which inheritates Key (a Symmetric Key is a Key)
	public class SKey : Key
	{
		public SKey()
		{
		}
		public SKey(Unitype s) 
		{
		}
//define a function to test the equality of two Secret Keys: each Secret Key is an object; two Secret Keys are syntatically equal if they have exactly the same reference
		public override bool SKeyequal(SKey i)
		{ 
			if(System.Object.ReferenceEquals(this, i))
			{ 
				return true;
			}
			else{return false;}
		}
		public override string ToString()
		{
			return "SKey";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return "SKey"; }
		}
	}
//define a data type "Public Key - Pkey" which inheritates Key (a Public Key is a Key)
	public class PKey : Key
	{   
//the corresponding secret key of the public key
                private SKey sk;
		public PKey()
		{
		}
		public PKey(SKey k)
		{
			sk=k;
		}
//define a function to test whether a public key is the corresponding public key of the input secret key
		public bool IsPkOf(SKey y)
		{
			if (this.sk==y)
			{
				return true;
			}
			return false;
		}
//define a function to retrive the corresponding secret key of the current public key
		public SKey getsk()
		{
			return sk;
		}
//define a function to test the equality of two Public Keys: each Public Key is a function of the corresponding Secret Key; two Public Keys are syntatically equal if their corresponding Secret Keys are the same
		public override bool PKeyequal(PKey i)
		{ 
			if(this.getsk().SKeyequal(i.getsk())==true)
				return true;
			else{return false;}
		}
		public override string ToString()
		{
			return "PKey";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return ""; }
		}
	}   
//define a data type "Asymmetric Encryption - AEnc" which inheritates Bitstring (a cipher text is a Bitstring)
	public class AEnc: Bitstring
	{   
//the corresponding plaintex which can be any type, and the encrypting public key
        private Unitype plaintext;
		private PKey pk;
		public AEnc()
		{
		}
		public AEnc(Unitype n, PKey k)
		{  
			plaintext=n;
			pk=k;
		}
//define a function to test whether a cipher text can be dcrypted by a secret key
		public bool isDecryptable(SKey k)
		{    
			if(this.pk.IsPkOf(k)==true)
			{
				return true;
			}
			return false;
		}
//an internal function which gets the plaintext of the current ciphertext
		internal Unitype getplaintext()
		{
			return this.plaintext;
		}
//an internal function which gets the encrypting public key of the current ciphertext
		internal PKey getpk()
		{
			return this.pk;
		}
//define a function to test the equality of two cipher text of type AEnc: the corresponding public keys are the same, and the corresponding plaintext are the same
//Todo: try to shrink		
		public override bool AEncequal(AEnc i)
		{ if(this.getpk().PKeyequal(i.getpk())==true){
				if(this.getplaintext().IsNonce()==true&&i.getplaintext().IsNonce()==true)
				{ 
					if (this.getplaintext().Nonceequal((Nonce)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if (this.getplaintext().IsConstant()==true&&i.getplaintext().IsConstant()==true)
				{ 
					if (this.getplaintext().Constantequal((Constant)(object)i.getplaintext())==true ){ 
						return true;
					}
					else{return false;}	
				}
				else if (this.getplaintext().IsSKey()==true&&i.getplaintext().IsSKey()==true)
				{ 
					if (this.getplaintext().SKeyequal((SKey)(object)i.getplaintext())==true ){ 
						return true;
					}
					else{return false;}	
				}
				else if (this.getplaintext().IsPKey()==true&&i.getplaintext().IsPKey()==true)
				{ 
					if (this.getplaintext().PKeyequal((PKey)(object)i.getplaintext())==true ){ 
						return true;
					}
					else{return false;}	
				}
				else if (this.getplaintext().IsAEnc()==true&&i.getplaintext().IsAEnc()==true)
				{ 
					if (this.getplaintext().AEncequal((AEnc)(object)i.getplaintext())==true ){ 
						return true;
					}
					else{return false;}	
				}else if (this.getplaintext ().IsSEnc () == true && i.getplaintext ().IsSEnc () == true) { 
					if (this.getplaintext ().SEncequal ((SEnc)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}else if (this.getplaintext ().IsPEnc () == true && i.getplaintext ().IsPEnc () == true) { 
					if (this.getplaintext ().PEncequal ((PEnc)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsPair () == true && i.getplaintext ().IsPair () == true) { 
					if (this.getplaintext ().Pairequal ((Pair)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsHash () == true && i.getplaintext ().IsHash () == true) { 
					if (this.getplaintext ().Hashequal ((Hash)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsSign () == true && i.getplaintext ().IsSign () == true) { 
					if (this.getplaintext ().Signequal ((Sign)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsCommit () == true && i.getplaintext ().IsCommit () == true) { 
					if (this.getplaintext ().Commitequal ((Commit)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if(this.getplaintext().IsADec()==true&&i.getplaintext().IsADec()==true)
				{ 
					if (this.getplaintext().ADecequal((ADec)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsSDec()==true&&i.getplaintext().IsSDec()==true)
				{ 
					if (this.getplaintext().SDecequal((SDec)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsPDec()==true&&i.getplaintext().IsPDec()==true)
				{ 
					if (this.getplaintext().PDecequal((PDec)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsGetSignMsg()==true&&i.getplaintext().IsGetSignMsg()==true)
				{ 
					if (this.getplaintext().Msgequal((GetSignMsg)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsOpen()==true&&i.getplaintext().IsOpen()==true)
				{ 
					if (this.getplaintext().Openequal((Open)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else {return false;}	
			}
		else return false;
	}
		public override string ToString()
		{
			return "AEnc";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return ""; }
		}
	}
//define a data type "Asymmetric Encryption - AEnc" which inheritates Bitstring (a cipher text is a Bitstring)
	public class SEnc : Bitstring
	{
//the corresponding plaintex which can be any type, and the encrypting secret key
		private Unitype plaintext;
		private SKey sk;
		public SEnc()
		{
		}
		public SEnc(Unitype n, SKey k)
		{
			plaintext = n;
			sk = k;
		}
//define a function to test whether a cipher text can be dcrypted by a secret key
		public bool isDecryptable(SKey k)
		{
			if (this.sk == k)
			{
				return true;
			}
			return false;
		}
//an internal function which gets the plaintext of the current ciphertext
		internal Unitype getplaintext()
		{
			return this.plaintext;
		}
//an internal function which gets the encrypting secret key of the current ciphertext
		internal SKey getsk()
		{
			return this.sk;
		}
//define a function to test the equality of two cipher text of type SEnc: the encypting secret keys are the same, and the corresponding plaintext are the same
//Todo: try to shrink
		public override bool SEncequal(SEnc i)
		{
			if (this.getsk ().SKeyequal (i.getsk ()) == true) {
				if (this.getplaintext ().IsNonce () == true && i.getplaintext ().IsNonce () == true) { 
					if (this.getplaintext ().Nonceequal ((Nonce)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}
				} else if (this.getplaintext ().IsConstant () == true && i.getplaintext ().IsConstant () == true) { 
					if (this.getplaintext ().Constantequal ((Constant)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				} else if (this.getplaintext ().IsSKey () == true && i.getplaintext ().IsSKey () == true) { 
					if (this.getplaintext ().SKeyequal ((SKey)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				} else if (this.getplaintext ().IsPKey () == true && i.getplaintext ().IsPKey () == true) { 
					if (this.getplaintext ().PKeyequal ((PKey)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				} else if (this.getplaintext ().IsAEnc () == true && i.getplaintext ().IsAEnc () == true) { 
					if (this.getplaintext ().AEncequal ((AEnc)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}else if (this.getplaintext ().IsSEnc () == true && i.getplaintext ().IsSEnc () == true) { 
					if (this.getplaintext ().SEncequal ((SEnc)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				} else if (this.getplaintext ().IsPEnc () == true && i.getplaintext ().IsPEnc () == true) { 
					if (this.getplaintext ().PEncequal ((PEnc)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}else if (this.getplaintext ().IsPair () == true && i.getplaintext ().IsPair () == true) { 
					if (this.getplaintext ().Pairequal ((Pair)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsHash () == true && i.getplaintext ().IsHash () == true) { 
					if (this.getplaintext ().Hashequal ((Hash)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsSign () == true && i.getplaintext ().IsSign () == true) { 
					if (this.getplaintext ().Signequal ((Sign)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsCommit () == true && i.getplaintext ().IsCommit () == true) { 
					if (this.getplaintext ().Commitequal ((Commit)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}else if(this.getplaintext().IsADec()==true&&i.getplaintext().IsADec()==true)
				{ 
					if (this.getplaintext().ADecequal((ADec)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsSDec()==true&&i.getplaintext().IsSDec()==true)
				{ 
					if (this.getplaintext().SDecequal((SDec)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsPDec()==true&&i.getplaintext().IsPDec()==true)
				{ 
					if (this.getplaintext().PDecequal((PDec)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsGetSignMsg()==true&&i.getplaintext().IsGetSignMsg()==true)
				{ 
					if (this.getplaintext().Msgequal((GetSignMsg)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsOpen()==true&&i.getplaintext().IsOpen()==true)
				{ 
					if (this.getplaintext().Openequal((Open)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}else {
					return false;
				}	
			}
			else return false;
		}
		public override string ToString()
		{
			return "SEnc";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get { return ""; }
		}
	}
//define a data type "Probabilistic Encryption - PEnc" which inheritates Bitstring (a cipher text is a Bitstring)
	public class PEnc:Bitstring
	{  
//the corresponding plaintex which can be any type, the nonce and the encrypting public key
                private Unitype plaintext;
		private Nonce random;
		private PKey pk;
		public PEnc()
		{
		}
		public PEnc(Unitype m, Nonce r, PKey k)
		{
			plaintext=m;
			random=r;
			pk=k;              
		}
//define a function to test whether a cipher text can be dcrypted by a secret key
		public bool isDecryptable(SKey k)
		{    
			if(this.pk.IsPkOf(k)==true)
			{
				return true;
			}
			return false;
		}
//an internal function which gets the plaintext of the current ciphertext
		internal Unitype getplaintext()
		{
			return this.plaintext;
		}
//an internal function which gets the encrypting public key of the current ciphertext
		internal PKey getpk()
		{
			return this.pk;
		}
//an internal function which gets the encrypting nonce of the current ciphertext
		internal Nonce getrandom()
		{
			return this.random;
		}
//define a function to test the equality of two cipher text of type PEnc: the encypting public keys are the same, the encrypting nonces are the same and the corresponding plaintext are the same
//Todo: try to shrink
		public override bool PEncequal(PEnc i)
		{
			if (this.getrandom ().Nonceequal (i.getrandom ()) == true) {
				if (this.getpk ().PKeyequal (i.getpk ()) == true) {
					if (this.getplaintext ().IsNonce () == true && i.getplaintext ().IsNonce () == true) { 
						if (this.getplaintext ().Nonceequal ((Nonce)(object)i.getplaintext ()) == true) { 
							return true;
						} else {
							return false;
						}
					} else if (this.getplaintext ().IsConstant () == true && i.getplaintext ().IsConstant () == true) { 
						if (this.getplaintext ().Constantequal ((Constant)(object)i.getplaintext ()) == true) { 
							return true;
						} else {
							return false;
						}	
					} else if (this.getplaintext ().IsSKey () == true && i.getplaintext ().IsSKey () == true) { 
						if (this.getplaintext ().SKeyequal ((SKey)(object)i.getplaintext ()) == true) { 
							return true;
						} else {
							return false;
						}	
					} else if (this.getplaintext ().IsPKey () == true && i.getplaintext ().IsPKey () == true) { 
						if (this.getplaintext ().PKeyequal ((PKey)(object)i.getplaintext ()) == true) { 
							return true;
						} else {
							return false;
						}	
					} else if (this.getplaintext ().IsAEnc () == true && i.getplaintext ().IsAEnc () == true) { 
						if (this.getplaintext ().AEncequal ((AEnc)(object)i.getplaintext ()) == true) { 
							return true;
						} else {
							return false;
						}	
					} else if (this.getplaintext ().IsSEnc () == true && i.getplaintext ().IsSEnc () == true) { 
						if (this.getplaintext ().SEncequal ((SEnc)(object)i.getplaintext ()) == true) { 
							return true;
						} else {
							return false;
						}	
					} else if (this.getplaintext ().IsSEnc () == true && i.getplaintext ().IsSEnc () == true) { 
						if (this.getplaintext ().SEncequal ((SEnc)(object)i.getplaintext ()) == true) { 
							return true;
						} else {
							return false;
						}	
					}
					else if (this.getplaintext ().IsPEnc () == true && i.getplaintext ().IsPEnc () == true) { 
						if (this.getplaintext ().PEncequal ((PEnc)(object)i.getplaintext ()) == true) { 
							return true;
						} else {
							return false;
						}	
					}else if (this.getplaintext ().IsPair () == true && i.getplaintext ().IsPair () == true) { 
						if (this.getplaintext ().Pairequal ((Pair)(object)i.getplaintext ()) == true) { 
							return true;
						} else {
							return false;
						}	
					}
					else if (this.getplaintext ().IsHash () == true && i.getplaintext ().IsHash () == true) { 
						if (this.getplaintext ().Hashequal ((Hash)(object)i.getplaintext ()) == true) { 
							return true;
						} else {
							return false;
						}	
					}
					else if (this.getplaintext ().IsSign () == true && i.getplaintext ().IsSign () == true) { 
						if (this.getplaintext ().Signequal ((Sign)(object)i.getplaintext ()) == true) { 
							return true;
						} else {
							return false;
						}	
					}
					else if (this.getplaintext ().IsCommit () == true && i.getplaintext ().IsCommit () == true) { 
						if (this.getplaintext ().Commitequal ((Commit)(object)i.getplaintext ()) == true) { 
							return true;
						} else {
							return false;
						}	
					}else if(this.getplaintext().IsADec()==true&&i.getplaintext().IsADec()==true)
					{ 
						if (this.getplaintext().ADecequal((ADec)(object)i.getplaintext ())==true ){ 
							return true;
						}
						else{return false;}
					}
					else if(this.getplaintext().IsSDec()==true&&i.getplaintext().IsSDec()==true)
					{ 
						if (this.getplaintext().SDecequal((SDec)(object)i.getplaintext ())==true ){ 
							return true;
						}
						else{return false;}
					}
					else if(this.getplaintext().IsPDec()==true&&i.getplaintext().IsPDec()==true)
					{ 
						if (this.getplaintext().PDecequal((PDec)(object)i.getplaintext ())==true ){ 
							return true;
						}
						else{return false;}
					}
					else if(this.getplaintext().IsGetSignMsg()==true&&i.getplaintext().IsGetSignMsg()==true)
					{ 
						if (this.getplaintext().Msgequal((GetSignMsg)(object)i.getplaintext ())==true ){ 
							return true;
						}
						else{return false;}
					}
					else if(this.getplaintext().IsOpen()==true&&i.getplaintext().IsOpen()==true)
					{ 
						if (this.getplaintext().Openequal((Open)(object)i.getplaintext ())==true ){ 
							return true;
						}
						else{return false;}
					}else {
						return false;
					}	
				}
				else return false;
			}
			else return false;
		}
		public override string ToString()
		{
			return "PEnc";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return ""; }
		}
	}
//define a data type "Pair" which inheritates Bitstring (a pair is a Bitstring)
	public class Pair : Bitstring
	{   
//there are two elements in a pair, each of which is of any type
                private Unitype first;
		private Unitype second;
		public Pair()
		{
		}
		public Pair(Unitype n1, Unitype n2)
		{
			first=n1;
			second=n2;
		}
//define a function which returns the first element
		public Unitype getfirst()
		{
			return this.first;
		}

//define a function which returns the second element
		public Unitype getsecond()
		{
			return this.second;
		}
//define a function to test the equality of two paris: the first elements are the same, and the second elements are the same 
//Todo: try to shrink
		public override bool Pairequal(Pair i)
		{ 
			if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsNonce()==true && i.getfirst().IsNonce()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().Nonceequal ((Nonce)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsConstant()==true && i.getfirst().IsConstant()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().Constantequal ((Constant)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSKey()==true && i.getfirst().IsSKey()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().SKeyequal ((SKey)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPKey()==true && i.getfirst().IsPKey()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().PKeyequal ((PKey)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsAEnc()==true && i.getfirst().IsAEnc()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().AEncequal ((AEnc)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSEnc()==true && i.getfirst().IsSEnc()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().SEncequal ((SEnc)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPEnc()==true && i.getfirst().IsPEnc()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().PEncequal ((PEnc)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPair()==true && i.getfirst().IsPair()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().Pairequal ((Pair)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsHash()==true && i.getfirst().IsHash()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().Hashequal ((Hash)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSign()==true && i.getfirst().IsSign()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().Signequal ((Sign)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsCommit()==true && i.getfirst().IsCommit()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().Commitequal ((Commit)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsADec()==true && i.getfirst().IsADec()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().ADecequal ((ADec)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsSDec()==true && i.getfirst().IsSDec()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().SDecequal ((SDec)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsPDec()==true && i.getfirst().IsPDec()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().PDecequal ((PDec)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsGetSignMsg()==true && i.getfirst().IsGetSignMsg()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().Msgequal ((GetSignMsg)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsCommit()==true && i.getsecond().IsCommit()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().Commitequal ((Commit)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsNonce()==true && i.getsecond().IsNonce()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().Nonceequal ((Nonce)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsConstant()==true && i.getsecond().IsConstant()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().Constantequal ((Constant)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsSKey()==true && i.getsecond().IsSKey()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().SKeyequal ((SKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsPKey()==true && i.getsecond().IsPKey()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().PKeyequal ((PKey)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsAEnc()==true && i.getsecond().IsAEnc()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().AEncequal ((AEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsSEnc()==true && i.getsecond().IsSEnc()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().SEncequal ((SEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsPEnc()==true && i.getsecond().IsPEnc()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().PEncequal ((PEnc)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsPair()==true && i.getsecond().IsPair()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().Pairequal ((Pair)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsSign()==true && i.getsecond().IsSign()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().Signequal ((Sign)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsHash()==true && i.getsecond().IsHash()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().Hashequal ((Hash)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsADec()==true && i.getsecond().IsADec()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().ADecequal ((ADec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsSDec()==true && i.getsecond().IsSDec()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().SDecequal ((SDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsPDec()==true && i.getsecond().IsPDec()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().PDecequal ((PDec)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsGetSignMsg()==true && i.getsecond().IsGetSignMsg()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().Msgequal ((GetSignMsg)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else if (this.getfirst().IsOpen()==true && i.getfirst().IsOpen()==true && this.getsecond().IsOpen()==true && i.getsecond().IsOpen()==true)
			{
				if(this.getfirst().Openequal ((Open)(object)i.getfirst()) == true&&this.getsecond().Openequal ((Open)(object)i.getsecond()) == true) { 
					return true;
				} else {
					return false;
				}
			}
			else{return false;}
		}
		public override string ToString()
		{
			return "Pair";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return ""; }
		}
	}
//define a data type "Hash" which inheritates Bitstring (a hash is a Bitstring)
	public class Hash : Bitstring
	{
//the original data before hashing, which can be of any type
		private Unitype plaintext;
		public Hash()
		{
		}
		public Hash(Unitype x)
		{
			plaintext = x;
		}
//an internal function to get the original data
		internal Unitype getplaintext()
		{
			return this.plaintext;
		}
//define a function to test the equality of two paris: the original data is the same 		
//Todo: try to shrink
		public override bool Hashequal(Hash i)
		{ 
			if (this.getplaintext ().IsNonce () == true && i.getplaintext ().IsNonce () == true) { 
				if (this.getplaintext ().Nonceequal ((Nonce)(object)i.getplaintext ()) == true) { 
					return true;
				} else {
					return false;
				}
			} else if (this.getplaintext ().IsConstant () == true && i.getplaintext ().IsConstant () == true) { 
				if (this.getplaintext ().Constantequal ((Constant)(object)i.getplaintext ()) == true) { 
					return true;
				} else {
					return false;
				}	
			} else if (this.getplaintext ().IsSKey () == true && i.getplaintext ().IsSKey () == true) { 
				if (this.getplaintext ().SKeyequal ((SKey)(object)i.getplaintext ()) == true) { 
					return true;
				} else {
					return false;
				}	
			} else if (this.getplaintext ().IsPKey () == true && i.getplaintext ().IsPKey () == true) { 
				if (this.getplaintext ().PKeyequal ((PKey)(object)i.getplaintext ()) == true) { 
					return true;
				} else {
					return false;
				}	
			} else if (this.getplaintext ().IsAEnc () == true && i.getplaintext ().IsAEnc () == true) { 
				if (this.getplaintext ().AEncequal ((AEnc)(object)i.getplaintext ()) == true) { 
					return true;
				} else {
					return false;
				}	
			} else if (this.getplaintext ().IsSEnc () == true && i.getplaintext ().IsSEnc () == true) { 
				if (this.getplaintext ().SEncequal ((SEnc)(object)i.getplaintext ()) == true) { 
					return true;
				} else {
					return false;
				}	
			} else if (this.getplaintext ().IsSEnc () == true && i.getplaintext ().IsSEnc () == true) { 
				if (this.getplaintext ().SEncequal ((SEnc)(object)i.getplaintext ()) == true) { 
					return true;
				} else {
					return false;
				}	
			}
			else if (this.getplaintext ().IsPEnc () == true && i.getplaintext ().IsPEnc () == true) { 
				if (this.getplaintext ().PEncequal ((PEnc)(object)i.getplaintext ()) == true) { 
					return true;
				} else {
					return false;
				}	
			}else if (this.getplaintext ().IsPair () == true && i.getplaintext ().IsPair () == true) { 
				if (this.getplaintext ().Pairequal ((Pair)(object)i.getplaintext ()) == true) { 
					return true;
				} else {
					return false;
				}	
			}
			else if (this.getplaintext ().IsHash () == true && i.getplaintext ().IsHash () == true) { 
				if (this.getplaintext ().Hashequal ((Hash)(object)i.getplaintext ()) == true) { 
					return true;
				} else {
					return false;
				}	
			}
			else if (this.getplaintext ().IsSign () == true && i.getplaintext ().IsSign () == true) { 
				if (this.getplaintext ().Signequal ((Sign)(object)i.getplaintext ()) == true) { 
					return true;
				} else {
					return false;
				}	
			}
			else if (this.getplaintext ().IsCommit () == true && i.getplaintext ().IsCommit () == true) { 
				if (this.getplaintext ().Commitequal ((Commit)(object)i.getplaintext ()) == true) { 
					return true;
				} else {
					return false;
				}	
			}else if(this.getplaintext().IsADec()==true&&i.getplaintext().IsADec()==true)
			{ 
				if (this.getplaintext().ADecequal((ADec)(object)i.getplaintext ())==true ){ 
					return true;
				}
				else{return false;}
			}
			else if(this.getplaintext().IsSDec()==true&&i.getplaintext().IsSDec()==true)
			{ 
				if (this.getplaintext().SDecequal((SDec)(object)i.getplaintext ())==true ){ 
					return true;
				}
				else{return false;}
			}
			else if(this.getplaintext().IsPDec()==true&&i.getplaintext().IsPDec()==true)
			{ 
				if (this.getplaintext().PDecequal((PDec)(object)i.getplaintext ())==true ){ 
					return true;
				}
				else{return false;}
			}
			else if(this.getplaintext().IsGetSignMsg()==true&&i.getplaintext().IsGetSignMsg()==true)
			{ 
				if (this.getplaintext().Msgequal((GetSignMsg)(object)i.getplaintext ())==true ){ 
					return true;
				}
				else{return false;}
			}
			else if(this.getplaintext().IsOpen()==true&&i.getplaintext().IsOpen()==true)
			{ 
				if (this.getplaintext().Openequal((Open)(object)i.getplaintext ())==true ){ 
					return true;
				}
				else{return false;}
			}else {
				return false;
			}

		}
		public override string ToString()
		{
			return "Hash";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get { return ""; }
		}
	}
//define a data type "Sign" which inheritates Bitstring (a signature is a Bitstring)	
	public class Sign : Bitstring
	{
//the plaintext to sign which is of any type, the secret key which is used to sign
		private Unitype plaintext;
		private SKey sk;
		public Sign()
		{
		}
		public Sign(Unitype x, SKey k)
		{
			plaintext = x;
			sk = k;
		}
//define a function to test whether one can use an input public key to check the signature
		public bool isDecryptable(PKey n)
		{
			if (n.IsPkOf(this.sk) == true)
			{
				return true;
			}
			return false;
		}
//an internal function that returns the plaintex
		internal Unitype getplaintext()
		{
			return this.plaintext;
		}
//an internal function that returns the secret key		
		internal SKey getsk()
		{
			return this.sk;
		}
//define a function to test the equality of two signatures: the secret keys are the same and the plaintexts are the same		
//Todo: try to shrink
		public override bool Signequal(Sign i)
		{ 
			if (this.getsk ().SKeyequal (i.getsk ()) == true) {
				if (this.getplaintext ().IsNonce () == true && i.getplaintext ().IsNonce () == true) { 
					if (this.getplaintext ().Nonceequal ((Nonce)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}
				} else if (this.getplaintext ().IsConstant () == true && i.getplaintext ().IsConstant () == true) { 
					if (this.getplaintext ().Constantequal ((Constant)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				} else if (this.getplaintext ().IsSKey () == true && i.getplaintext ().IsSKey () == true) { 
					if (this.getplaintext ().SKeyequal ((SKey)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				} else if (this.getplaintext ().IsPKey () == true && i.getplaintext ().IsPKey () == true) { 
					if (this.getplaintext ().PKeyequal ((PKey)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				} else if (this.getplaintext ().IsAEnc () == true && i.getplaintext ().IsAEnc () == true) { 
					if (this.getplaintext ().AEncequal ((AEnc)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}else if (this.getplaintext ().IsSEnc () == true && i.getplaintext ().IsSEnc () == true) { 
					if (this.getplaintext ().SEncequal ((SEnc)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				} else if (this.getplaintext ().IsPEnc () == true && i.getplaintext ().IsPEnc () == true) { 
					if (this.getplaintext ().PEncequal ((PEnc)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}else if (this.getplaintext ().IsPair () == true && i.getplaintext ().IsPair () == true) { 
					if (this.getplaintext ().Pairequal ((Pair)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsHash () == true && i.getplaintext ().IsHash () == true) { 
					if (this.getplaintext ().Hashequal ((Hash)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsSign () == true && i.getplaintext ().IsSign () == true) { 
					if (this.getplaintext ().Signequal ((Sign)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsCommit () == true && i.getplaintext ().IsCommit () == true) { 
					if (this.getplaintext ().Commitequal ((Commit)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}else if(this.getplaintext().IsADec()==true&&i.getplaintext().IsADec()==true)
				{ 
					if (this.getplaintext().ADecequal((ADec)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsSDec()==true&&i.getplaintext().IsSDec()==true)
				{ 
					if (this.getplaintext().SDecequal((SDec)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsPDec()==true&&i.getplaintext().IsPDec()==true)
				{ 
					if (this.getplaintext().PDecequal((PDec)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsGetSignMsg()==true&&i.getplaintext().IsGetSignMsg()==true)
				{ 
					if (this.getplaintext().Msgequal((GetSignMsg)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsOpen()==true&&i.getplaintext().IsOpen()==true)
				{ 
					if (this.getplaintext().Openequal((Open)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}else {
					return false;
				}	
			}
			else return false;
		}
		public override string ToString()
		{
			return "Sign";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get { return ""; }
		}
	}
//define a data type "Commit" which inheritates Bitstring (a cimmitment is a Bitstring)	
	public class Commit : Bitstring
	{
//the plaintext that is committed, the nonce of the commit
		private Unitype plaintext;
		private Nonce random;
		public Commit()
		{
		}
		public Commit(Unitype x, Nonce r)
		{
			plaintext = x;
			random = r;
		}
//define a function to test whether we can use an input nonce to open the commit		
		public bool isDecryptable(Nonce n)
		{
			if (this.random == n)
			{
				return true;
			}
			return false;
		}
//an internal function that returns the plaintex		
		internal Unitype getplaintext()
		{
			return this.plaintext;
		}
//an internal function that returns the nonce
		internal Nonce getrandom()
		{
			return this.random;
		}
//define a function ot test the equality of two commitments: the nonces are the same and the plaintexts are the same	
//Todo: try to shrink
		public override bool Commitequal(Commit i)
		{ 
			if (this.getrandom ().Nonceequal (i.getrandom ()) == true) {
				if (this.getplaintext ().IsNonce () == true && i.getplaintext ().IsNonce () == true) { 
					if (this.getplaintext ().Nonceequal ((Nonce)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}
				} else if (this.getplaintext ().IsConstant () == true && i.getplaintext ().IsConstant () == true) { 
					if (this.getplaintext ().Constantequal ((Constant)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				} else if (this.getplaintext ().IsSKey () == true && i.getplaintext ().IsSKey () == true) { 
					if (this.getplaintext ().SKeyequal ((SKey)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				} else if (this.getplaintext ().IsPKey () == true && i.getplaintext ().IsPKey () == true) { 
					if (this.getplaintext ().PKeyequal ((PKey)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				} else if (this.getplaintext ().IsAEnc () == true && i.getplaintext ().IsAEnc () == true) { 
					if (this.getplaintext ().AEncequal ((AEnc)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}else if (this.getplaintext ().IsSEnc () == true && i.getplaintext ().IsSEnc () == true) { 
					if (this.getplaintext ().SEncequal ((SEnc)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				} else if (this.getplaintext ().IsPEnc () == true && i.getplaintext ().IsPEnc () == true) { 
					if (this.getplaintext ().PEncequal ((PEnc)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}else if (this.getplaintext ().IsPair () == true && i.getplaintext ().IsPair () == true) { 
					if (this.getplaintext ().Pairequal ((Pair)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsHash () == true && i.getplaintext ().IsHash () == true) { 
					if (this.getplaintext ().Hashequal ((Hash)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsSign () == true && i.getplaintext ().IsSign () == true) { 
					if (this.getplaintext ().Signequal ((Sign)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}
				else if (this.getplaintext ().IsCommit () == true && i.getplaintext ().IsCommit () == true) { 
					if (this.getplaintext ().Commitequal ((Commit)(object)i.getplaintext ()) == true) { 
						return true;
					} else {
						return false;
					}	
				}else if(this.getplaintext().IsADec()==true&&i.getplaintext().IsADec()==true)
				{ 
					if (this.getplaintext().ADecequal((ADec)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsSDec()==true&&i.getplaintext().IsSDec()==true)
				{ 
					if (this.getplaintext().SDecequal((SDec)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsPDec()==true&&i.getplaintext().IsPDec()==true)
				{ 
					if (this.getplaintext().PDecequal((PDec)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsGetSignMsg()==true&&i.getplaintext().IsGetSignMsg()==true)
				{ 
					if (this.getplaintext().Msgequal((GetSignMsg)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}
				else if(this.getplaintext().IsOpen()==true&&i.getplaintext().IsOpen()==true)
				{ 
					if (this.getplaintext().Openequal((Open)(object)i.getplaintext ())==true ){ 
						return true;
					}
					else{return false;}
				}else {
					return false;
				}	
			}
			else return false;
		}
		public override string ToString()
		{
			return "Commit";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get { return ""; }
		}
	}
	/// <summary>
	/// Destructors
	/// </summary>
//todo: try to implement as a method rather than a datatype
	public class ADec : Unitype
	{   private AEnc ciphertext;
		private SKey sk;
		public ADec()
		{
		}
		public ADec(AEnc c, SKey k)
		{
			ciphertext = c;
			sk = k;
		}
		internal AEnc getcipher()
		{
			return this.ciphertext;
		}
		internal SKey getsk()
		{
			return this.sk;
		}
		public Unitype result()
		{
			if (this.ciphertext.getpk().IsPkOf(this.sk)==true)
			{
				return this.ciphertext.getplaintext();
			}
			else
			{
				return this;
			}			

		}
		public override bool ADecequal(ADec i)
		{
			if (this.getcipher ().isDecryptable (this.getsk ()) == true && i.getcipher ().isDecryptable (i.getsk ()) == true) {
				if (this.result ().IsNonce () == true && i.result ().IsNonce () == true) {
					return this.result ().Nonceequal ((Nonce)(object)i.result ());
				} else if (this.result ().IsConstant () == true && i.result ().IsConstant () == true) {
					return this.result ().Constantequal ((Constant)(object)i.result ());
				} else if (this.result ().IsSKey () == true && i.result ().IsSKey () == true) {
					return this.result ().SKeyequal ((SKey)(object)i.result ());
				} else if (this.result ().IsPKey () == true && i.result ().IsPKey () == true) {
					return this.result ().PKeyequal ((PKey)(object)i.result ());
				} else if (this.result ().IsAEnc () == true && i.result ().IsAEnc () == true) {
					return this.result ().AEncequal ((AEnc)(object)i.result ());
				} else if (this.result ().IsSEnc () == true && i.result ().IsSEnc () == true) {
					return this.result ().SEncequal ((SEnc)(object)i.result ());
				} else if (this.result ().IsPEnc () == true && i.result ().IsPEnc () == true) {
					return this.result ().PEncequal ((PEnc)(object)i.result ());
				} else if (this.result ().IsPair () == true && i.result ().IsPair () == true) {
					return this.result ().Pairequal ((Pair)(object)i.result ());
				} else if (this.result ().IsHash () == true && i.result ().IsHash () == true) {
					return this.result ().Hashequal ((Hash)(object)i.result ());
				} else if (this.result ().IsSign () == true && i.result ().IsSign () == true) {
					return this.result ().Signequal ((Sign)(object)i.result ());
				} else if (this.result ().IsCommit () == true && i.result ().IsCommit () == true) {
					return this.result ().Commitequal ((Commit)(object)i.result ());
				} else if (this.result ().IsADec () == true && i.result ().IsADec () == true) {
					return this.result ().ADecequal ((ADec)(object)i.result ());
				} else if (this.result ().IsSDec () == true && i.result ().IsSDec () == true){
					return this.result ().SDecequal ((SDec)(object)i.result ());
				}else if (this.result ().IsPDec () == true && i.result ().IsPDec () == true){
					return this.result ().PDecequal ((PDec)(object)i.result ());
				}else if (this.result ().IsGetSignMsg () == true && i.result ().IsGetSignMsg () == true){
					return this.result ().Msgequal ((GetSignMsg)(object)i.result ());
				}else if (this.result ().IsOpen () == true && i.result ().IsOpen () == true){
					return this.result ().Openequal ((Open)(object)i.result ());
				}else
					return false;
			} else if (this.getcipher ().isDecryptable (this.getsk ()) == false && i.getcipher ().isDecryptable (i.getsk ()) == false) {
				if (this.getcipher ().AEncequal (i.getcipher()) == true && this.getsk ().SKeyequal (this.getsk ()) == true) {
					return true;
				} else
					return false;
			} else
				return false;
		}
		public override string ToString()
		{
			return "ADec";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return ""; }
		}
	}
//todo: try to implement as a method rather than a datatype	
	public class SDec : Unitype
	{
		private SEnc ciphertext;
		private SKey sk;
		public SDec()
		{
		}
		public SDec(SEnc c, SKey k)
		{
			ciphertext = c;
			sk = k;			
		}
		public Unitype result()
		{
			if (this.ciphertext.getsk() == this.sk)
			{
				return this.ciphertext.getplaintext();
			}
			else
			{
				return this;
			}			

		}
		internal SEnc getcipher()
		{
			return this.ciphertext;
		}
		internal SKey getsk()
		{
			return this.sk;
		}
		public override bool SDecequal(SDec i)
		{
			if (this.getcipher ().isDecryptable (this.getsk ()) == true && i.getcipher ().isDecryptable (i.getsk ()) == true) {
				if (this.result ().IsNonce () == true && i.result ().IsNonce () == true) {
					return this.result ().Nonceequal ((Nonce)(object)i.result ());
				} else if (this.result ().IsConstant () == true && i.result ().IsConstant () == true) {
					return this.result ().Constantequal ((Constant)(object)i.result ());
				} else if (this.result ().IsSKey () == true && i.result ().IsSKey () == true) {
					return this.result ().SKeyequal ((SKey)(object)i.result ());
				} else if (this.result ().IsPKey () == true && i.result ().IsPKey () == true) {
					return this.result ().PKeyequal ((PKey)(object)i.result ());
				} else if (this.result ().IsAEnc () == true && i.result ().IsAEnc () == true) {
					return this.result ().AEncequal ((AEnc)(object)i.result ());
				} else if (this.result ().IsSEnc () == true && i.result ().IsSEnc () == true) {
					return this.result ().SEncequal ((SEnc)(object)i.result ());
				} else if (this.result ().IsPEnc () == true && i.result ().IsPEnc () == true) {
					return this.result ().PEncequal ((PEnc)(object)i.result ());
				} else if (this.result ().IsPair () == true && i.result ().IsPair () == true) {
					return this.result ().Pairequal ((Pair)(object)i.result ());
				} else if (this.result ().IsHash () == true && i.result ().IsHash () == true) {
					return this.result ().Hashequal ((Hash)(object)i.result ());
				} else if (this.result ().IsSign () == true && i.result ().IsSign () == true) {
					return this.result ().Signequal ((Sign)(object)i.result ());
				} else if (this.result ().IsCommit () == true && i.result ().IsCommit () == true) {
					return this.result ().Commitequal ((Commit)(object)i.result ());
				} else if (this.result ().IsADec () == true && i.result ().IsADec () == true) {
					return this.result ().ADecequal ((ADec)(object)i.result ());
				} else if (this.result ().IsSDec () == true && i.result ().IsSDec () == true){
					return this.result ().SDecequal ((SDec)(object)i.result ());
				}else if (this.result ().IsPDec () == true && i.result ().IsPDec () == true){
					return this.result ().PDecequal ((PDec)(object)i.result ());
				}else if (this.result ().IsGetSignMsg () == true && i.result ().IsGetSignMsg () == true){
					return this.result ().Msgequal ((GetSignMsg)(object)i.result ());
				}else if (this.result ().IsOpen () == true && i.result ().IsOpen () == true){
					return this.result ().Openequal ((Open)(object)i.result ());
				}else
					return false;
			} else if (this.getcipher ().isDecryptable (this.getsk ()) == false && i.getcipher ().isDecryptable (i.getsk ()) == false) {
				if (this.getcipher ().SEncequal (i.getcipher()) == true && this.getsk ().SKeyequal (this.getsk ()) == true) {
					return true;
				} else
					return false;
			} else
				return false;
		}
		public override string ToString()
		{
			return "SDec";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get { return ""; }
		}
	}

//todo: try to implement as a method rather than a datatype
	public class PDec : Unitype
	{
		private PEnc ciphertext;
		private SKey sk;
		public PDec()
		{
		}
		public PDec(PEnc c, SKey k)
		{
			ciphertext=c;
			sk=k;
		}
		public Unitype result()
		{  
			if (this.ciphertext.getpk().IsPkOf(this.sk)==true)
			{ 
				return this.ciphertext.getplaintext();
			}
			else{
				return this;
			}
		}
		internal PEnc getcipher()
		{
			return this.ciphertext;
		}
		internal SKey getsk(){
			return this.sk;
		}
		public override bool PDecequal(PDec i)
		{
			if (this.getcipher ().isDecryptable (this.getsk ()) == true && i.getcipher ().isDecryptable (i.getsk ()) == true) {
				if (this.result ().IsNonce () == true && i.result ().IsNonce () == true) {
					return this.result ().Nonceequal ((Nonce)(object)i.result ());
				} else if (this.result ().IsConstant () == true && i.result ().IsConstant () == true) {
					return this.result ().Constantequal ((Constant)(object)i.result ());
				} else if (this.result ().IsSKey () == true && i.result ().IsSKey () == true) {
					return this.result ().SKeyequal ((SKey)(object)i.result ());
				} else if (this.result ().IsPKey () == true && i.result ().IsPKey () == true) {
					return this.result ().PKeyequal ((PKey)(object)i.result ());
				} else if (this.result ().IsAEnc () == true && i.result ().IsAEnc () == true) {
					return this.result ().AEncequal ((AEnc)(object)i.result ());
				} else if (this.result ().IsSEnc () == true && i.result ().IsSEnc () == true) {
					return this.result ().SEncequal ((SEnc)(object)i.result ());
				} else if (this.result ().IsPEnc () == true && i.result ().IsPEnc () == true) {
					return this.result ().PEncequal ((PEnc)(object)i.result ());
				} else if (this.result ().IsPair () == true && i.result ().IsPair () == true) {
					return this.result ().Pairequal ((Pair)(object)i.result ());
				} else if (this.result ().IsHash () == true && i.result ().IsHash () == true) {
					return this.result ().Hashequal ((Hash)(object)i.result ());
				} else if (this.result ().IsSign () == true && i.result ().IsSign () == true) {
					return this.result ().Signequal ((Sign)(object)i.result ());
				} else if (this.result ().IsCommit () == true && i.result ().IsCommit () == true) {
					return this.result ().Commitequal ((Commit)(object)i.result ());
				} else if (this.result ().IsADec () == true && i.result ().IsADec () == true) {
					return this.result ().ADecequal ((ADec)(object)i.result ());
				}else if (this.result ().IsSDec () == true && i.result ().IsSDec () == true){
					return this.result ().SDecequal ((SDec)(object)i.result ());
				}else if (this.result ().IsPDec () == true && i.result ().IsPDec () == true){
					return this.result ().PDecequal ((PDec)(object)i.result ());
				}else if (this.result ().IsGetSignMsg () == true && i.result ().IsGetSignMsg () == true){
					return this.result ().Msgequal ((GetSignMsg)(object)i.result ());
				}else if (this.result ().IsOpen () == true && i.result ().IsOpen () == true){
					return this.result ().Openequal ((Open)(object)i.result ());
				} else
					return false;
			} else if (this.getcipher ().isDecryptable (this.getsk ()) == false && i.getcipher ().isDecryptable (i.getsk ()) == false) {
				if (this.getcipher ().PEncequal (i.getcipher()) == true && this.getsk ().SKeyequal (this.getsk ()) == true) {
					return true;
				} else
					return false;
			} else
				return false;
		}
		public override string ToString()
		{
			return "PDec";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get {return ""; }
		}
	} 
//todo: try to implement as a method rather than a datatype
	public class VerifySign : Unitype
	{
		private Sign signiture;
		private PKey pk;
		public VerifySign()
		{
		}
		public VerifySign(Sign x, PKey k)
		{
			signiture = x;
			pk = k;
		}
		public bool result()
		{
			if (this.pk.IsPkOf(this.signiture.getsk()) == true)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		public override string ToString()
		{
			return "VerifySign";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get { return ""; }
		}
	}
//todo: try to implement as a method rather than a datatype
	public class GetSignMsg : Unitype
	{
		private Sign signature;
		private PKey key;
		public GetSignMsg()
		{
		}
		public GetSignMsg(Sign x, PKey k)
		{
			signature = x;
			key = k;
		}
		public Unitype result()
		{
			if (this.key.IsPkOf(this.signature.getsk()) == true)
			{
				return this.signature.getplaintext();
			}
			else
			{
				return this;
			}
		}
		internal Sign getsign()
		{
			return this.signature;
		}
		internal PKey getpk(){
			return this.key;
		}
		public override bool Msgequal(GetSignMsg i)
		{
			if (this.getsign ().isDecryptable (this.getpk ()) == true && i.getsign ().isDecryptable (i.getpk ()) == true) {
				if (this.result ().IsNonce () == true && i.result ().IsNonce () == true) {
					return this.result ().Nonceequal ((Nonce)(object)i.result ());
				} else if (this.result ().IsConstant () == true && i.result ().IsConstant () == true) {
					return this.result ().Constantequal ((Constant)(object)i.result ());
				} else if (this.result ().IsSKey () == true && i.result ().IsSKey () == true) {
					return this.result ().SKeyequal ((SKey)(object)i.result ());
				} else if (this.result ().IsPKey () == true && i.result ().IsPKey () == true) {
					return this.result ().PKeyequal ((PKey)(object)i.result ());
				} else if (this.result ().IsAEnc () == true && i.result ().IsAEnc () == true) {
					return this.result ().AEncequal ((AEnc)(object)i.result ());
				} else if (this.result ().IsSEnc () == true && i.result ().IsSEnc () == true) {
					return this.result ().SEncequal ((SEnc)(object)i.result ());
				} else if (this.result ().IsPEnc () == true && i.result ().IsPEnc () == true) {
					return this.result ().PEncequal ((PEnc)(object)i.result ());
				} else if (this.result ().IsPair () == true && i.result ().IsPair () == true) {
					return this.result ().Pairequal ((Pair)(object)i.result ());
				} else if (this.result ().IsHash () == true && i.result ().IsHash () == true) {
					return this.result ().Hashequal ((Hash)(object)i.result ());
				} else if (this.result ().IsSign () == true && i.result ().IsSign () == true) {
					return this.result ().Signequal ((Sign)(object)i.result ());
				} else if (this.result ().IsCommit () == true && i.result ().IsCommit () == true) {
					return this.result ().Commitequal ((Commit)(object)i.result ());
				} else if (this.result ().IsADec () == true && i.result ().IsADec () == true) {
					return this.result ().ADecequal ((ADec)(object)i.result ());
				} else if (this.result ().IsSDec () == true && i.result ().IsSDec () == true){
					return this.result ().SDecequal ((SDec)(object)i.result ());
				}else if (this.result ().IsPDec () == true && i.result ().IsPDec () == true){
					return this.result ().PDecequal ((PDec)(object)i.result ());
				}else if (this.result ().IsGetSignMsg () == true && i.result ().IsGetSignMsg () == true){
					return this.result ().Msgequal ((GetSignMsg)(object)i.result ());
				}else if (this.result ().IsOpen () == true && i.result ().IsOpen () == true){
					return this.result ().Openequal ((Open)(object)i.result ());
				}else
					return false;
			} else if (this.getsign ().isDecryptable (this.getpk ()) == false && i.getsign ().isDecryptable (i.getpk ()) == false) {
				if (this.getsign ().Signequal (i.getsign()) == true && this.getpk ().PKeyequal (this.getpk ()) == true) {
					return true;
				} else
					return false;
			} else
				return false;
		}
		public override string ToString()
		{
			return "GetSignMsg";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get { return ""; }
		}
	}
//todo: try to implement as a method rather than a datatype
	public class Open : Unitype
	{
		private Commit c;
		private Nonce random;
		public Open()
		{
		}
		public Open(Commit x, Nonce r)
		{
			c = x;
			random = r;
		}
		public Unitype result()
		{
			if (this.c.getrandom() == this.random )
			{
				return this.c.getplaintext();
			}
			else
			{
				return this;
			}
		}
		internal Commit getcipher()
		{
			return this.c;
		}
		internal Nonce getrandom(){
			return this.random;
		}
		public override bool Openequal(Open i)
		{
			if (this.getcipher ().isDecryptable (this.getrandom ()) == true && i.getcipher ().isDecryptable (i.getrandom ()) == true) {
				if (this.result ().IsNonce () == true && i.result ().IsNonce () == true) {
					return this.result ().Nonceequal ((Nonce)(object)i.result ());
				} else if (this.result ().IsConstant () == true && i.result ().IsConstant () == true) {
					return this.result ().Constantequal ((Constant)(object)i.result ());
				} else if (this.result ().IsSKey () == true && i.result ().IsSKey () == true) {
					return this.result ().SKeyequal ((SKey)(object)i.result ());
				} else if (this.result ().IsPKey () == true && i.result ().IsPKey () == true) {
					return this.result ().PKeyequal ((PKey)(object)i.result ());
				} else if (this.result ().IsAEnc () == true && i.result ().IsAEnc () == true) {
					return this.result ().AEncequal ((AEnc)(object)i.result ());
				} else if (this.result ().IsSEnc () == true && i.result ().IsSEnc () == true) {
					return this.result ().SEncequal ((SEnc)(object)i.result ());
				} else if (this.result ().IsPEnc () == true && i.result ().IsPEnc () == true) {
					return this.result ().PEncequal ((PEnc)(object)i.result ());
				} else if (this.result ().IsPair () == true && i.result ().IsPair () == true) {
					return this.result ().Pairequal ((Pair)(object)i.result ());
				} else if (this.result ().IsHash () == true && i.result ().IsHash () == true) {
					return this.result ().Hashequal ((Hash)(object)i.result ());
				} else if (this.result ().IsSign () == true && i.result ().IsSign () == true) {
					return this.result ().Signequal ((Sign)(object)i.result ());
				} else if (this.result ().IsCommit () == true && i.result ().IsCommit () == true) {
					return this.result ().Commitequal ((Commit)(object)i.result ());
				} else if (this.result ().IsADec () == true && i.result ().IsADec () == true) {
					return this.result ().ADecequal ((ADec)(object)i.result ());
				} else if (this.result ().IsSDec () == true && i.result ().IsSDec () == true){
					return this.result ().SDecequal ((SDec)(object)i.result ());
				}else if (this.result ().IsPDec () == true && i.result ().IsPDec () == true){
					return this.result ().PDecequal ((PDec)(object)i.result ());
				}else if (this.result ().IsGetSignMsg () == true && i.result ().IsGetSignMsg () == true){
					return this.result ().Msgequal ((GetSignMsg)(object)i.result ());
				}else if (this.result ().IsOpen () == true && i.result ().IsOpen () == true){
					return this.result ().Openequal ((Open)(object)i.result ());
				}
				else
					return false;
			} else if (this.getcipher ().isDecryptable (this.getrandom ()) == false && i.getcipher ().isDecryptable (i.getrandom ()) == false) {
				if (this.getcipher ().Commitequal (i.getcipher()) == true && this.getrandom ().Nonceequal (this.getrandom ()) == true) {
					return true;
				} else
					return false;
			} else
				return false;
		}
		public override string ToString()
		{
			return "Open";
		}
		public override ExpressionValue GetClone()
		{
			return this;
		}
		public override string ExpressionID
		{
			get { return ""; }
		}
	}
//define the adversary knowledge
	public class Knowledge: Unitype
	{ 
        //a list install an initial set of adversary knowledge terms
		public List<Unitype> list=null;
		//a list contains all the subterms of the terms in list
		public List<Unitype> subterms = null;
		//define a set of list of each type and inititate them as empty	
		private List<Nonce> NonceList=null; 
		private List<Constant> ConstantList = null;
		private List<SKey> SKeyList = null;
		private List<PKey> PKeyList = null;
		private List<AEnc> AEncList = null;
		private List<SEnc> SEncList = null;
		private List<PEnc> PEncList = null;
		private List<Pair> PairList = null;
		private List<Hash> HashList = null;
		private List<Sign> SignList = null;
		private List<Commit> CommitList = null;
		private List<ADec> ADecList = null;
		private List<SDec> SDecList = null;
		private List<PDec> PDecList = null;
		private List<GetSignMsg> GetSignMsgList = null;
		private List<Open> OpenList = null;
		public Knowledge()
		{
//list stores the adversary knowledge read from the network, which can be of any type	
			list=new List<Unitype>();
//subterms store the sub-terms of the terms in list, which can be of any type		
			subterms = new List<Unitype> ();
			NonceList = new List<Nonce> ();
			ConstantList = new List<Constant> ();
			SKeyList = new List<SKey> ();
			PKeyList = new List<PKey> ();
			AEncList = new List<AEnc> ();
			SEncList = new List<SEnc> ();
			PEncList = new List<PEnc> ();
			PairList = new List<Pair> ();
			HashList = new List<Hash> ();
			SignList = new List<Sign> ();
			CommitList = new List<Commit> ();
			ADecList = new List<ADec> ();
			SDecList = new List<SDec> ();
			PDecList = new List<PDec> ();
			GetSignMsgList = new List<GetSignMsg> ();
			OpenList = new List<Open> ();
		}
//define a function which tell whether using the attacher knowledge one can deduce the input type	
		public bool knows(Unitype i)
		{ 
            try{
//if the input is null, there will be an execution error
                if (object.ReferenceEquals(i, null) || i == null) {
                    return false;
                } else {
//if the input is a constructor                
                    if (i.IsNonce () == true || i.IsConstant () == true || 
                        i.IsAEnc () == true || i.IsSEnc () == true || i.IsPEnc () == true || 
                        i.IsHash () == true || i.IsSign () == true || i.IsCommit () == true || 
                        i.IsSKey () == true || i.IsPKey () == true || i.IsPair () == true) {
//if i exists in the initial adversary knowledge list, then the adversary knows it                        
                        if (list.Exists (gdb=>(gdb.equal(i)==true))) {
                            return true;
                        } else {
//if i does not exisst in the initial adversary knowledge list, we try to see whether the adversary can deduce it from the inital adversary knowledge list                        
                            return deduce (i);
                        }
                    } 
//if the input is a destructor
//Todo:remove it                      
                    else if (i.IsADec () == true) {
                        if (((ADec)(object)i).getcipher ().isDecryptable (((ADec)(object)i).getsk ()) == true) {
                            return knows (((ADec)(object)i).result ());
                        } else {
                            if (list.Contains (i)) {
                                return true;
                            } else {
                                return deduce (i);
                            }
                        }
                    } else if (i.IsSDec () == true) {
                        if (((SDec)(object)i).getcipher ().isDecryptable (((SDec)(object)i).getsk ()) == true) {
                            return knows (((SDec)(object)i).result ());
                        } else {
                            if (list.Contains (i)) {
                                return true;
                            } else {
                                return deduce (i);
                            }
                        }
                    }                 
                    else if (i.IsPDec () == true) {
                        if (((PDec)(object)i).getcipher () != null && ((PDec)(object)i).getsk () != null && ((PDec)(object)i).getcipher ().isDecryptable (((PDec)(object)i).getsk ()) == true) {
                            return knows (((PDec)(object)i).result ());
                        } else {
                            if (list.Contains (i)) {
                                return true;
                            } else {
                                return deduce (i);
                            }
                        }
                    } else if (i.IsGetSignMsg () == true) {
                        if (((GetSignMsg)(object)i).getsign ().isDecryptable (((GetSignMsg)(object)i).getpk ()) == true) {
                            return knows (((GetSignMsg)(object)i).result ());
                        } else {
                            if (list.Contains (i)) {
                                return true;
                            } else {
                                return deduce (i);
                            }
                        }
                    } else if (i.IsOpen () == true) {
                        if (((Open)(object)i).getcipher ().isDecryptable (((Open)(object)i).getrandom ()) == true) {
                            return knows (((Open)(object)i).result ());
                        } else {
                            if (list.Contains (i)) {
                                return true;
                            } else {
                                return deduce (i);
                            }
                        }
                    } else
                        return false;
                }
            }
            catch (NullReferenceException)
            {
                return false;
            }
        }
//define a function to get the subterms of a term (following the algorithm, we fist add the subterms of the terms in the inital adversary knowledge list)         
		public bool addsubterm(Unitype i)
		{   
			if (i.IsNonce () == true || i.IsConstant () == true || i.IsSKey () == true) {
				subterms.Add (i);
				return true;
			} else if (i.IsPKey () == true) {
				subterms.Add (i);
				subterms.Add (((PKey)(object)i).getsk ());
				return true;
			} else if (i.IsAEnc () == true) {
				subterms.Add (i);
				subterms.Add (((AEnc)(Object)i).getpk ());
				subterms.Add (((AEnc)(Object)i).getpk ().getsk ());
				if (addsubterm (((AEnc)(Object)i).getplaintext ())==true) {
					return true;
				} else {
					throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in getsubterms aenc");
				}
			} else if (i.IsSEnc () == true) {
				subterms.Add (i);
				subterms.Add (((SEnc)(Object)i).getsk ());
				if (addsubterm (((SEnc)(Object)i).getplaintext ()) ==true) {
					return true;
				} else {
					throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in getsubterms senc");
				}
			} else if (i.IsPEnc () == true) {
				subterms.Add (i);
				subterms.Add (((PEnc)(Object)i).getpk ());
				subterms.Add (((PEnc)(Object)i).getpk ().getsk ());
				subterms.Add (((PEnc)(Object)i).getrandom ());
				if (addsubterm (((PEnc)(Object)i).getplaintext ()) ==true) {
					return true;
				} else {
					throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in getsubterms");
				}
			} else if (i.IsPair () == true) {
				subterms.Add (i);
				if (addsubterm (((Pair)(Object)i).getfirst ()) ==true) {
					if (addsubterm (((Pair)(Object)i).getsecond ()) ==true) {
						return true;
					} else {
						throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in getsubterms pair");
					}
				} else {
					throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in getsubterms pair");
				}
			} else if (i.IsHash () == true) {
				subterms.Add (i);
				if (addsubterm (((Hash)(Object)i).getplaintext ())==true) {
					return true;
				} else {
					throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in getsubterms senc");
				}
			} else if (i.IsSign () == true) {
				subterms.Add (i);
				subterms.Add (((Sign)(Object)i).getsk ());
				if (addsubterm (((Sign)(Object)i).getplaintext () )==true) {
					return true;
				} else {
					throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in getsubterms senc");
				}
			} else if (i.IsCommit () == true) {
				subterms.Add (i);
				subterms.Add (((Commit)(Object)i).getrandom ());
				if (addsubterm (((Commit)(Object)i).getplaintext () )==true) {
					return true;
				} else {
					throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in getsubterms senc");
				}
			}
			else return false;					
		}
		
		public bool changed = false;
        public List<Unitype> inf = null;
        public List<Unitype> dinf = null;
        public List<Unitype> targetsub = null;
		public List<Unitype> temp = null;
		public List<Unitype> te = null;
        private List<SKey> SKeyinf = null;
        private List<PKey> PKeyinf = null;
        private List<AEnc> AEncinf = null;
        private List<SEnc> SEncinf = null;
        private List<PEnc> PEncinf = null;
        private List<Pair> Pairinf = null;
        private List<Nonce> Nonceinf = null;
        private List<Constant> Constantinf = null;
        private List<Commit> Commitinf = null;
        private List<Hash> Hashinf = null;
        private List<Sign> Signinf = null;
		private List<SKey> nSKeyinf = null;
        private List<PKey> nPKeyinf = null;
        private List<AEnc> nAEncinf = null;
        private List<SEnc> nSEncinf = null;
        private List<PEnc> nPEncinf = null;
        private List<Pair> nPairinf = null;
        private List<Nonce> nNonceinf = null;
        private List<Constant> nConstantinf = null;
        private List<Commit> nCommitinf = null;
        private List<Hash> nHashinf = null;
        private List<Sign> nSigninf = null;
        
    	public void infAEncSKey (AEnc ciphertext, SKey key){
	    	if (ciphertext.isDecryptable(key)&&(targetsub.Contains (ciphertext.getplaintext ())||subterms.Contains(ciphertext.getplaintext ()))&&!list.Contains(ciphertext.getplaintext ())){
			    inf.Add (ciphertext.getplaintext ());
			    changed = true;
		    }
	    } //rule 1

	    public void infPEncSKey (PEnc ciphertext, SKey key){
		    if (ciphertext.isDecryptable(key)&&(targetsub.Contains (ciphertext.getplaintext ())||subterms.Contains(ciphertext.getplaintext ()))&&!list.Contains(ciphertext.getplaintext ())){
			    inf.Add (ciphertext.getplaintext ());
			    changed = true;
		    }
	    } //rule 2

	    public void infSEncSKey (SEnc ciphertext, SKey key){
		    if (ciphertext.isDecryptable(key)&&(targetsub.Contains (ciphertext.getplaintext ())||subterms.Contains(ciphertext.getplaintext ()))&&!list.Contains(ciphertext.getplaintext ())){
		    	inf.Add (ciphertext.getplaintext ());
			    changed = true;
		    }
	    } //rule 3
        
        public void infPair (Pair p){
			if (!list.Contains (p.getfirst ()) && (targetsub.Contains (p.getfirst ())||subterms.Contains(p.getfirst ()))) {
				inf.Add (p.getfirst ());
				changed = true;
			}
			if(!list.Contains (p.getsecond ()) && (targetsub.Contains (p.getsecond())||subterms.Contains(p.getsecond ()))) {
				inf.Add (p.getsecond ());
				changed = true;
			}
        } //rule 4
        
        public void infSignPKey (Sign ciphertext, PKey key){
            if(ciphertext.isDecryptable(key)&&(targetsub.Contains (ciphertext.getplaintext ())||subterms.Contains(ciphertext.getplaintext ()))&&!list.Contains(ciphertext.getplaintext ())){
				inf.Add (ciphertext.getplaintext ());
				changed = true;
			}
        } //rule 5
        
        public void infCommitNonce (Commit ciphertext, Nonce key){
            if(ciphertext.isDecryptable(key)&&(targetsub.Contains (ciphertext.getplaintext ())||subterms.Contains(ciphertext.getplaintext ()))&&!list.Contains(ciphertext.getplaintext ())){
				inf.Add (ciphertext.getplaintext ());
				changed = true;
			}
        } //rule 6
        
        public void infSKey (SKey key){
            if((targetsub.Exists(gd=>(gd.IsPKey() && ((PKey)(object)gd).getsk().equal(key)))|| subterms.Exists(gd=>(gd.IsPKey() && ((PKey)(object)gd).getsk().equal(key))))&&!PKeyList.Exists(gd=>(gd.getsk().equal(key)))){
				PKey pk = new PKey (key);
				inf.Add (pk);
				changed = true;
			}
        } //rule 7
        
        public void infNoncePKey (Nonce b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
								(((AEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((AEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
									(((AEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((AEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true)))))
								&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
									(((AEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((AEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true))))) {
								AEnc aenc = new AEnc (b, key);
								inf.Add (aenc);
								changed = true;
							}
        } //rule 8.1
        
        public void infConstantPKey (Constant b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
								(((AEnc)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((AEnc)(object)gdb).getplaintext ())).Constantequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
									(((AEnc)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((AEnc)(object)gdb).getplaintext ())).Constantequal (b)==true)))))
								&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
									(((AEnc)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((AEnc)(object)gdb).getplaintext ())).Constantequal (b)==true))))) {
								AEnc aenc = new AEnc (b, key);
								inf.Add (aenc);
								changed = true;
							}
        } //rule 8.2
        
        public void infSKeyPKey (SKey b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
								(((AEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((AEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
									(((AEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((AEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true)))))
								&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
									(((AEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((AEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true))))) {
								AEnc aenc = new AEnc (b, key);
								inf.Add (aenc);
								changed = true;
							}
        } //rule 8.3
        
        public void infPKeyPKey (PKey b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
								(((AEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((AEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
									(((AEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((AEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true)))))
								&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
									(((AEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((AEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true))))) {
								AEnc aenc = new AEnc (b, key);
								inf.Add (aenc);
								changed = true;
							}
        } //rule 8.4
        
        public void infAEncPKey (AEnc b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
								(((AEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((AEnc)(object)gdb).getplaintext ())).AEncequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
									(((AEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((AEnc)(object)gdb).getplaintext ())).AEncequal (b)==true)))))
								&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
									(((AEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((AEnc)(object)gdb).getplaintext ())).AEncequal (b)==true))))) {
								AEnc aenc = new AEnc (b, key);
								inf.Add (aenc);
								changed = true;
							}
        } //rule 8.5
        
        public void infSEncPKey (SEnc b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
								(((AEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((AEnc)(object)gdb).getplaintext ())).SEncequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
									(((AEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((AEnc)(object)gdb).getplaintext ())).SEncequal (b)==true)))))
								&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
									(((AEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((AEnc)(object)gdb).getplaintext ())).SEncequal (b)==true))))) {
								AEnc aenc = new AEnc (b, key);
								inf.Add (aenc);
								changed = true;
							}
        } //rule 8.6
        
        public void infPEncPKey (PEnc b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
								(((AEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((AEnc)(object)gdb).getplaintext ())).PEncequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
									(((AEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((AEnc)(object)gdb).getplaintext ())).PEncequal (b)==true)))))
								&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
									(((AEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((AEnc)(object)gdb).getplaintext ())).PEncequal (b)==true))))) {
								AEnc aenc = new AEnc (b, key);
								inf.Add (aenc);
								changed = true;
							}
        } //rule 8.7
        
        public void infPairPKey (Pair b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
								(((AEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((AEnc)(object)gdb).getplaintext ())).Pairequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
									(((AEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((AEnc)(object)gdb).getplaintext ())).Pairequal (b)==true)))))
								&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
									(((AEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((AEnc)(object)gdb).getplaintext ())).Pairequal (b)==true))))) {
								AEnc aenc = new AEnc (b, key);
								inf.Add (aenc);
								changed = true;
							}	
			
        } //rule 8.8
        
        public void infHashPKey (Hash b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
								(((AEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((AEnc)(object)gdb).getplaintext ())).Hashequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
									(((AEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((AEnc)(object)gdb).getplaintext ())).Hashequal (b)==true)))))
								&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
									(((AEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((AEnc)(object)gdb).getplaintext ())).Hashequal (b)==true))))) {
								AEnc aenc = new AEnc (b, key);
								inf.Add (aenc);
								changed = true;
							}
        } //rule 8.9
        
        public void infSignPKeyRule8 (Sign b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
								(((AEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((AEnc)(object)gdb).getplaintext ())).Signequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
									(((AEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((AEnc)(object)gdb).getplaintext ())).Signequal (b)==true)))))
								&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
									(((AEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((AEnc)(object)gdb).getplaintext ())).Signequal (b)==true))))) {
								AEnc aenc = new AEnc (b, key);
								inf.Add (aenc);
								changed = true;
							}
        } //rule 8.10
        
        public void infCommitPKey (Commit b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
								(((AEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((AEnc)(object)gdb).getplaintext ())).Commitequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
									(((AEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((AEnc)(object)gdb).getplaintext ())).Commitequal (b)==true)))))
								&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
									(((AEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((AEnc)(object)gdb).getplaintext ())).Commitequal (b)==true))))) {
								AEnc aenc = new AEnc (b, key);
								inf.Add (aenc);
						    	changed = true;
							}
        } //rule 8.11
        
        public void infNonceSKey (Nonce b, SKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((SEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((SEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
									(((SEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((SEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true)))))
								&&!SEncList.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
									(((SEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((SEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true))))) {
								SEnc senc = new SEnc (b, key);
								inf.Add (senc);
								changed = true;
							}
        } //rule 9.1
        
        public void infConstantSKey (Constant b, SKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((SEnc)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((SEnc)(object)gdb).getplaintext ())).Constantequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
									(((SEnc)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((SEnc)(object)gdb).getplaintext ())).Constantequal (b)==true)))))
								&&!SEncList.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true &&
									(((SEnc)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((SEnc)(object)gdb).getplaintext ())).Constantequal (b)==true))))) {
								SEnc senc = new SEnc (b, key);
								inf.Add (senc);
						    	changed = true;
							}
        } //rule 9.2
        
        public void infSKeySKey (SKey b, SKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((SEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((SEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
									(((SEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((SEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true)))))
								&&!SEncList.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true &&
									(((SEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((SEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true))))) {
								SEnc senc = new SEnc (b, key);
								inf.Add (senc);
								changed = true;
							}
        } //rule 9.3
        
        public void infPKeySKey (PKey b, SKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((SEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((SEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
									(((SEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((SEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true)))))
								&&!SEncList.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true &&
									(((SEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((SEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true))))) {
								SEnc senc = new SEnc (b, key);
								inf.Add (senc);
								changed = true;
							}
        } //rule 9.4
        
        public void infAEncSKeyRule9 (AEnc b, SKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((SEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((SEnc)(object)gdb).getplaintext ())).AEncequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
									(((SEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((SEnc)(object)gdb).getplaintext ())).AEncequal (b)==true)))))
							   &&!SEncList.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true &&
								(((SEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((SEnc)(object)gdb).getplaintext ())).AEncequal (b)==true))))) {
								SEnc senc = new SEnc (b, key);
								inf.Add (senc);
								changed = true;
							}
        } //rule 9.5
        
        public void infSEncSKeyRule9 (SEnc b, SKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((SEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((SEnc)(object)gdb).getplaintext ())).SEncequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
									(((SEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((SEnc)(object)gdb).getplaintext ())).SEncequal (b)==true)))))
								&&!SEncList.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true &&
									(((SEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((SEnc)(object)gdb).getplaintext ())).SEncequal (b)==true))))) {
								SEnc senc = new SEnc (b, key);
								inf.Add (senc);
								changed = true;
							}
        } //rule 9.6
        
        public void infPEncSKeyRule9 (PEnc b, SKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((SEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((SEnc)(object)gdb).getplaintext ())).PEncequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
									(((SEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((SEnc)(object)gdb).getplaintext ())).PEncequal (b)==true)))))
								&&!SEncList.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true &&
									(((SEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((SEnc)(object)gdb).getplaintext ())).PEncequal (b)==true))))) {
								SEnc senc = new SEnc (b, key);
								inf.Add (senc);
								changed = true;
							}
        } //rule 9.7
        
        public void infPairSKey (Pair b, SKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((SEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((SEnc)(object)gdb).getplaintext ())).Pairequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
									(((SEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((SEnc)(object)gdb).getplaintext ())).Pairequal (b)==true)))))
								&&!SEncList.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true &&
									(((SEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((SEnc)(object)gdb).getplaintext ())).Pairequal (b)==true))))) {
								SEnc senc = new SEnc (b, key);
								inf.Add (senc);
								changed = true;
							}
        } //rule 9.8
        
        public void infHashSKey (Hash b, SKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((SEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((SEnc)(object)gdb).getplaintext ())).Hashequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
									(((SEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((SEnc)(object)gdb).getplaintext ())).Hashequal (b)==true)))))
								&&!SEncList.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true &&
									(((SEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((SEnc)(object)gdb).getplaintext ())).Hashequal (b)==true))))) {
								SEnc senc = new SEnc (b, key);
								inf.Add (senc);
								changed = true;
							}
        } //rule 9.9
        
        public void infSignSKey (Sign b, SKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((SEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((SEnc)(object)gdb).getplaintext ())).Signequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
									(((SEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((SEnc)(object)gdb).getplaintext ())).Signequal (b)==true)))))
								&&!SEncList.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true &&
									(((SEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((SEnc)(object)gdb).getplaintext ())).Signequal (b)==true))))) {
								SEnc senc = new SEnc (b, key);
								inf.Add (senc);
								changed = true;
							}
        } //rule 9.10
        
        public void infCommitSKey (Commit b, SKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((SEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((SEnc)(object)gdb).getplaintext ())).Commitequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true && 
									(((SEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((SEnc)(object)gdb).getplaintext ())).Commitequal (b)==true)))))
								&&!SEncList.Exists(gdb=>(gdb.IsSEnc()==true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key)==true &&
									(((SEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((SEnc)(object)gdb).getplaintext ())).Commitequal (b)==true))))) {
								SEnc senc = new SEnc (b, key);
								inf.Add (senc);
								changed = true;
							}
        } //rule 9.11
        
        public void infNonceNoncePKey (Nonce b, Nonce r, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
							(((PEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((PEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((PEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true)))))
								&&!PEncList.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((PEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true))))) {
							PEnc penc = new PEnc (b, r, key);
							inf.Add (penc);
							changed = true;
						}
        } //rule 10.1
        
        public void infConstantNoncePKey (Constant b, Nonce r, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
							(((PEnc)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((PEnc)(object)gdb).getplaintext ())).Constantequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((PEnc)(object)gdb).getplaintext ())).Constantequal (b)==true)))))
								&&!PEncList.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((PEnc)(object)gdb).getplaintext ())).Constantequal (b)==true))))) {
								PEnc penc = new PEnc (b,r, key);
							inf.Add (penc);
							changed = true;
						}
        } //rule 10.2
        
        public void infSKeyNoncePKey (SKey b, Nonce r, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
							(((PEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((PEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((PEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true)))))
								&&!PEncList.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((PEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true))))) {
								PEnc penc = new PEnc (b,r, key);
							inf.Add (penc);
							changed = true;
						}
        } //rule 10.3
        
        public void infPKeyNoncePKey (PKey b, Nonce r, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
							(((PEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((PEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((PEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true)))))
								&&!PEncList.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((PEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true))))) {
								PEnc penc = new PEnc (b,r, key);
							inf.Add (penc);
							changed = true;
						}
        } //rule 10.4
        
        public void infAEncNoncePKey (AEnc b, Nonce r, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
							(((PEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((PEnc)(object)gdb).getplaintext ())).AEncequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
									(((PEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((PEnc)(object)gdb).getplaintext ())).AEncequal (b)==true)))))
								&&!PEncList.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((PEnc)(object)gdb).getplaintext ())).AEncequal (b)==true))))) {
							PEnc penc = new PEnc (b, r,key);
							inf.Add (penc);
							changed = true;
						}
        } //rule 10.5
        
        public void infSEncNoncePKey (SEnc b, Nonce r, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
							(((PEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((PEnc)(object)gdb).getplaintext ())).SEncequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((PEnc)(object)gdb).getplaintext ())).SEncequal (b)==true)))))
								&&!PEncList.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((PEnc)(object)gdb).getplaintext ())).SEncequal (b)==true))))) {
							PEnc penc = new PEnc (b, r,key);
							inf.Add (penc);
							changed = true;
						}
        } //rule 10.6
        
        public void infPEncNoncePKey (PEnc b, Nonce r, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
							(((PEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((PEnc)(object)gdb).getplaintext ())).PEncequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true &&
									(((PEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((PEnc)(object)gdb).getplaintext ())).PEncequal (b)==true)))))
								&&!PEncList.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((PEnc)(object)gdb).getplaintext ())).PEncequal (b)==true))))) {
							PEnc penc = new PEnc (b, r,key);
							inf.Add (penc);
							changed = true;
						}
        } //rule 10.7
        
        public void infPairNoncePKey (Pair b, Nonce r, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
							(((PEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((PEnc)(object)gdb).getplaintext ())).Pairequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((PEnc)(object)gdb).getplaintext ())).Pairequal (b)==true)))))
								&&!PEncList.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((PEnc)(object)gdb).getplaintext ())).Pairequal (b)==true))))) {
							PEnc penc = new PEnc (b, r,key);
							inf.Add (penc);
							changed = true;
						}
        } //rule 10.8
        
        public void infHashNoncePKey (Hash b, Nonce r, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
							(((PEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((PEnc)(object)gdb).getplaintext ())).Hashequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((PEnc)(object)gdb).getplaintext ())).Hashequal (b)==true)))))
								&&!PEncList.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((PEnc)(object)gdb).getplaintext ())).Hashequal (b)==true))))) {
							PEnc penc = new PEnc (b, r,key);
							inf.Add (penc);
							changed = true;
						}
        } //rule 10.9
        
        public void infSignNoncePKey (Sign b, Nonce r, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
							(((PEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((PEnc)(object)gdb).getplaintext ())).Signequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((PEnc)(object)gdb).getplaintext ())).Signequal (b)==true)))))
								&&!PEncList.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((PEnc)(object)gdb).getplaintext ())).Signequal (b)==true))))) {
							PEnc penc = new PEnc (b, r,key);
							inf.Add (penc);
							changed = true;
						}
        } //rule 10.10
        
        public void infCommitNoncePKey (Commit b, Nonce r, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
							(((PEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((PEnc)(object)gdb).getplaintext ())).Commitequal (b)==true))))||
								subterms.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((PEnc)(object)gdb).getplaintext ())).Commitequal (b)==true)))))
								&&!PEncList.Exists(gdb=>(gdb.IsPEnc()==true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r)==true && 
								(((PEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((PEnc)(object)gdb).getplaintext ())).Commitequal (b)==true))))) {
							PEnc penc = new PEnc (b, r,key);
							inf.Add (penc);
							changed = true;
						}
        } //rule 10.11
        
        public void infNonceSKeyRule13 (Nonce b, SKey key){
           if ((targetsub.Exists (gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
							(((Sign)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Sign)(object)gdb).getplaintext ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((Sign)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Sign)(object)gdb).getplaintext ())).Nonceequal (b)==true)))))
							&&!SignList.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((Sign)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Sign)(object)gdb).getplaintext ())).Nonceequal (b)==true))))) {
							Sign sign = new Sign (b, key);
							inf.Add (sign);
							changed = true;
						}
        } //rule 13.1
        
        public void infConstantSKeyRule13 (Constant b, SKey key){
           if ((targetsub.Exists (gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
							(((Sign)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Sign)(object)gdb).getplaintext ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((Sign)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Sign)(object)gdb).getplaintext ())).Constantequal (b)==true)))))
							&&!SignList.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true &&
								(((Sign)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Sign)(object)gdb).getplaintext ())).Constantequal (b)==true))))) {
							Sign sign = new Sign (b, key);
							inf.Add (sign);
							changed = true;
						}
        } //rule 13.2
        
        public void infSKeySKeyRule13 (SKey b, SKey key){
           if ((targetsub.Exists (gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
							(((Sign)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Sign)(object)gdb).getplaintext ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((Sign)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Sign)(object)gdb).getplaintext ())).SKeyequal (b)==true)))))
							&&!SignList.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true &&
								(((Sign)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Sign)(object)gdb).getplaintext ())).SKeyequal (b)==true))))) {
							Sign sign = new Sign (b, key);
							inf.Add (sign);
							changed = true;
						}
        } //rule 13.3
        
        public void infPKeySKeyRule13 (PKey b, SKey key){
           if ((targetsub.Exists (gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
							(((Sign)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Sign)(object)gdb).getplaintext ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((Sign)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Sign)(object)gdb).getplaintext ())).PKeyequal (b)==true)))))
							&&!SignList.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true &&
								(((Sign)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Sign)(object)gdb).getplaintext ())).PKeyequal (b)==true))))) {
							Sign sign = new Sign (b, key);
							inf.Add (sign);
							changed = true;
						}
        } //rule 13.4
        
        public void infAEncSKeyRule13 (AEnc b, SKey key){
           if ((targetsub.Exists (gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
							(((Sign)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Sign)(object)gdb).getplaintext ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((Sign)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Sign)(object)gdb).getplaintext ())).AEncequal (b)==true)))))
							&&!SignList.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true &&
								(((Sign)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Sign)(object)gdb).getplaintext ())).AEncequal (b)==true))))) {
							Sign sign = new Sign (b, key);
							inf.Add (sign);
							changed = true;
						}
        } //rule 13.5
        
        public void infSEncSKeyRule13 (SEnc b, SKey key){
           if ((targetsub.Exists (gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
							(((Sign)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Sign)(object)gdb).getplaintext ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((Sign)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Sign)(object)gdb).getplaintext ())).SEncequal (b)==true)))))
							&&!SignList.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true &&
								(((Sign)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Sign)(object)gdb).getplaintext ())).SEncequal (b)==true))))) {
							Sign sign = new Sign (b, key);
							inf.Add (sign);
							changed = true;
						}
        } //rule 13.6
        
        public void infPEncSKeyRule13 (PEnc b, SKey key){
           if ((targetsub.Exists (gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
							(((Sign)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Sign)(object)gdb).getplaintext ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((Sign)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Sign)(object)gdb).getplaintext ())).PEncequal (b)==true)))))
							&&!SignList.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true &&
								(((Sign)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Sign)(object)gdb).getplaintext ())).PEncequal (b)==true))))) {
							Sign sign = new Sign (b, key);
							inf.Add (sign);
							changed = true;
						}
        } //rule 13.7
        
        public void infPairSKeyRule13 (Pair b, SKey key){
           if ((targetsub.Exists (gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
							(((Sign)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Sign)(object)gdb).getplaintext ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((Sign)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Sign)(object)gdb).getplaintext ())).Pairequal (b)==true)))))
							&&!SignList.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true &&
								(((Sign)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Sign)(object)gdb).getplaintext ())).Pairequal (b)==true))))) {
							Sign sign = new Sign (b, key);
							inf.Add (sign);
							changed = true;
						}
        } //rule 13.8
        
        public void infHashSKeyRule13 (Hash b, SKey key){
           if ((targetsub.Exists (gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
							(((Sign)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Sign)(object)gdb).getplaintext ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((Sign)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Sign)(object)gdb).getplaintext ())).Hashequal (b)==true)))))
							&&!SignList.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true &&
								(((Sign)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Sign)(object)gdb).getplaintext ())).Hashequal (b)==true))))) {
							Sign sign = new Sign (b, key);
							inf.Add (sign);
							changed = true;
						}
        } //rule 13.9
        
        public void infSignSKeyRule13 (Sign b, SKey key){
           if ((targetsub.Exists (gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
							(((Sign)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Sign)(object)gdb).getplaintext ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((Sign)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Sign)(object)gdb).getplaintext ())).Signequal (b)==true)))))
							&&!SignList.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true &&
								(((Sign)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Sign)(object)gdb).getplaintext ())).Signequal (b)==true))))) {
							Sign sign = new Sign (b, key);
							inf.Add (sign);
							changed = true;
						}
        } //rule 13.10
        
        public void infCommitSKeyRule13 (Commit b, SKey key){
           if ((targetsub.Exists (gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
							(((Sign)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Sign)(object)gdb).getplaintext ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true && 
								(((Sign)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Sign)(object)gdb).getplaintext ())).Commitequal (b)==true)))))
							&&!SignList.Exists(gdb=>(gdb.IsSign()==true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key)==true &&
								(((Sign)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Sign)(object)gdb).getplaintext ())).Commitequal (b)==true))))) {
							Sign sign = new Sign (b, key);
							inf.Add (sign);
							changed = true;
						}
        } //rule 13.11
        
        public void infNonceNonceRule14 (Nonce b, Nonce key){
            if ((targetsub.Exists (gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
							(((Commit)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Commit)(object)gdb).getplaintext ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
								(((Commit)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Commit)(object)gdb).getplaintext ())).Nonceequal (b)==true)))))
							&&!CommitList.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
								(((Commit)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Commit)(object)gdb).getplaintext ())).Nonceequal (b)==true))))) {
							Commit commit = new Commit (b, key);
							inf.Add (commit);
							changed = true;
						}
        } //rule 14.1
        
        public void infConstantNonceRule14 (Constant b, Nonce key){
            if ((targetsub.Exists (gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
							(((Commit)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Commit)(object)gdb).getplaintext ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
								(((Commit)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Commit)(object)gdb).getplaintext ())).Constantequal (b)==true)))))
							&&!CommitList.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true &&
								(((Commit)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Commit)(object)gdb).getplaintext ())).Constantequal (b)==true))))) {
							Commit commit = new Commit (b, key);
							inf.Add (commit);
							changed = true;
						}
        } //rule 14.2
        
        public void infSKeyNonceRule14 (SKey b, Nonce key){
            if ((targetsub.Exists (gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
							(((Commit)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Commit)(object)gdb).getplaintext ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
								(((Commit)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Commit)(object)gdb).getplaintext ())).SKeyequal (b)==true)))))
							&&!CommitList.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true &&
								(((Commit)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Commit)(object)gdb).getplaintext ())).SKeyequal (b)==true))))) {
							Commit commit = new Commit (b, key);
							inf.Add (commit);
							changed = true;
						}
        } //rule 14.3
        
        public void infPKeyNonceRule14 (PKey b, Nonce key){
            if ((targetsub.Exists (gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
							(((Commit)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Commit)(object)gdb).getplaintext ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
								(((Commit)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Commit)(object)gdb).getplaintext ())).PKeyequal (b)==true)))))
							&&!CommitList.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true &&
								(((Commit)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Commit)(object)gdb).getplaintext ())).PKeyequal (b)==true))))) {
							Commit commit = new Commit (b, key);
							inf.Add (commit);
							changed = true;
						}
        } //rule 14.4
        
        public void infAEncNonceRule14 (AEnc b, Nonce key){
            if ((targetsub.Exists (gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
							(((Commit)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Commit)(object)gdb).getplaintext ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
								(((Commit)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Commit)(object)gdb).getplaintext ())).AEncequal (b)==true)))))
							&&!CommitList.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true &&
								(((Commit)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Commit)(object)gdb).getplaintext ())).AEncequal (b)==true))))) {
							Commit commit = new Commit (b, key);
							inf.Add (commit);
							changed = true;
						}
        } //rule 14.5
        
        public void infSEncNonceRule14 (SEnc b, Nonce key){
            if ((targetsub.Exists (gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
							(((Commit)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Commit)(object)gdb).getplaintext ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
								(((Commit)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Commit)(object)gdb).getplaintext ())).SEncequal (b)==true)))))
							&&!CommitList.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true &&
								(((Commit)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Commit)(object)gdb).getplaintext ())).SEncequal (b)==true))))) {
							Commit commit = new Commit (b, key);
							inf.Add (commit);
							changed = true;
						}
        } //rule 14.6
        
        public void infPEncNonceRule14 (PEnc b, Nonce key){
            if ((targetsub.Exists (gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
							(((Commit)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Commit)(object)gdb).getplaintext ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
								(((Commit)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Commit)(object)gdb).getplaintext ())).PEncequal (b)==true)))))
							&&!CommitList.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true &&
								(((Commit)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Commit)(object)gdb).getplaintext ())).PEncequal (b)==true))))) {
							Commit commit = new Commit (b, key);
							inf.Add (commit);
							changed = true;
						}
        } //rule 14.7
        
        public void infPairNonceRule14 (Pair b, Nonce key){
            if ((targetsub.Exists (gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
							(((Commit)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Commit)(object)gdb).getplaintext ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
								(((Commit)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Commit)(object)gdb).getplaintext ())).Pairequal (b)==true)))))
							&&!CommitList.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true &&
								(((Commit)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Commit)(object)gdb).getplaintext ())).Pairequal (b)==true))))) {
							Commit commit = new Commit (b, key);
							inf.Add (commit);
							changed = true;
						}
        } //rule 14.8
        
        public void infHashNonceRule14 (Hash b, Nonce key){
            if ((targetsub.Exists (gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
							(((Commit)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Commit)(object)gdb).getplaintext ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
								(((Commit)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Commit)(object)gdb).getplaintext ())).Hashequal (b)==true)))))
							&&!CommitList.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true &&
								(((Commit)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Commit)(object)gdb).getplaintext ())).Hashequal (b)==true))))) {
							Commit commit = new Commit (b, key);
							inf.Add (commit);
							changed = true;
						}
        } //rule 14.9
        
        public void infSignNonceRule14 (Sign b, Nonce key){
            if ((targetsub.Exists (gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
							(((Commit)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Commit)(object)gdb).getplaintext ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
								(((Commit)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Commit)(object)gdb).getplaintext ())).Signequal (b)==true)))))
							&&!CommitList.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true &&
								(((Commit)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Commit)(object)gdb).getplaintext ())).Signequal (b)==true))))) {
							Commit commit = new Commit (b, key);
							inf.Add (commit);
							changed = true;
						}
        } //rule 14.10
        
        public void infCommitNonceRule14 (Commit b, Nonce key){
            if ((targetsub.Exists (gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
							(((Commit)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Commit)(object)gdb).getplaintext ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true && 
								(((Commit)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Commit)(object)gdb).getplaintext ())).Commitequal (b)==true)))))
							&&!CommitList.Exists(gdb=>(gdb.IsCommit()==true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key)==true &&
								(((Commit)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Commit)(object)gdb).getplaintext ())).Commitequal (b)==true))))) {
							Commit commit = new Commit (b, key);
							inf.Add (commit);
							changed = true;
						}
        } //rule 14.11
        
        
	    public void dinfAEncSKey (AEnc ciphertext, SKey key){
		    if (ciphertext.isDecryptable(key)&&(targetsub.Contains (ciphertext.getplaintext ())||subterms.Contains(ciphertext.getplaintext ()))&&!list.Contains(ciphertext.getplaintext ())){
			    if (!inf.Exists (e => e.equal (ciphertext.getplaintext ()))) {
				    inf.Add (ciphertext.getplaintext ());
				    dinf.Add (ciphertext.getplaintext ());
				    changed = true;
			    }
		    }
	    } //rule 1

	    public void dinfPEncSKey (PEnc ciphertext, SKey key){
	    	if (ciphertext.isDecryptable(key)&&(targetsub.Contains (ciphertext.getplaintext ())||subterms.Contains(ciphertext.getplaintext ()))&&!list.Contains(ciphertext.getplaintext ())){
			    if (!inf.Exists (e => e.equal (ciphertext.getplaintext ()))) {
			    	inf.Add (ciphertext.getplaintext ());
				    dinf.Add (ciphertext.getplaintext ());
				    changed = true;
			    }
		    }
	    } //rule 2

	    public void dinfSEncSKey (SEnc ciphertext, SKey key){
		    if (ciphertext.isDecryptable(key)&&(targetsub.Contains (ciphertext.getplaintext ())||subterms.Contains(ciphertext.getplaintext ()))&&!list.Contains(ciphertext.getplaintext ())){
			    if (!inf.Exists (e => e.equal (ciphertext.getplaintext ()))) {
				    inf.Add (ciphertext.getplaintext ());
				    dinf.Add (ciphertext.getplaintext ());
				    changed = true;
			    }
		    }
	    } //rule 3
	
        public void dinfPair (Pair p){
            if (!list.Contains (p.getfirst ()) && (targetsub.Contains (p.getfirst ()) || subterms.Contains (p.getfirst ()))) {
                inf.Add (p.getfirst ());
                dinf.Add (p.getfirst ());
                changed = true;
            }
            if (!list.Contains (p.getsecond ()) && (targetsub.Contains (p.getsecond ()) || subterms.Contains (p.getsecond ()))) {
                inf.Add (p.getsecond ());
                dinf.Add (p.getsecond ());
                changed = true;
            }
        } //rule 4
        
        public void dinfSignPKey (Sign ciphertext, PKey key){
            if (ciphertext.isDecryptable (key) && (targetsub.Contains (ciphertext.getplaintext ()) || subterms.Contains (ciphertext.getplaintext ())) && !list.Contains (ciphertext.getplaintext ())) {
				if (!inf.Exists (e => e.equal (ciphertext.getplaintext ()))) {
					inf.Add (ciphertext.getplaintext ());
					dinf.Add (ciphertext.getplaintext ());
					changed = true;
				}
			}
        } //rule 5
        
        public void dinfCommitNonce (Commit ciphertext, Nonce key){
            if (ciphertext.isDecryptable (key) && (targetsub.Contains (ciphertext.getplaintext ()) || subterms.Contains (ciphertext.getplaintext ())) && !list.Contains (ciphertext.getplaintext ())) {
				if (!inf.Exists (e => e.equal (ciphertext.getplaintext ()))) {
					inf.Add (ciphertext.getplaintext ());
					dinf.Add (ciphertext.getplaintext ());
					changed = true;
				}
			}
        } //rule 6
        
        public void dinfSKey (SKey key){
            if ((targetsub.Exists (gd => (gd.IsPKey () && ((PKey)(object)gd).getsk ().equal (key))) || subterms.Exists (gd => (gd.IsPKey () && ((PKey)(object)gd).getsk ().equal (key)))) &&!PKeyList.Exists (gd => (gd.getsk ().equal (key)))) {
				if (!PKeyinf.Exists (gd => (gd.getsk ().equal (key)))) {
					PKey pk = new PKey (key);
					inf.Add (pk);
					dinf.Add (pk);
					changed = true;
				}
    		}
        } //rule 7
        
        public void dinfUnitypePKey (Unitype b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
										(((AEnc)(object)gdb).getplaintext ().equal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().equal (b)==true)))))
										&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().equal (b)==true))))) {
										if(!AEncinf.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().equal (b)==true))))) {
											AEnc aenc = new AEnc (b, key);
											inf.Add (aenc);
											dinf.Add (aenc);
											changed = true;}
									}
        } //rule 8.1
        
        public void dinfNoncePKey (Nonce b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
										(((AEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((AEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((AEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true)))))
										&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((AEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true))))) {
										if(!AEncinf.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((AEnc)(object)gdb).getplaintext ())).Nonceequal (b)==true))))){
											AEnc aenc = new AEnc (b, key);
											inf.Add (aenc);
											dinf.Add (aenc);
											changed = true;}
									}
        } //rule 8.2
        
        public void dinfConstantPKey (Constant b, PKey key){
            if ((targetsub.Exists (gdb => (gdb.IsAEnc () == true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key) == true &&
							    (((AEnc)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((AEnc)(object)gdb).getplaintext ())).Constantequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsAEnc () == true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key) == true &&
							    (((AEnc)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((AEnc)(object)gdb).getplaintext ())).Constantequal (b) == true)))))
							    && !AEncList.Exists (gdb => (gdb.IsAEnc () == true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key) == true &&
							    (((AEnc)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((AEnc)(object)gdb).getplaintext ())).Constantequal (b) == true))))) {
								if (!AEncinf.Exists (gdb => (gdb.IsAEnc () == true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key) == true &&
								   (((AEnc)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((AEnc)(object)gdb).getplaintext ())).Constantequal (b) == true))))) {
									AEnc aenc = new AEnc (b, key);
									inf.Add (aenc);
									dinf.Add (aenc);
									changed = true;
								}
							}
        } //rule 8.3
        
        public void dinfSKeyPKey (SKey b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
										(((AEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((AEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((AEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true)))))
										&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((AEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true))))) {
										if(!AEncinf.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((AEnc)(object)gdb).getplaintext ())).SKeyequal (b)==true))))) {
											AEnc aenc = new AEnc (b, key);
											inf.Add (aenc);
											dinf.Add (aenc);
											changed = true;}
									}
        } //rule 8.4
        
        public void dinfPKeyPKey (PKey b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
										(((AEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((AEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((AEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true)))))
										&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((AEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true))))) {
										if(!AEncinf.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((AEnc)(object)gdb).getplaintext ())).PKeyequal (b)==true))))) {
											AEnc aenc = new AEnc (b, key);
											inf.Add (aenc);
											dinf.Add (aenc);
											changed = true;}
									}
        } //rule 8.5
        
        public void dinfAEncPKey (AEnc b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
										(((AEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((AEnc)(object)gdb).getplaintext ())).AEncequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((AEnc)(object)gdb).getplaintext ())).AEncequal (b)==true)))))
										&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((AEnc)(object)gdb).getplaintext ())).AEncequal (b)==true))))) {
										if(!AEncinf.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((AEnc)(object)gdb).getplaintext ())).AEncequal (b)==true))))) {
											AEnc aenc = new AEnc (b, key);
											inf.Add (aenc);
											dinf.Add (aenc);
											changed = true;}
									}
        } //rule 8.6
        
        public void dinfSEncPKey (SEnc b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
										(((AEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((AEnc)(object)gdb).getplaintext ())).SEncequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((AEnc)(object)gdb).getplaintext ())).SEncequal (b)==true)))))
										&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((AEnc)(object)gdb).getplaintext ())).SEncequal (b)==true))))) {
										if(!AEncinf.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((AEnc)(object)gdb).getplaintext ())).SEncequal (b)==true))))) {
											AEnc aenc = new AEnc (b, key);
											inf.Add (aenc);
											dinf.Add (aenc);
											changed = true;}
									}
        } //rule 8.7
        
        public void dinfPEncPKey (PEnc b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
										(((AEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((AEnc)(object)gdb).getplaintext ())).PEncequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((AEnc)(object)gdb).getplaintext ())).PEncequal (b)==true)))))
										&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((AEnc)(object)gdb).getplaintext ())).PEncequal (b)==true))))) {
										if(!AEncinf.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((AEnc)(object)gdb).getplaintext ())).PEncequal (b)==true))))) {
											AEnc aenc = new AEnc (b, key);
											inf.Add (aenc);
											dinf.Add (aenc);
											changed = true;
										}
									}
        } //rule 8.8
        
        public void dinfPairPKey (Pair b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
										(((AEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((AEnc)(object)gdb).getplaintext ())).Pairequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((AEnc)(object)gdb).getplaintext ())).Pairequal (b)==true)))))
										&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((AEnc)(object)gdb).getplaintext ())).Pairequal (b)==true))))) {
										if(!AEncinf.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((AEnc)(object)gdb).getplaintext ())).Pairequal (b)==true))))) {
											AEnc aenc = new AEnc (b, key);
											inf.Add (aenc);
											dinf.Add (aenc);
											changed = true;}
									}
        } //rule 8.9
        
        public void dinfHashPKey (Hash b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
										(((AEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((AEnc)(object)gdb).getplaintext ())).Hashequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((AEnc)(object)gdb).getplaintext ())).Hashequal (b)==true)))))
										&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((AEnc)(object)gdb).getplaintext ())).Hashequal (b)==true))))) {
										if(!AEncinf.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((AEnc)(object)gdb).getplaintext ())).Hashequal (b)==true))))) {
											AEnc aenc = new AEnc (b, key);
											inf.Add (aenc);
											dinf.Add (aenc);
											changed = true;}
									}
        } //rule 8.10
        
        public void dinfSignPKeyRule8 (Sign b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
										(((AEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((AEnc)(object)gdb).getplaintext ())).Signequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((AEnc)(object)gdb).getplaintext ())).Signequal (b)==true)))))
										&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((AEnc)(object)gdb).getplaintext ())).Signequal (b)==true))))) {
										if(!AEncinf.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((AEnc)(object)gdb).getplaintext ())).Signequal (b)==true))))) {
											AEnc aenc = new AEnc (b, key);
											inf.Add (aenc);
											dinf.Add (aenc);
											changed = true;}
									}
        } //rule 8.11
        
        public void dinfCommitPKey (Commit b, PKey key){
            if ((targetsub.Exists (gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
										(((AEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((AEnc)(object)gdb).getplaintext ())).Commitequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true && 
											(((AEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((AEnc)(object)gdb).getplaintext ())).Commitequal (b)==true)))))
										&&!AEncList.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((AEnc)(object)gdb).getplaintext ())).Commitequal (b)==true))))) {
										if(!AEncinf.Exists(gdb=>(gdb.IsAEnc()==true && (((PKey)(object)(((AEnc)(object)gdb).getpk ())).PKeyequal (key)==true &&
											(((AEnc)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((AEnc)(object)gdb).getplaintext ())).Commitequal (b)==true))))) {
											AEnc aenc = new AEnc (b, key);
											inf.Add (aenc);
											dinf.Add (aenc);
											changed = true;}
									}
        } //rule 8.12
        
        public void dinfUnitypeSKey (Unitype b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ()).equal (b) == true))) ||
							    subterms.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ()).equal (b) == true))))
							    && !SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ()).equal (b) == true)))) {
								if (!SEncinf.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((SEnc)(object)gdb).getplaintext ()).equal (b) == true)))) {
									SEnc senc = new SEnc (b, key);
									inf.Add (senc);
									dinf.Add (senc);
									changed = true;
								}
							}
        } //rule 9.1
        
        public void dinfNonceSKey (Nonce b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((SEnc)(object)gdb).getplaintext ())).Nonceequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((SEnc)(object)gdb).getplaintext ())).Nonceequal (b) == true)))))
							    && !SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((SEnc)(object)gdb).getplaintext ())).Nonceequal (b) == true))))) {
								if (!SEncinf.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((SEnc)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((SEnc)(object)gdb).getplaintext ())).Nonceequal (b) == true))))) {
									SEnc senc = new SEnc (b, key);
									inf.Add (senc);
									dinf.Add (senc);
									changed = true;
								}
							}
        } //rule 9.2
        
        public void dinfConstantSKey (Constant b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((SEnc)(object)gdb).getplaintext ())).Constantequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((SEnc)(object)gdb).getplaintext ())).Constantequal (b) == true)))))
							    && !SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((SEnc)(object)gdb).getplaintext ())).Constantequal (b) == true))))) {
								if (!SEncinf.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((SEnc)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((SEnc)(object)gdb).getplaintext ())).Constantequal (b) == true))))) {
									SEnc senc = new SEnc (b, key);
									inf.Add (senc);
									dinf.Add (senc);
									changed = true;
								}
							}
        } //rule 9.3
        
        public void dinfSKeySKey (SKey b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((SEnc)(object)gdb).getplaintext ())).SKeyequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((SEnc)(object)gdb).getplaintext ())).SKeyequal (b) == true)))))
							    && !SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((SEnc)(object)gdb).getplaintext ())).SKeyequal (b) == true))))) {
								if (!SEncinf.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((SEnc)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((SEnc)(object)gdb).getplaintext ())).SKeyequal (b) == true))))) {
									SEnc senc = new SEnc (b, key);
									inf.Add (senc);
									dinf.Add (senc);
									changed = true;
								}
							}
        } //rule 9.4
        
        public void dinfPKeySKey (PKey b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((SEnc)(object)gdb).getplaintext ())).PKeyequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((SEnc)(object)gdb).getplaintext ())).PKeyequal (b) == true)))))
							    && !SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((SEnc)(object)gdb).getplaintext ())).PKeyequal (b) == true))))) {
								if (!SEncinf.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((SEnc)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((SEnc)(object)gdb).getplaintext ())).PKeyequal (b) == true))))) {
									SEnc senc = new SEnc (b, key);
									inf.Add (senc);
									dinf.Add (senc);
									changed = true;
								}
							}
        } //rule 9.5
        
        public void dinfAEncSKeyRule9 (AEnc b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((SEnc)(object)gdb).getplaintext ())).AEncequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((SEnc)(object)gdb).getplaintext ())).AEncequal (b) == true)))))
							    && !SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((SEnc)(object)gdb).getplaintext ())).AEncequal (b) == true))))) {
								if (!SEncinf.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((SEnc)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((SEnc)(object)gdb).getplaintext ())).AEncequal (b) == true))))) {
									SEnc senc = new SEnc (b, key);
									inf.Add (senc);
									dinf.Add (senc);
									changed = true;
								}
							}
        } //rule 9.6
        
        public void dinfSEncSKeyRule9 (SEnc b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((SEnc)(object)gdb).getplaintext ())).SEncequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((SEnc)(object)gdb).getplaintext ())).SEncequal (b) == true)))))
							    && !SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((SEnc)(object)gdb).getplaintext ())).SEncequal (b) == true))))) {
								if (!SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((SEnc)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((SEnc)(object)gdb).getplaintext ())).SEncequal (b) == true))))) {
									SEnc senc = new SEnc (b, key);
									inf.Add (senc);
									dinf.Add (senc);
									changed = true;
								}
							}
        } //rule 9.7
        
        public void dinfPEncSKeyRule9 (PEnc b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((SEnc)(object)gdb).getplaintext ())).PEncequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((SEnc)(object)gdb).getplaintext ())).PEncequal (b) == true)))))
							    && !SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((SEnc)(object)gdb).getplaintext ())).PEncequal (b) == true))))) {
								if (!SEncinf.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((SEnc)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((SEnc)(object)gdb).getplaintext ())).PEncequal (b) == true))))) {
									SEnc senc = new SEnc (b, key);
									inf.Add (senc);
									dinf.Add (senc);
									changed = true;
								}
							}
        } //rule 9.8
        
        public void dinfPairSKey (Pair b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((SEnc)(object)gdb).getplaintext ())).Pairequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((SEnc)(object)gdb).getplaintext ())).Pairequal (b) == true)))))
							    && !SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((SEnc)(object)gdb).getplaintext ())).Pairequal (b) == true))))) {
								if (!SEncinf.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((SEnc)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((SEnc)(object)gdb).getplaintext ())).Pairequal (b) == true))))) {
									SEnc senc = new SEnc (b, key);
									inf.Add (senc);
									dinf.Add (senc);
									changed = true;
								}
							}
        } //rule 9.9
        
        public void dinfHashSKey (Hash b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((SEnc)(object)gdb).getplaintext ())).Hashequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((SEnc)(object)gdb).getplaintext ())).Hashequal (b) == true)))))
							    && !SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((SEnc)(object)gdb).getplaintext ())).Hashequal (b) == true))))) {
								if (!SEncinf.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((SEnc)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((SEnc)(object)gdb).getplaintext ())).Hashequal (b) == true))))) {
									SEnc senc = new SEnc (b, key);
									inf.Add (senc);
									dinf.Add (senc);
									changed = true;
								}
							}
        } //rule 9.10
        
        public void dinfSignSKey (Sign b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((SEnc)(object)gdb).getplaintext ())).Signequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((SEnc)(object)gdb).getplaintext ())).Signequal (b) == true)))))
							    && !SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((SEnc)(object)gdb).getplaintext ())).Signequal (b) == true))))) {
								if (!SEncinf.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((SEnc)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((SEnc)(object)gdb).getplaintext ())).Signequal (b) == true))))) {
									SEnc senc = new SEnc (b, key);
									inf.Add (senc);
									dinf.Add (senc);
									changed = true;
								}
							}
        } //rule 9.11
        
        public void dinfCommitSKey (Commit b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((SEnc)(object)gdb).getplaintext ())).Commitequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((SEnc)(object)gdb).getplaintext ())).Commitequal (b) == true)))))
							    && !SEncList.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((SEnc)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((SEnc)(object)gdb).getplaintext ())).Commitequal (b) == true))))) {
								if (!SEncinf.Exists (gdb => (gdb.IsSEnc () == true && (((SKey)(object)(((SEnc)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((SEnc)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((SEnc)(object)gdb).getplaintext ())).Commitequal (b) == true))))) {
									SEnc senc = new SEnc (b, key);
									inf.Add (senc);
									dinf.Add (senc);
									changed = true;
								}
							}
        } //rule 9.12
        
        public void dinfNonceNoncePKey (Nonce b, Nonce r, PKey key){
            if ((targetsub.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((PEnc)(object)gdb).getplaintext ())).Nonceequal (b) == true)))) ||
								    subterms.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((PEnc)(object)gdb).getplaintext ())).Nonceequal (b) == true)))))
								    && !PEncList.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((PEnc)(object)gdb).getplaintext ())).Nonceequal (b) == true))))) {
									if (!PEncinf.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
									   (((PEnc)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((PEnc)(object)gdb).getplaintext ())).Nonceequal (b) == true))))) {
										PEnc penc = new PEnc (b, r, key);
										inf.Add (penc);
										dinf.Add (penc);
										changed = true;
									}
								}
        } //rule 10.1
        
        public void dinfConstantNoncePKey (Constant b, Nonce r, PKey key){
        	if ((targetsub.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((PEnc)(object)gdb).getplaintext ())).Constantequal (b) == true)))) ||
								    subterms.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((PEnc)(object)gdb).getplaintext ())).Constantequal (b) == true)))))
								    && !PEncList.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((PEnc)(object)gdb).getplaintext ())).Constantequal (b) == true))))) {
									if (!PEncinf.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
									   (((PEnc)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((PEnc)(object)gdb).getplaintext ())).Constantequal (b) == true))))) {
										PEnc penc = new PEnc (b, r, key);
										inf.Add (penc);
										dinf.Add (penc);
										changed = true;
									}
								}
        } //rule 10.2
        
        public void dinfSKeyNoncePKey (SKey b, Nonce r, PKey key){
        	if ((targetsub.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((PEnc)(object)gdb).getplaintext ())).SKeyequal (b) == true)))) ||
								    subterms.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((PEnc)(object)gdb).getplaintext ())).SKeyequal (b) == true)))))
								    && !PEncList.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((PEnc)(object)gdb).getplaintext ())).SKeyequal (b) == true))))) {
									if (!PEncinf.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
									   (((PEnc)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((PEnc)(object)gdb).getplaintext ())).SKeyequal (b) == true))))) {
										PEnc penc = new PEnc (b, r, key);
										inf.Add (penc);
										dinf.Add (penc);
										changed = true;
									}
								}
        } //rule 10.3
        
        public void dinfPKeyNoncePKey (PKey b, Nonce r, PKey key){
        	if ((targetsub.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((PEnc)(object)gdb).getplaintext ())).PKeyequal (b) == true)))) ||
								    subterms.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((PEnc)(object)gdb).getplaintext ())).PKeyequal (b) == true)))))
								    && !PEncList.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((PEnc)(object)gdb).getplaintext ())).PKeyequal (b) == true))))) {
									if (!PEncinf.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
									   (((PEnc)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((PEnc)(object)gdb).getplaintext ())).PKeyequal (b) == true))))) {
										PEnc penc = new PEnc (b, r, key);
										inf.Add (penc);
										dinf.Add (penc);
										changed = true;
									}
								}
        } //rule 10.4
        
        public void dinfAEncNoncePKey (AEnc b, Nonce r, PKey key){
        	if ((targetsub.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((PEnc)(object)gdb).getplaintext ())).AEncequal (b) == true)))) ||
								    subterms.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((PEnc)(object)gdb).getplaintext ())).AEncequal (b) == true)))))
								    && !PEncList.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((PEnc)(object)gdb).getplaintext ())).AEncequal (b) == true))))) {
									if (!PEncinf.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
									   (((PEnc)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((PEnc)(object)gdb).getplaintext ())).AEncequal (b) == true))))) {
										PEnc penc = new PEnc (b, r, key);
										inf.Add (penc);
										dinf.Add (penc);
										changed = true;
									}
								}
        } //rule 10.5
        
        public void dinfSEncNoncePKey (SEnc b, Nonce r, PKey key){
        	if ((targetsub.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((PEnc)(object)gdb).getplaintext ())).SEncequal (b) == true)))) ||
								    subterms.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((PEnc)(object)gdb).getplaintext ())).SEncequal (b) == true)))))
								    && !PEncList.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((PEnc)(object)gdb).getplaintext ())).SEncequal (b) == true))))) {
									if (!PEncinf.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
									   (((PEnc)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((PEnc)(object)gdb).getplaintext ())).SEncequal (b) == true))))) {
										PEnc penc = new PEnc (b, r, key);
										inf.Add (penc);
										dinf.Add (penc);
										changed = true;
									}
								}
        } //rule 10.6
        
        public void dinfPEncNoncePKey (PEnc b, Nonce r, PKey key){
        	if ((targetsub.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((PEnc)(object)gdb).getplaintext ())).PEncequal (b) == true)))) ||
								    subterms.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((PEnc)(object)gdb).getplaintext ())).PEncequal (b) == true)))))
								    && !PEncList.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((PEnc)(object)gdb).getplaintext ())).PEncequal (b) == true))))) {
									if (!PEncinf.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
									   (((PEnc)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((PEnc)(object)gdb).getplaintext ())).PEncequal (b) == true))))) {
										PEnc penc = new PEnc (b, r, key);
										inf.Add (penc);
										dinf.Add (penc);
										changed = true;
									}
								}
        } //rule 10.7
        
        public void dinfPairNoncePKey (Pair b, Nonce r, PKey key){
        	if ((targetsub.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((PEnc)(object)gdb).getplaintext ())).Pairequal (b) == true)))) ||
								    subterms.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((PEnc)(object)gdb).getplaintext ())).Pairequal (b) == true)))))
								    && !PEncList.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((PEnc)(object)gdb).getplaintext ())).Pairequal (b) == true))))) {
									if (!PEncinf.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
									   (((PEnc)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((PEnc)(object)gdb).getplaintext ())).Pairequal (b) == true))))) {
										PEnc penc = new PEnc (b, r, key);
										inf.Add (penc);
										dinf.Add (penc);
										changed = true;
									}
								}
        } //rule 10.8
        
        public void dinfHashNoncePKey (Hash b, Nonce r, PKey key){
        	if ((targetsub.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((PEnc)(object)gdb).getplaintext ())).Hashequal (b) == true)))) ||
								    subterms.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((PEnc)(object)gdb).getplaintext ())).Hashequal (b) == true)))))
								    && !PEncList.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((PEnc)(object)gdb).getplaintext ())).Hashequal (b) == true))))) {
									if (!PEncinf.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
									   (((PEnc)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((PEnc)(object)gdb).getplaintext ())).Hashequal (b) == true))))) {
										PEnc penc = new PEnc (b, r, key);
										inf.Add (penc);
										dinf.Add (penc);
										changed = true;
									}
								}
        } //rule 10.9
        
        public void dinfSignNoncePKey (Sign b, Nonce r, PKey key){
        	if ((targetsub.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((PEnc)(object)gdb).getplaintext ())).Signequal (b) == true)))) ||
								    subterms.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((PEnc)(object)gdb).getplaintext ())).Signequal (b) == true)))))
								    && !PEncList.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((PEnc)(object)gdb).getplaintext ())).Signequal (b) == true))))) {
									if (!PEncinf.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
									   (((PEnc)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((PEnc)(object)gdb).getplaintext ())).Signequal (b) == true))))) {
										PEnc penc = new PEnc (b, r, key);
										inf.Add (penc);
										dinf.Add (penc);
										changed = true;
									}
								}
        } //rule 10.10
        
        public void dinfCommitNoncePKey (Commit b, Nonce r, PKey key){
        	if ((targetsub.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((PEnc)(object)gdb).getplaintext ())).Commitequal (b) == true)))) ||
								    subterms.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((PEnc)(object)gdb).getplaintext ())).Commitequal (b) == true)))))
								    && !PEncList.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((PEnc)(object)gdb).getplaintext ())).Commitequal (b) == true))))) {
									if (!PEncinf.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
									   (((PEnc)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((PEnc)(object)gdb).getplaintext ())).Commitequal (b) == true))))) {
										PEnc penc = new PEnc (b, r, key);
										inf.Add (penc);
										dinf.Add (penc);
										changed = true;
									}
								}
        } //rule 10.11
        
        public void dinfUnitypeNoncePKey (Unitype b, Nonce r, PKey key){
        	if ((targetsub.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    ((((PEnc)(object)gdb).getplaintext ()).equal (b) == true)))) ||
								    subterms.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    ((((PEnc)(object)gdb).getplaintext ())).equal (b) == true))))
								    && !PEncList.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
								    (((PEnc)(object)gdb).getplaintext ()).equal (b) == true)))) {
									if (!PEncinf.Exists (gdb => (gdb.IsPEnc () == true && (((PKey)(object)(((PEnc)(object)gdb).getpk ())).PKeyequal (key) == true && ((Nonce)(object)(((PEnc)(object)gdb).getrandom ())).Nonceequal (r) == true &&
									   ((((PEnc)(object)gdb).getplaintext ())).equal (b) == true)))) {
										PEnc penc = new PEnc (b, r, key);
										inf.Add (penc);
										dinf.Add (penc);
										changed = true;
									}
								}
        } //rule 10.12
        
        public void dinfNonceUnitype (Nonce b, Unitype key){
            if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true&& 
										(((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (b)==true)))))
										&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (b)==true))))) {
										if(!Pairinf.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (b)==true))))) {
											Pair pair = new Pair (b, key);
											inf.Add (pair);
											dinf.Add (pair);
											changed = true;}
									}
        } //rule 11.1

        public void dinfConstantUnitype (Constant b, Unitype key){
            if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
										(((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (b)==true)))))
										&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (b)==true))))) {
										if(!Pairinf.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (b)==true))))) {
											Pair pair = new Pair (b, key);
											inf.Add (pair);
											dinf.Add (pair);
											changed = true;}
									}
        } //rule 11.2

        public void dinfSKeyUnitype (SKey b, Unitype key){
            if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
										(((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (b)==true)))))
										&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (b)==true))))) {
										if(!Pairinf.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (b)==true))))) {
											Pair pair = new Pair (b, key);
											inf.Add (pair);
											dinf.Add (pair);
											changed = true;}
									}
        } //rule 11.3

        public void dinfPKeyUnitype (PKey b, Unitype key){
            if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
										(((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (b)==true)))))
										&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (b)==true))))) {
										if(!Pairinf.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (b)==true))))) {
											Pair pair = new Pair (b, key);
											inf.Add (pair);
											dinf.Add (pair);
											changed = true;}
									}
        } //rule 11.4

        public void dinfAEncUnitype (AEnc b, Unitype key){
            if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
										(((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (b)==true)))))
										&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (b)==true))))) {
										if(!Pairinf.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (b)==true))))) {
											Pair pair = new Pair (b, key);
											inf.Add (pair);
											dinf.Add (pair);
											changed = true;}
									}
        } //rule 11.5

        public void dinfSEncUnitype (SEnc b, Unitype key){
            if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
										(((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (b)==true)))))
										&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (b)==true))))) {
										if(!Pairinf.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (b)==true))))) {
											Pair pair = new Pair (b, key);
											inf.Add (pair);
											dinf.Add (pair);
											changed = true;}
									}
        } //rule 11.6

        public void dinfPEncUnitype (PEnc b, Unitype key){
            if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true &&  
										(((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true &&  
											(((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (b)==true)))))
										&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (b)==true))))) {
										if(!Pairinf.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (b)==true))))) {
											Pair pair = new Pair (b, key);
											inf.Add (pair);
											dinf.Add (pair);
											changed = true;}
									}
        } //rule 11.7

        public void dinfPairUnitype (Pair b, Unitype key){
            if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true &&  
										(((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (b)==true)))))
										&&!PairList.Exists(gdb=>(gdb.IsPair()==true &&((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (b)==true))))) {
										if(!Pairinf.Exists(gdb=>(gdb.IsPair()==true &&((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (b)==true))))) {
											Pair pair = new Pair (b, key);
											inf.Add (pair);
											dinf.Add (pair);
											changed = true;}
									}
        } //rule 11.8

        public void dinfHashUnitype (Hash b, Unitype key){
            if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
										(((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsPair()==true &&((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (b)==true)))))
										&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (b)==true))))) {
										if(!Pairinf.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (b)==true))))) {
											Pair pair = new Pair (b, key);
											inf.Add (pair);
											dinf.Add (pair);
											changed = true;}
									}
        } //rule 11.9

        public void dinfSignUnitype (Sign b, Unitype key){
            if ((targetsub.Exists (gdb=>(gdb.IsPair()==true &&((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
										(((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (b)==true)))))
										&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (b)==true))))) {
										if(!Pairinf.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (b)==true))))) {
											Pair pair = new Pair (b, key);
											inf.Add (pair);
											dinf.Add (pair);
											changed = true;}
									}
        } //rule 11.10 

        public void dinfCommitUnitype (Commit b, Unitype key){
            if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
										(((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (b)==true))))||
										subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (b)==true)))))
										&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (b)==true))))) {
										if(!Pairinf.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getsecond ()).equal (key)==true && 
											(((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (b)==true))))) {
											Pair pair = new Pair (b, key);
											inf.Add (pair);
											dinf.Add (pair);
											changed = true;}
									}
        } //rule 11.11
        
        public void dinfNonceSKeyRule13 (Nonce b, SKey key){
           if ((targetsub.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((Sign)(object)gdb).getplaintext ())).Nonceequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((Sign)(object)gdb).getplaintext ())).Nonceequal (b) == true)))))
							    && !SignList.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((Sign)(object)gdb).getplaintext ())).Nonceequal (b) == true))))) {
								if (!Signinf.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((Sign)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((Sign)(object)gdb).getplaintext ())).Nonceequal (b) == true))))) {
									Sign sign = new Sign (b, key);
									inf.Add (sign);
									dinf.Add (sign);
									changed = true;
								}
							}
        } //rule 13.1
        
        public void dinfConstantSKeyRule13 (Constant b, SKey key){
           if ((targetsub.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((Sign)(object)gdb).getplaintext ())).Constantequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((Sign)(object)gdb).getplaintext ())).Constantequal (b) == true)))))
							    && !SignList.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((Sign)(object)gdb).getplaintext ())).Constantequal (b) == true))))) {
								if (!Signinf.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((Sign)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((Sign)(object)gdb).getplaintext ())).Constantequal (b) == true))))) {
									Sign sign = new Sign (b, key);
									inf.Add (sign);
									dinf.Add (sign);
									changed = true;
								}
							}
        } //rule 13.2
        
        public void dinfSKeySKeyRule13 (SKey b, SKey key){
           if ((targetsub.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((Sign)(object)gdb).getplaintext ())).SKeyequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((Sign)(object)gdb).getplaintext ())).SKeyequal (b) == true)))))
							    && !SignList.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((Sign)(object)gdb).getplaintext ())).SKeyequal (b) == true))))) {
								if (!Signinf.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((Sign)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((Sign)(object)gdb).getplaintext ())).SKeyequal (b) == true))))) {
									Sign sign = new Sign (b, key);
									inf.Add (sign);
									dinf.Add (sign);
									changed = true;
								}
							}
        } //rule 13.3
        
        public void dinfPKeySKeyRule13 (PKey b, SKey key){
           if ((targetsub.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((Sign)(object)gdb).getplaintext ())).PKeyequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((Sign)(object)gdb).getplaintext ())).PKeyequal (b) == true)))))
							    && !SignList.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((Sign)(object)gdb).getplaintext ())).PKeyequal (b) == true))))) {
								if (!Signinf.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((Sign)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((Sign)(object)gdb).getplaintext ())).PKeyequal (b) == true))))) {
									Sign sign = new Sign (b, key);
									inf.Add (sign);
									dinf.Add (sign);
									changed = true;
								}
							}
        } //rule 13.4
        
        public void dinfAEncSKeyRule13 (AEnc b, SKey key){
           if ((targetsub.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((Sign)(object)gdb).getplaintext ())).AEncequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((Sign)(object)gdb).getplaintext ())).AEncequal (b) == true)))))
							    && !SignList.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((Sign)(object)gdb).getplaintext ())).AEncequal (b) == true))))) {
								if (!Signinf.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((Sign)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((Sign)(object)gdb).getplaintext ())).AEncequal (b) == true))))) {
									Sign sign = new Sign (b, key);
									inf.Add (sign);
									dinf.Add (sign);
									changed = true;
								}
							}
        } //rule 13.5
        
        public void dinfSEncSKeyRule13 (SEnc b, SKey key){
           if ((targetsub.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((Sign)(object)gdb).getplaintext ())).SEncequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((Sign)(object)gdb).getplaintext ())).SEncequal (b) == true)))))
							    && !SignList.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((Sign)(object)gdb).getplaintext ())).SEncequal (b) == true))))) {
								if (!Signinf.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((Sign)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((Sign)(object)gdb).getplaintext ())).SEncequal (b) == true))))) {
									Sign sign = new Sign (b, key);
									inf.Add (sign);
									dinf.Add (sign);
									changed = true;
								}
							}
        } //rule 13.6
        
        public void dinfPEncSKeyRule13 (PEnc b, SKey key){
           if ((targetsub.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((Sign)(object)gdb).getplaintext ())).PEncequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((Sign)(object)gdb).getplaintext ())).PEncequal (b) == true)))))
							    && !SignList.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((Sign)(object)gdb).getplaintext ())).PEncequal (b) == true))))) {
								if (!Signinf.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((Sign)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((Sign)(object)gdb).getplaintext ())).PEncequal (b) == true))))) {
									Sign sign = new Sign (b, key);
									inf.Add (sign);
									dinf.Add (sign);
									changed = true;
								}
							}
        } //rule 13.7
        
        public void dinfPairSKeyRule13 (Pair b, SKey key){
           if ((targetsub.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((Sign)(object)gdb).getplaintext ())).Pairequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((Sign)(object)gdb).getplaintext ())).Pairequal (b) == true)))))
							    && !SignList.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((Sign)(object)gdb).getplaintext ())).Pairequal (b) == true))))) {
								if (!Signinf.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((Sign)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((Sign)(object)gdb).getplaintext ())).Pairequal (b) == true))))) {
									Sign sign = new Sign (b, key);
									inf.Add (sign);
									dinf.Add (sign);
									changed = true;
								}
							}
        } //rule 13.8
        
        public void dinfHashSKeyRule13 (Hash b, SKey key){
           if ((targetsub.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((Sign)(object)gdb).getplaintext ())).Hashequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((Sign)(object)gdb).getplaintext ())).Hashequal (b) == true)))))
							    && !SignList.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((Sign)(object)gdb).getplaintext ())).Hashequal (b) == true))))) {
								if (!Signinf.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((Sign)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((Sign)(object)gdb).getplaintext ())).Hashequal (b) == true))))) {
									Sign sign = new Sign (b, key);
									inf.Add (sign);
									dinf.Add (sign);
									changed = true;
								}
							}
        } //rule 13.9
        
        public void dinfSignSKeyRule13 (Sign b, SKey key){
           if ((targetsub.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((Sign)(object)gdb).getplaintext ())).Signequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((Sign)(object)gdb).getplaintext ())).Signequal (b) == true)))))
							    && !SignList.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((Sign)(object)gdb).getplaintext ())).Signequal (b) == true))))) {
								if (!Signinf.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((Sign)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((Sign)(object)gdb).getplaintext ())).Signequal (b) == true))))) {
									Sign sign = new Sign (b, key);
									inf.Add (sign);
									dinf.Add (sign);
									changed = true;
								}
							}
        } //rule 13.10
        
        public void dinfCommitSKeyRule13 (Commit b, SKey key){
           if ((targetsub.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((Sign)(object)gdb).getplaintext ())).Commitequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((Sign)(object)gdb).getplaintext ())).Commitequal (b) == true)))))
							    && !SignList.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((Sign)(object)gdb).getplaintext ())).Commitequal (b) == true))))) {
								if (!Signinf.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((Sign)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((Sign)(object)gdb).getplaintext ())).Commitequal (b) == true))))) {
									Sign sign = new Sign (b, key);
									inf.Add (sign);
									dinf.Add (sign);
									changed = true;
								}
							}
        } //rule 13.11
        
        public void dinfUnitypeSKeyRule13 (Unitype b, SKey key){
            if ((targetsub.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ()).equal (b) == true))) ||
							    subterms.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ()).equal (b) == true))))
							    && !SignList.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
							    (((Sign)(object)gdb).getplaintext ()).equal (b) == true)))) {
								if (!Signinf.Exists (gdb => (gdb.IsSign () == true && (((SKey)(object)(((Sign)(object)gdb).getsk ())).SKeyequal (key) == true &&
								   (((Sign)(object)gdb).getplaintext ()).equal (b) == true)))) {
									Sign sign = new Sign (b, key);
									inf.Add (sign);
									dinf.Add (sign);
									changed = true;
								}
							}
        } //rule 13.12
        
        public void dinfNonceNonceRule14 (Nonce b, Nonce key){
            if ((targetsub.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((Commit)(object)gdb).getplaintext ())).Nonceequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((Commit)(object)gdb).getplaintext ())).Nonceequal (b) == true)))))
							    && !CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((Commit)(object)gdb).getplaintext ())).Nonceequal (b) == true))))) {
								if (!Commitinf.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
								   (((Commit)(object)gdb).getplaintext ().IsNonce () == true && ((Nonce)(object)(((Commit)(object)gdb).getplaintext ())).Nonceequal (b) == true))))) {
									Commit commit = new Commit (b, key);
									inf.Add (commit);
									dinf.Add (commit);
									changed = true;
								}
							}
        } //rule 14.1
        
        public void dinfConstantNonceRule14 (Constant b, Nonce key){
            if ((targetsub.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((Commit)(object)gdb).getplaintext ())).Constantequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((Commit)(object)gdb).getplaintext ())).Constantequal (b) == true)))))
							    && !CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((Commit)(object)gdb).getplaintext ())).Constantequal (b) == true))))) {
								if (!Commitinf.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
								   (((Commit)(object)gdb).getplaintext ().IsConstant () == true && ((Constant)(object)(((Commit)(object)gdb).getplaintext ())).Constantequal (b) == true))))) {
									Commit commit = new Commit (b, key);
									inf.Add (commit);
									dinf.Add (commit);
									changed = true;
								}
							}
        } //rule 14.2
        
        public void dinfSKeyNonceRule14 (SKey b, Nonce key){
            if ((targetsub.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((Commit)(object)gdb).getplaintext ())).SKeyequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((Commit)(object)gdb).getplaintext ())).SKeyequal (b) == true)))))
							    && !CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((Commit)(object)gdb).getplaintext ())).SKeyequal (b) == true))))) {
								if (!Commitinf.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
								   (((Commit)(object)gdb).getplaintext ().IsSKey () == true && ((SKey)(object)(((Commit)(object)gdb).getplaintext ())).SKeyequal (b) == true))))) {
									Commit commit = new Commit (b, key);
									inf.Add (commit);
									dinf.Add (commit);
									changed = true;
								}
							}
        } //rule 14.3
        
        public void dinfPKeyNonceRule14 (PKey b, Nonce key){
            if ((targetsub.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((Commit)(object)gdb).getplaintext ())).PKeyequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((Commit)(object)gdb).getplaintext ())).PKeyequal (b) == true)))))
							    && !CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((Commit)(object)gdb).getplaintext ())).PKeyequal (b) == true))))) {
								if (!Commitinf.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
								   (((Commit)(object)gdb).getplaintext ().IsPKey () == true && ((PKey)(object)(((Commit)(object)gdb).getplaintext ())).PKeyequal (b) == true))))) {
									Commit commit = new Commit (b, key);
									inf.Add (commit);
									dinf.Add (commit);
									changed = true;
								}
							}
        } //rule 14.4
        
        public void dinfAEncNonceRule14 (AEnc b, Nonce key){
            if ((targetsub.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((Commit)(object)gdb).getplaintext ())).AEncequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((Commit)(object)gdb).getplaintext ())).AEncequal (b) == true)))))
							    && !CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((Commit)(object)gdb).getplaintext ())).AEncequal (b) == true))))) {
								if (!Commitinf.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
								   (((Commit)(object)gdb).getplaintext ().IsAEnc () == true && ((AEnc)(object)(((Commit)(object)gdb).getplaintext ())).AEncequal (b) == true))))) {
									Commit commit = new Commit (b, key);
									inf.Add (commit);
									dinf.Add (commit);
									changed = true;
								}
							}
        } //rule 14.5
        
        public void dinfSEncNonceRule14 (SEnc b, Nonce key){
            if ((targetsub.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((Commit)(object)gdb).getplaintext ())).SEncequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((Commit)(object)gdb).getplaintext ())).SEncequal (b) == true)))))
							    && !CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((Commit)(object)gdb).getplaintext ())).SEncequal (b) == true))))) {
								if (!Commitinf.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
								   (((Commit)(object)gdb).getplaintext ().IsSEnc () == true && ((SEnc)(object)(((Commit)(object)gdb).getplaintext ())).SEncequal (b) == true))))) {
									Commit commit = new Commit (b, key);
									inf.Add (commit);
									dinf.Add (commit);
									changed = true;
								}
							}
        } //rule 14.6
        
        public void dinfPEncNonceRule14 (PEnc b, Nonce key){
            if ((targetsub.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((Commit)(object)gdb).getplaintext ())).PEncequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((Commit)(object)gdb).getplaintext ())).PEncequal (b) == true)))))
							    && !CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((Commit)(object)gdb).getplaintext ())).PEncequal (b) == true))))) {
								if (!Commitinf.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
								   (((Commit)(object)gdb).getplaintext ().IsPEnc () == true && ((PEnc)(object)(((Commit)(object)gdb).getplaintext ())).PEncequal (b) == true))))) {
									Commit commit = new Commit (b, key);
									inf.Add (commit);
									dinf.Add (commit);
									changed = true;
								}
							}
        } //rule 14.7
        
        public void dinfPairNonceRule14 (Pair b, Nonce key){
            if ((targetsub.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((Commit)(object)gdb).getplaintext ())).Pairequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((Commit)(object)gdb).getplaintext ())).Pairequal (b) == true)))))
							    && !CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((Commit)(object)gdb).getplaintext ())).Pairequal (b) == true))))) {
								if (!Commitinf.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
								   (((Commit)(object)gdb).getplaintext ().IsPair () == true && ((Pair)(object)(((Commit)(object)gdb).getplaintext ())).Pairequal (b) == true))))) {
									Commit commit = new Commit (b, key);
									inf.Add (commit);
									dinf.Add (commit);
									changed = true;
								}
							}
        } //rule 14.8
        
        public void dinfHashNonceRule14 (Hash b, Nonce key){
            if ((targetsub.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((Commit)(object)gdb).getplaintext ())).Hashequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((Commit)(object)gdb).getplaintext ())).Hashequal (b) == true)))))
							    && !CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((Commit)(object)gdb).getplaintext ())).Hashequal (b) == true))))) {
								if (!Commitinf.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
								   (((Commit)(object)gdb).getplaintext ().IsHash () == true && ((Hash)(object)(((Commit)(object)gdb).getplaintext ())).Hashequal (b) == true))))) {
									Commit commit = new Commit (b, key);
									inf.Add (commit);
									dinf.Add (commit);
									changed = true;
								}
							}
        } //rule 14.9
        
        public void dinfSignNonceRule14 (Sign b, Nonce key){
            if ((targetsub.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((Commit)(object)gdb).getplaintext ())).Signequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((Commit)(object)gdb).getplaintext ())).Signequal (b) == true)))))
							    && !CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((Commit)(object)gdb).getplaintext ())).Signequal (b) == true))))) {
								if (!Commitinf.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
								   (((Commit)(object)gdb).getplaintext ().IsSign () == true && ((Sign)(object)(((Commit)(object)gdb).getplaintext ())).Signequal (b) == true))))) {
									Commit commit = new Commit (b, key);
									inf.Add (commit);
									dinf.Add (commit);
									changed = true;
								}
							}
        } //rule 14.10
        
        public void dinfCommitNonceRule14 (Commit b, Nonce key){
            if ((targetsub.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((Commit)(object)gdb).getplaintext ())).Commitequal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((Commit)(object)gdb).getplaintext ())).Commitequal (b) == true)))))
							    && !CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((Commit)(object)gdb).getplaintext ())).Commitequal (b) == true))))) {
								if (!CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
								   (((Commit)(object)gdb).getplaintext ().IsCommit () == true && ((Commit)(object)(((Commit)(object)gdb).getplaintext ())).Commitequal (b) == true))))) {
									Commit commit = new Commit (b, key);
									inf.Add (commit);
									dinf.Add (commit);
									changed = true;
								}
							}
        } //rule 14.11
        
        public void dinfUnitypeNonceRule14 (Unitype b, Nonce key){
            if ((targetsub.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().equal (b) == true)))) ||
							    subterms.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().equal (b) == true)))))
							    && !CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
							    (((Commit)(object)gdb).getplaintext ().equal (b) == true))))) {
								if (!CommitList.Exists (gdb => (gdb.IsCommit () == true && (((Nonce)(object)(((Commit)(object)gdb).getrandom ())).Nonceequal (key) == true &&
								   (((Commit)(object)gdb).getplaintext ().equal (b) == true))))) {
									Commit commit = new Commit (b, key);
									inf.Add (commit);
									dinf.Add (commit);
									changed = true;
								}
							}
        } //rule 14.12
        
        
		public bool deduce(Unitype i){
			//List<Unitype> targetsub = new List<Unitype> ();
			//List<Unitype> temp = new List<Unitype> ();
			//trivial cases
			if (i.IsADec () == true) {
				if (((ADec)(object)i).getcipher ().isDecryptable (((ADec)(object)i).getsk ()) == true) {
					return knows (((ADec)(object)i).result ());
				} else {
					if (knows(((ADec)(object)i).getcipher ())&&knows(((ADec)(object)i).getsk ()))
						{return true;}
						else{return false;}
				}
			} else if (i.IsSDec () == true) {
				if (((SDec)(object)i).getcipher ().isDecryptable (((SDec)(object)i).getsk ()) == true) {
					return knows (((SDec)(object)i).result ());
				} else {
					if (knows(((SDec)(object)i).getcipher ())&&knows(((SDec)(object)i).getsk ()))
					{return true;}
					else{return false;}
				}
			}else if(i.IsPDec () == true){
				if (((PDec)(object)i).getcipher ().isDecryptable (((PDec)(object)i).getsk ()) == true) {
					return knows (((PDec)(object)i).result ());
				} else {
					if (knows(((PDec)(object)i).getcipher ())&&knows(((PDec)(object)i).getsk ()))
					{return true;}
					else{return false;}
				}
			}else if(i.IsGetSignMsg () == true){
				if (((GetSignMsg)(object)i).getsign ().isDecryptable (((GetSignMsg)(object)i).getpk ()) == true) {
					return knows (((GetSignMsg)(object)i).result ());
				} else {
					if (knows(((GetSignMsg)(object)i).getsign ())&&knows(((GetSignMsg)(object)i).getpk ()))
					{return true;}
					else{return false;}
				}
			}else if(i.IsOpen () == true){
				if (((Open)(object)i).getcipher ().isDecryptable (((Open)(object)i).getrandom ()) == true) {
					return knows (((Open)(object)i).result ());
				} else {
					if (knows(((Open)(object)i).getcipher ())&&knows(((Open)(object)i).getrandom ()))
					{return true;}
					else{return false;}
				}
			}
			else{//subterms of the target
				if (i.IsNonce () == true || i.IsConstant () == true || i.IsSKey () == true) {
				targetsub.Add (i);
			}else if (i.IsPKey () == true) {
				targetsub.Add (i);
				targetsub.Add (((PKey)(object)i).getsk ());
			}else if (i.IsAEnc () == true) {
				targetsub.Add (i);
				targetsub.Add (((AEnc)(Object)i).getpk ());
				targetsub.Add (((AEnc)(Object)i).getpk ().getsk ());
				targetsub.Add (((AEnc)(Object)i).getplaintext ());
				if(((AEnc)(object)i).getplaintext().IsPKey()==true||((AEnc)(object)i).getplaintext().IsAEnc()==true||
					((AEnc)(object)i).getplaintext().IsSEnc()==true||((AEnc)(object)i).getplaintext().IsPEnc()==true||
					((AEnc)(object)i).getplaintext().IsPair()==true||((AEnc)(object)i).getplaintext().IsHash()==true||
					((AEnc)(object)i).getplaintext().IsSign()==true||((AEnc)(object)i).getplaintext().IsCommit()==true){
					temp.Add (((AEnc)(Object)i).getplaintext ());}
			} else if (i.IsSEnc () == true) {
				targetsub.Add (i);
				targetsub.Add (((SEnc)(Object)i).getsk ());
				targetsub.Add(((SEnc)(Object)i).getplaintext ()); 
				if(((SEnc)(object)i).getplaintext().IsPKey()==true||((SEnc)(object)i).getplaintext().IsAEnc()==true||
					((SEnc)(object)i).getplaintext().IsSEnc()==true||((SEnc)(object)i).getplaintext().IsPEnc()==true||
					((SEnc)(object)i).getplaintext().IsPair()==true||((SEnc)(object)i).getplaintext().IsHash()==true||
					((SEnc)(object)i).getplaintext().IsSign()==true||((SEnc)(object)i).getplaintext().IsCommit()==true){
					temp.Add (((SEnc)(object)i).getplaintext ());
				}
			} else if (i.IsPEnc () == true) {
				targetsub.Add (i);
				targetsub.Add (((PEnc)(Object)i).getpk ());
				targetsub.Add (((PEnc)(Object)i).getpk ().getsk ());
				targetsub.Add (((PEnc)(Object)i).getrandom ());
				targetsub.Add(((PEnc)(Object)i).getplaintext ());
				if(((PEnc)(object)i).getplaintext().IsPKey()==true||((PEnc)(object)i).getplaintext().IsAEnc()==true||
					((PEnc)(object)i).getplaintext().IsSEnc()==true||((PEnc)(object)i).getplaintext().IsPEnc()==true||
					((PEnc)(object)i).getplaintext().IsPair()==true||((PEnc)(object)i).getplaintext().IsHash()==true||
					((PEnc)(object)i).getplaintext().IsSign()==true||((PEnc)(object)i).getplaintext().IsCommit()==true){
					temp.Add (((PEnc)(object)i).getplaintext ());
				}
			} else if (i.IsPair () == true) {
				targetsub.Add (i);
				targetsub.Add(((Pair)(Object)i).getfirst ());
				targetsub.Add(((Pair)(Object)i).getsecond ()); 
				if(((Pair)(object)i).getfirst().IsPKey()==true||((Pair)(object)i).getfirst().IsAEnc()==true||
					((Pair)(object)i).getfirst().IsSEnc()==true||((Pair)(object)i).getfirst().IsPEnc()==true||
					((Pair)(object)i).getfirst().IsPair()==true||((Pair)(object)i).getfirst().IsHash()==true||
					((Pair)(object)i).getfirst().IsSign()==true||((Pair)(object)i).getfirst().IsCommit()==true){
					temp.Add (((Pair)(object)i).getfirst ());
				}
				if(((Pair)(object)i).getsecond().IsPKey()==true||((Pair)(object)i).getsecond().IsAEnc()==true||
					((Pair)(object)i).getsecond().IsSEnc()==true||((Pair)(object)i).getsecond().IsPEnc()==true||
					((Pair)(object)i).getsecond().IsPair()==true||((Pair)(object)i).getsecond().IsHash()==true||
					((Pair)(object)i).getsecond().IsSign()==true||((Pair)(object)i).getsecond().IsCommit()==true){
					temp.Add (((Pair)(object)i).getsecond ());
				}
			} else if (i.IsHash () == true) {
				targetsub.Add (i);
				targetsub.Add (((Hash)(Object)i).getplaintext ());
				if(((Hash)(object)i).getplaintext().IsPKey()==true||((Hash)(object)i).getplaintext().IsAEnc()==true||
					((Hash)(object)i).getplaintext().IsSEnc()==true||((Hash)(object)i).getplaintext().IsPEnc()==true||
					((Hash)(object)i).getplaintext().IsPair()==true||((Hash)(object)i).getplaintext().IsHash()==true||
					((Hash)(object)i).getplaintext().IsSign()==true||((Hash)(object)i).getplaintext().IsCommit()==true){
					temp.Add (((Hash)(object)i).getplaintext ());
				}
			} else if (i.IsSign () == true) {
				targetsub.Add (i);
				targetsub.Add (((Sign)(Object)i).getsk ());
				targetsub.Add (((Sign)(Object)i).getplaintext ());
				if(((Sign)(object)i).getplaintext().IsPKey()==true||((Sign)(object)i).getplaintext().IsAEnc()==true||
					((Sign)(object)i).getplaintext().IsSEnc()==true||((Sign)(object)i).getplaintext().IsPEnc()==true||
					((Sign)(object)i).getplaintext().IsPair()==true||((Sign)(object)i).getplaintext().IsHash()==true||
					((Sign)(object)i).getplaintext().IsSign()==true||((Sign)(object)i).getplaintext().IsCommit()==true){
					temp.Add (((Sign)(object)i).getplaintext ());
				}
			} else if (i.IsCommit () == true) {
				targetsub.Add (i);
				targetsub.Add (((Commit)(Object)i).getrandom ());
				targetsub.Add (((Commit)(Object)i).getplaintext ());
				if(((Commit)(object)i).getplaintext().IsPKey()==true||((Commit)(object)i).getplaintext().IsAEnc()==true||
					((Commit)(object)i).getplaintext().IsSEnc()==true||((Commit)(object)i).getplaintext().IsPEnc()==true||
					((Commit)(object)i).getplaintext().IsPair()==true||((Commit)(object)i).getplaintext().IsHash()==true||
					((Commit)(object)i).getplaintext().IsSign()==true||((Commit)(object)i).getplaintext().IsCommit()==true){
					temp.Add (((Commit)(object)i).getplaintext ());
				}
			}
				while (temp.Count != 0) {
					int l = temp.Count;
				    for(int k=l-1;k>=0;k--){
					Unitype j = temp [k];
					if (j.IsPKey () == true ) {
						if(!targetsub.Contains (((PKey)(object)j).getsk ())){
							targetsub.Add (((PKey)(object)j).getsk ());}}
					else if(j.IsAEnc()==true){
						if(!targetsub.Contains (((AEnc)(object)j).getpk ())){
							targetsub.Add(((AEnc)(object)j).getpk ());
							if(!targetsub.Contains (((AEnc)(object)j).getpk ().getsk())){
								targetsub.Add(((AEnc)(object)j).getpk ().getsk());
							}
						}
						if(!targetsub.Contains (((AEnc)(object)j).getplaintext())){
							targetsub.Add (((AEnc)(object)j).getplaintext ());
							if(((AEnc)(object)j).getplaintext().IsPKey()==true||((AEnc)(object)j).getplaintext().IsAEnc()==true||
								((AEnc)(object)j).getplaintext().IsSEnc()==true||((AEnc)(object)j).getplaintext().IsPEnc()==true||
								((AEnc)(object)j).getplaintext().IsPair()==true||((AEnc)(object)j).getplaintext().IsHash()==true||
								((AEnc)(object)j).getplaintext().IsSign()==true||((AEnc)(object)j).getplaintext().IsCommit()==true){
								temp.Add (((AEnc)(object)j).getplaintext ());
							}
						}
					}
					else if(j.IsSEnc()==true){
						if(!targetsub.Contains (((SEnc)(object)j).getsk ())){
							targetsub.Add(((SEnc)(object)j).getsk ());
						}
						if(!targetsub.Contains (((SEnc)(object)j).getplaintext())){
							targetsub.Add (((SEnc)(object)j).getplaintext ());
							if(((SEnc)(object)j).getplaintext().IsPKey()==true||((SEnc)(object)j).getplaintext().IsAEnc()==true||
								((SEnc)(object)j).getplaintext().IsSEnc()==true||((SEnc)(object)j).getplaintext().IsPEnc()==true||
								((SEnc)(object)j).getplaintext().IsPair()==true||((SEnc)(object)j).getplaintext().IsHash()==true||
								((SEnc)(object)j).getplaintext().IsSign()==true||((SEnc)(object)j).getplaintext().IsCommit()==true){
								temp.Add (((SEnc)(object)j).getplaintext ());
							}
						}
					}
					else if(j.IsPEnc()==true){
						if(!targetsub.Contains (((PEnc)(object)j).getpk ())){
							targetsub.Add(((PEnc)(object)j).getpk ());
							if(!targetsub.Contains (((PEnc)(object)j).getpk().getsk ())){
								targetsub.Add(((PEnc)(object)j).getpk().getsk ());
							}}
						if(!targetsub.Contains (((PEnc)(object)j).getrandom ())){
							targetsub.Add(((PEnc)(object)j).getrandom ());
						}
						if(!targetsub.Contains (((PEnc)(object)j).getplaintext())){
							targetsub.Add (((PEnc)(object)j).getplaintext ());
							if(((PEnc)(object)j).getplaintext().IsPKey()==true||((PEnc)(object)j).getplaintext().IsAEnc()==true||
								((PEnc)(object)j).getplaintext().IsSEnc()==true||((PEnc)(object)j).getplaintext().IsPEnc()==true||
								((PEnc)(object)j).getplaintext().IsPair()==true||((PEnc)(object)j).getplaintext().IsHash()==true||
								((PEnc)(object)j).getplaintext().IsSign()==true||((PEnc)(object)j).getplaintext().IsCommit()==true){
								temp.Add (((PEnc)(object)j).getplaintext ());
							}
						}
						}
					else if(j.IsPair()==true){
						if (!targetsub.Contains (((Pair)(object)j).getfirst ())){
							targetsub.Add (((Pair)(object)j).getfirst ());
							if(((Pair)(object)j).getfirst().IsPKey()==true||((Pair)(object)j).getfirst().IsAEnc()==true||
								((Pair)(object)j).getfirst().IsSEnc()==true||((Pair)(object)j).getfirst().IsPEnc()==true||
								((Pair)(object)j).getfirst().IsPair()==true||((Pair)(object)j).getfirst().IsHash()==true||
								((Pair)(object)j).getfirst().IsSign()==true||((Pair)(object)j).getfirst().IsCommit()==true){
								temp.Add (((Pair)(object)j).getfirst ());
							}
						}
						if (!targetsub.Contains (((Pair)(object)j).getsecond ())){
							targetsub.Add (((Pair)(object)j).getsecond ());
							if(((Pair)(object)j).getsecond().IsPKey()==true||((Pair)(object)j).getsecond().IsAEnc()==true||
								((Pair)(object)j).getsecond().IsSEnc()==true||((Pair)(object)j).getsecond().IsPEnc()==true||
								((Pair)(object)j).getsecond().IsPair()==true||((Pair)(object)j).getsecond().IsHash()==true||
								((Pair)(object)j).getsecond().IsSign()==true||((Pair)(object)j).getsecond().IsCommit()==true){
								temp.Add (((Pair)(object)j).getsecond ());
							}
						}
						}
					else if(j.IsHash()==true){
							if (!targetsub.Contains (((Hash)(object)j).getplaintext ())){
								targetsub.Add (((Hash)(object)j).getplaintext ());
								if(((Hash)(object)j).getplaintext().IsPKey()==true||((Hash)(object)j).getplaintext().IsAEnc()==true||
									((Hash)(object)j).getplaintext().IsSEnc()==true||((Hash)(object)j).getplaintext().IsPEnc()==true||
									((Hash)(object)j).getplaintext().IsPair()==true||((Hash)(object)j).getplaintext().IsHash()==true||
									((Hash)(object)j).getplaintext().IsSign()==true||((Hash)(object)j).getplaintext().IsCommit()==true){
									temp.Add (((Hash)(object)j).getplaintext ());
								}
							}
						}
					else if(j.IsSign()==true){
						if (!targetsub.Contains (((Sign)(object)j).getsk ())) {
							targetsub.Add (((Sign)(object)j).getsk ());
						}
						if (!targetsub.Contains (((Sign)(object)j).getplaintext ())){
							targetsub.Add (((Sign)(object)j).getplaintext ());
							if(((Sign)(object)j).getplaintext().IsPKey()==true||((Sign)(object)j).getplaintext().IsAEnc()==true||
								((Sign)(object)j).getplaintext().IsSEnc()==true||((Sign)(object)j).getplaintext().IsPEnc()==true||
								((Sign)(object)j).getplaintext().IsPair()==true||((Sign)(object)j).getplaintext().IsHash()==true||
								((Sign)(object)j).getplaintext().IsSign()==true||((Sign)(object)j).getplaintext().IsCommit()==true){
								temp.Add (((Sign)(object)j).getplaintext ());
							}
						}
					}
					else if(j.IsCommit()==true){
						if (!targetsub.Contains (((Commit)(object)j).getrandom ())) {
							targetsub.Add (((Commit)(object)j).getrandom ());
						}
						if (!targetsub.Contains (((Commit)(object)j).getplaintext ())){
						     targetsub.Add (((Commit)(object)j).getplaintext ());
							if(((Commit)(object)j).getplaintext().IsPKey()==true||((Commit)(object)j).getplaintext().IsAEnc()==true||
								((Commit)(object)j).getplaintext().IsSEnc()==true||((Commit)(object)j).getplaintext().IsPEnc()==true||
								((Commit)(object)j).getplaintext().IsPair()==true||((Commit)(object)j).getplaintext().IsHash()==true||
								((Commit)(object)j).getplaintext().IsSign()==true||((Commit)(object)j).getplaintext().IsCommit()==true){
								temp.Add (((Commit)(object)j).getplaintext ());
							}
						}
						}
						else{
								throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("wrong input");	
						}
						temp.RemoveAt (k);
				}
			}
				//bool changed = false;
				//List<Unitype> inf=new List<Unitype>();//additional terms
					//rule 1:
					foreach (AEnc ciphertext in AEncList)
					{
						foreach (SKey key in SKeyList)
						{
						    infAEncSKey (ciphertext, key);
						}
					}
					//rule 2:
					foreach(PEnc ciphertext in PEncList)
					{ 
						foreach (SKey key in SKeyList)
						{
							infPEncSKey (ciphertext, key);
						}
					}
					//rule 3:
					foreach(SEnc ciphertext in SEncList)
					{ 
						foreach (SKey key in SKeyList)
						{
							infSEncSKey (ciphertext, key);
						}
					}
					//rule 4:
					foreach(Pair p in PairList)
					{
						infPair (p);

					}
					//rule 5:
					foreach (Sign ciphertext in SignList) {
						foreach (PKey key in PKeyList) {
							infSignPKey (ciphertext, key);
						}
					}
					//rule 6:
					foreach (Commit ciphertext in CommitList) {
						foreach(Nonce key in NonceList){
							infCommitNonce (ciphertext, key);
						}
					}
					//rule 7:
					foreach (SKey key in SKeyList) {
						infSKey (key);
				}
					//rule 8:
					foreach(Nonce b in NonceList){
						foreach(PKey key in PKeyList)
						{
							infNoncePKey (b, key);
						}
					}
					foreach(Constant b in ConstantList){
						foreach(PKey key in PKeyList)
						{
							infConstantPKey (b, key);
						}
					}
					foreach(SKey b in SKeyList){
						foreach(PKey key in PKeyList)
						{
							infSKeyPKey (b, key);
						}
					}
					foreach(PKey b in PKeyList){
						foreach(PKey key in PKeyList)
						{
							infPKeyPKey (b, key);
						}
					}
					foreach(AEnc b in AEncList){
						foreach(PKey key in PKeyList)
						{
							infAEncPKey (b, key);
						}
					}
					foreach(SEnc b in SEncList){
						foreach(PKey key in PKeyList)
						{
							infSEncPKey (b, key);
						}
					}
					foreach(PEnc b in PEncList){
						foreach(PKey key in PKeyList)
						{
							infPEncPKey (b, key);
						}
					}
					foreach(Pair b in PairList){
						foreach(PKey key in PKeyList)
						{
							infPairPKey (b, key);
						}
					}
					foreach(Hash b in HashList){
						foreach(PKey key in PKeyList)
						{
							infHashPKey (b, key);
						}
					}
					foreach(Sign b in SignList){
						foreach(PKey key in PKeyList)
						{
							infSignPKeyRule8 (b, key);
						}
					}
					foreach(Commit b in CommitList){
						foreach(PKey key in PKeyList)
						{
							infCommitPKey (b, key);
						}
					}
					//rule 9:get SEnc
					foreach(Nonce b in NonceList){
						foreach(SKey key in SKeyList)
						{
							infNonceSKey (b, key);
						}
					}
					foreach(Constant b in ConstantList){
						foreach(SKey key in SKeyList)
						{
							infConstantSKey (b, key);
						}
					}
					foreach(SKey b in SKeyList){
						foreach(SKey key in SKeyList)
						{
							infSKeySKey (b, key);
						}
					}
					foreach(PKey b in PKeyList){
						foreach(SKey key in SKeyList)
						{
							infPKeySKey (b, key);
						}
					}
					foreach(AEnc b in AEncList){
						foreach(SKey key in SKeyList)
					{
							infAEncSKeyRule9 (b, key);
						}
					}
					foreach(SEnc b in SEncList){
						foreach(SKey key in SKeyList)
						{
							infSEncSKeyRule9 (b, key);
						}
					}
					foreach(PEnc b in PEncList){
						foreach(SKey key in SKeyList)
						{
							infPEncSKeyRule9 (b, key);
						}
					}
					foreach(Pair b in PairList){
						foreach(SKey key in SKeyList)
						{
							infPairSKey (b, key);
						}
					}
					foreach(Hash b in HashList){
						foreach(SKey key in SKeyList)
						{
							infHashSKey (b, key);
						}
					}
					foreach(Sign b in SignList){
						foreach(SKey key in SKeyList)
						{
							infSignSKey (b, key);
						}
					}
					foreach(Commit b in CommitList){
						foreach(SKey key in SKeyList)
						{
							infCommitSKey (b, key);
						}
					}
					//rule 10: PEnc
				foreach(Nonce b in NonceList){
					foreach(Nonce r in NonceList){
					foreach(PKey key in PKeyList)
					{
							infNonceNoncePKey (b, r, key);
					}
					}
				}
				foreach(Constant b in ConstantList){
					foreach(Nonce r in NonceList){
					foreach(PKey key in PKeyList)
					{
							infConstantNoncePKey (b, r, key);
					}
					}
				}
				foreach(SKey b in SKeyList){
					foreach(Nonce r in NonceList){
					foreach(PKey key in PKeyList)
					{
							infSKeyNoncePKey (b, r, key);
					}
					}
				}
				foreach(PKey b in PKeyList){
					foreach(Nonce r in NonceList){
					foreach(PKey key in PKeyList)
					{
							infPKeyNoncePKey (b, r, key);
					}
					}
				}
				foreach(AEnc b in AEncList){
					foreach(Nonce r in NonceList){
					foreach(PKey key in PKeyList)
					{
							infAEncNoncePKey (b, r, key);
					}
					}
				}
				foreach(SEnc b in SEncList){
					foreach(Nonce r in NonceList){
					foreach(PKey key in PKeyList)
					{
							infSEncNoncePKey (b, r, key);
					}
					}
				}
				foreach(PEnc b in PEncList){
					foreach(Nonce r in NonceList){
					foreach(PKey key in PKeyList)
					{
							infPEncNoncePKey (b, r, key);
					}
					}
				}
				foreach(Pair b in PairList){
					foreach(Nonce r in NonceList){
					foreach(PKey key in PKeyList)
					{
							infPairNoncePKey (b, r, key);
					}
					}
				}
				foreach(Hash b in HashList){
					foreach(Nonce r in NonceList){
					foreach(PKey key in PKeyList)
					{
							infHashNoncePKey (b, r, key);
					}
					}
				}
				foreach(Sign b in SignList){
					foreach(Nonce r in NonceList){
					foreach(PKey key in PKeyList)
					{
							infSignNoncePKey (b, r, key);
					}
					}
				}
				foreach(Commit b in CommitList){
					foreach(Nonce r in NonceList){
					foreach(PKey key in PKeyList)
					{
							infCommitNoncePKey (b, r, key);
					}
					}
				}
				//rule 11: Pair
				//Pkey first
				foreach(Nonce b in NonceList){
					foreach(PKey key in PKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Constant b in ConstantList){
					foreach(PKey key in PKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true )&&
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SKey b in SKeyList){
					foreach(PKey key in PKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PKey b in PKeyList){
					foreach(PKey key in PKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(AEnc b in AEncList){
					foreach(PKey key in PKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SEnc b in SEncList){
					foreach(PKey key in PKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PEnc b in PEncList){
					foreach(PKey key in PKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Pair b in PairList){
					foreach(PKey key in PKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Hash b in HashList){
					foreach(PKey key in PKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Sign b in SignList){
					foreach(PKey key in PKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true)&&
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Commit b in CommitList){
					foreach(PKey key in PKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getfirst ())).PKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				//Nonce first
				foreach(Nonce b in NonceList){
					foreach(Nonce key in NonceList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Constant b in ConstantList){
					foreach(Nonce key in NonceList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true )&&
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SKey b in SKeyList){
					foreach(Nonce key in NonceList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PKey b in PKeyList){
					foreach(Nonce key in NonceList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(AEnc b in AEncList){
					foreach(Nonce key in NonceList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SEnc b in SEncList){
					foreach(Nonce key in NonceList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PEnc b in PEncList){
					foreach(Nonce key in NonceList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Pair b in PairList){
					foreach(Nonce key in NonceList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Hash b in HashList){
					foreach(Nonce key in NonceList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Sign b in SignList){
					foreach(Nonce key in NonceList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true)&&
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Commit b in CommitList){
					foreach(Nonce key in NonceList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getfirst ())).Nonceequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				//Constant first
				foreach(Nonce b in NonceList){
					foreach(Constant key in ConstantList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Constant b in ConstantList){
					foreach(Constant key in ConstantList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true )&&
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SKey b in SKeyList){
					foreach(Constant key in ConstantList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PKey b in PKeyList){
					foreach(Constant key in ConstantList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(AEnc b in AEncList){
					foreach(Constant key in ConstantList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SEnc b in SEncList){
					foreach(Constant key in ConstantList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PEnc b in PEncList){
					foreach(Constant key in ConstantList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Pair b in PairList){
					foreach(Constant key in ConstantList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Hash b in HashList){
					foreach(Constant key in ConstantList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Sign b in SignList){
					foreach(Constant key in ConstantList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true)&&
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Commit b in CommitList){
					foreach(Constant key in ConstantList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getfirst ())).Constantequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				//SKey first
				foreach(Nonce b in NonceList){
					foreach(SKey key in SKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Constant b in ConstantList){
					foreach(SKey key in SKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true )&&
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SKey b in SKeyList){
					foreach(SKey key in SKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PKey b in PKeyList){
					foreach(SKey key in SKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(AEnc b in AEncList){
					foreach(SKey key in SKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SEnc b in SEncList){
					foreach(SKey key in SKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PEnc b in PEncList){
					foreach(SKey key in SKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Pair b in PairList){
					foreach(SKey key in SKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Hash b in HashList){
					foreach(SKey key in SKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Sign b in SignList){
					foreach(SKey key in SKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true)&&
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Commit b in CommitList){
					foreach(SKey key in SKeyList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getfirst ())).SKeyequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				//AEnc first
				foreach(Nonce b in NonceList){
					foreach(AEnc key in AEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Constant b in ConstantList){
					foreach(AEnc key in AEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true )&&
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SKey b in SKeyList){
					foreach(AEnc key in AEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PKey b in PKeyList){
					foreach(AEnc key in AEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(AEnc b in AEncList){
					foreach(AEnc key in AEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SEnc b in SEncList){
					foreach(AEnc key in AEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PEnc b in PEncList){
					foreach(AEnc key in AEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Pair b in PairList){
					foreach(AEnc key in AEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Hash b in HashList){
					foreach(AEnc key in AEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Sign b in SignList){
					foreach(AEnc key in AEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true)&&
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Commit b in CommitList){
					foreach(AEnc key in AEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getfirst ())).AEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				//SEnc first
				foreach(Nonce b in NonceList){
					foreach(SEnc key in SEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Constant b in ConstantList){
					foreach(SEnc key in SEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true )&&
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SKey b in SKeyList){
					foreach(SEnc key in SEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PKey b in PKeyList){
					foreach(SEnc key in SEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(AEnc b in AEncList){
					foreach(SEnc key in SEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SEnc b in SEncList){
					foreach(SEnc key in SEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PEnc b in PEncList){
					foreach(SEnc key in SEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Pair b in PairList){
					foreach(SEnc key in SEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Hash b in HashList){
					foreach(SEnc key in SEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Sign b in SignList){
					foreach(SEnc key in SEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true)&&
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Commit b in CommitList){
					foreach(SEnc key in SEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getfirst ())).SEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				//PEnc first
				foreach(Nonce b in NonceList){
					foreach(PEnc key in PEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Constant b in ConstantList){
					foreach(PEnc key in PEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true )&&
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SKey b in SKeyList){
					foreach(PEnc key in PEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PKey b in PKeyList){
					foreach(PEnc key in PEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(AEnc b in AEncList){
					foreach(PEnc key in PEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SEnc b in SEncList){
					foreach(PEnc key in PEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PEnc b in PEncList){
					foreach(PEnc key in PEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Pair b in PairList){
					foreach(PEnc key in PEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Hash b in HashList){
					foreach(PEnc key in PEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Sign b in SignList){
					foreach(PEnc key in PEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true)&&
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Commit b in CommitList){
					foreach(PEnc key in PEncList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getfirst ())).PEncequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				//Pair first
				foreach(Nonce b in NonceList){
					foreach(Pair key in PairList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Constant b in ConstantList){
					foreach(Pair key in PairList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true )&&
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SKey b in SKeyList){
					foreach(Pair key in PairList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PKey b in PKeyList){
					foreach(Pair key in PairList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(AEnc b in AEncList){
					foreach(Pair key in PairList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SEnc b in SEncList){
					foreach(Pair key in PairList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PEnc b in PEncList){
					foreach(Pair key in PairList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Pair b in PairList){
					foreach(Pair key in PairList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Hash b in HashList){
					foreach(Pair key in PairList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Sign b in SignList){
					foreach(Pair key in PairList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true)&&
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Commit b in CommitList){
					foreach(Pair key in PairList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getfirst ())).Pairequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				//Hash first
				foreach(Nonce b in NonceList){
					foreach(Hash key in HashList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Constant b in ConstantList){
					foreach(Hash key in HashList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true )&&
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SKey b in SKeyList){
					foreach(Hash key in HashList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PKey b in PKeyList){
					foreach(Hash key in HashList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(AEnc b in AEncList){
					foreach(Hash key in HashList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SEnc b in SEncList){
					foreach(Hash key in HashList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PEnc b in PEncList){
					foreach(Hash key in HashList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Pair b in PairList){
					foreach(Hash key in HashList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Hash b in HashList){
					foreach(Hash key in HashList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Sign b in SignList){
					foreach(Hash key in HashList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true)&&
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Commit b in CommitList){
					foreach(Hash key in HashList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getfirst ())).Hashequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				//Sign first
				foreach(Nonce b in NonceList){
					foreach(Sign key in SignList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Constant b in ConstantList){
					foreach(Sign key in SignList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true )&&
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SKey b in SKeyList){
					foreach(Sign key in SignList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PKey b in PKeyList){
					foreach(Sign key in SignList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(AEnc b in AEncList){
					foreach(Sign key in SignList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SEnc b in SEncList){
					foreach(Sign key in SignList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PEnc b in PEncList){
					foreach(Sign key in SignList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Pair b in PairList){
					foreach(Sign key in SignList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Hash b in HashList){
					foreach(Sign key in SignList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Sign b in SignList){
					foreach(Sign key in SignList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true)&&
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Commit b in CommitList){
					foreach(Sign key in SignList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getfirst ())).Signequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				//Commit first
				foreach(Nonce b in NonceList){
					foreach(Commit key in CommitList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsNonce()==true&&((Nonce)(object)(((Pair)(object)gdb).getsecond ())).Nonceequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Constant b in ConstantList){
					foreach(Commit key in CommitList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true )&& 
							(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true )&&
								(((Pair)(object)gdb).getsecond ().IsConstant()==true&&((Constant)(object)(((Pair)(object)gdb).getsecond ())).Constantequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SKey b in SKeyList){
					foreach(Commit key in CommitList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSKey()==true&&((SKey)(object)(((Pair)(object)gdb).getsecond ())).SKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PKey b in PKeyList){
					foreach(Commit key in CommitList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPKey()==true&&((PKey)(object)(((Pair)(object)gdb).getsecond ())).PKeyequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(AEnc b in AEncList){
					foreach(Commit key in CommitList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsAEnc()==true&&((AEnc)(object)(((Pair)(object)gdb).getsecond ())).AEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(SEnc b in SEncList){
					foreach(Commit key in CommitList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsSEnc()==true&&((SEnc)(object)(((Pair)(object)gdb).getsecond ())).SEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(PEnc b in PEncList){
					foreach(Commit key in CommitList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPEnc()==true&&((PEnc)(object)(((Pair)(object)gdb).getsecond ())).PEncequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Pair b in PairList){
					foreach(Commit key in CommitList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsPair()==true&&((Pair)(object)(((Pair)(object)gdb).getsecond ())).Pairequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Hash b in HashList){
					foreach(Commit key in CommitList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsHash()==true&&((Hash)(object)(((Pair)(object)gdb).getsecond ())).Hashequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Sign b in SignList){
					foreach(Commit key in CommitList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true)&&
								(((Pair)(object)gdb).getsecond ().IsSign()==true&&((Sign)(object)(((Pair)(object)gdb).getsecond ())).Signequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				foreach(Commit b in CommitList){
					foreach(Commit key in CommitList)
					{
						if ((targetsub.Exists (gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
							(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))||
							subterms.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) && 
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true)))))
							&&!PairList.Exists(gdb=>(gdb.IsPair()==true && ((((Pair)(object)gdb).getfirst ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getfirst ())).Commitequal (key)==true) &&
								(((Pair)(object)gdb).getsecond ().IsCommit()==true&&((Commit)(object)(((Pair)(object)gdb).getsecond ())).Commitequal (b)==true))))) {
							Pair pair = new Pair (key, b);
							inf.Add (pair);
							changed = true;
						}
					}
				}
				//rule 12:Hash
				foreach(Nonce b in NonceList){
						if ((targetsub.Exists (gdb=>(gdb.IsHash()==true &&(((Hash)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Hash)(object)gdb).getplaintext ())).Nonceequal (b)==true)))||
							subterms.Exists(gdb=>(gdb.IsHash()==true && (((Hash)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Hash)(object)gdb).getplaintext ())).Nonceequal (b)==true))))
							&&!HashList.Exists(gdb=>(gdb.IsHash()==true && (((Hash)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Hash)(object)gdb).getplaintext ())).Nonceequal (b)==true)))) {
							Hash hash = new Hash (b);
							inf.Add (hash);
							changed = true;
						}

				}
				foreach(Constant b in ConstantList){
						if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
							(((Hash)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Hash)(object)gdb).getplaintext ())).Constantequal (b)==true)))||
							subterms.Exists(gdb=>(gdb.IsHash()==true &&  
								(((Hash)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Hash)(object)gdb).getplaintext ())).Constantequal (b)==true))))
							&&!HashList.Exists(gdb=>(gdb.IsHash()==true &&
								(((Hash)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Hash)(object)gdb).getplaintext ())).Constantequal (b)==true)))) {
							Hash hash = new Hash (b);
							inf.Add (hash);
							changed = true;
						}
				}
				foreach(SKey b in SKeyList){
						if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
							(((Hash)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Hash)(object)gdb).getplaintext ())).SKeyequal (b)==true)))||
							subterms.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Hash)(object)gdb).getplaintext ())).SKeyequal (b)==true))))
							&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Hash)(object)gdb).getplaintext ())).SKeyequal (b)==true)))) {
							Hash hash = new Hash (b);
							inf.Add (hash);
							changed = true;
						}
				}
				foreach(PKey b in PKeyList){
					if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
							(((Hash)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Hash)(object)gdb).getplaintext ())).PKeyequal (b)==true)))||
							subterms.Exists(gdb=>(gdb.IsHash()==true &&
								(((Hash)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Hash)(object)gdb).getplaintext ())).PKeyequal (b)==true))))
							&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Hash)(object)gdb).getplaintext ())).PKeyequal (b)==true)))) {
							Hash hash = new Hash (b);
							inf.Add (hash);
							changed = true;
						}
				}
				foreach(AEnc b in AEncList){
					if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
							(((Hash)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Hash)(object)gdb).getplaintext ())).AEncequal (b)==true)))||
							subterms.Exists(gdb=>(gdb.IsHash()==true &&
								(((Hash)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Hash)(object)gdb).getplaintext ())).AEncequal (b)==true))))
							&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Hash)(object)gdb).getplaintext ())).AEncequal (b)==true)))) {
							Hash hash = new Hash (b);
							inf.Add (hash);
							changed = true;
						}
				}
				foreach(SEnc b in SEncList){
					if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
							(((Hash)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Hash)(object)gdb).getplaintext ())).SEncequal (b)==true)))||
							subterms.Exists(gdb=>(gdb.IsHash()==true &&  
								(((Hash)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Hash)(object)gdb).getplaintext ())).SEncequal (b)==true))))
							&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Hash)(object)gdb).getplaintext ())).SEncequal (b)==true)))) {
							Hash hash = new Hash (b);
							inf.Add (hash);
							changed = true;
						}
				}
				foreach(PEnc b in PEncList){
					if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
							(((Hash)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Hash)(object)gdb).getplaintext ())).PEncequal (b)==true)))||
							subterms.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Hash)(object)gdb).getplaintext ())).PEncequal (b)==true))))
							&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Hash)(object)gdb).getplaintext ())).PEncequal (b)==true)))) {
							Hash hash = new Hash (b);
							inf.Add (hash);
							changed = true;
						}
				}
				foreach(Pair b in PairList){
					if ((targetsub.Exists (gdb=>(gdb.IsHash()==true &&
							(((Hash)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Hash)(object)gdb).getplaintext ())).Pairequal (b)==true)))||
							subterms.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Hash)(object)gdb).getplaintext ())).Pairequal (b)==true))))
							&&!HashList.Exists(gdb=>(gdb.IsHash()==true &&
								(((Hash)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Hash)(object)gdb).getplaintext ())).Pairequal (b)==true)))) {
							Hash hash = new Hash (b);
							inf.Add (hash);
							changed = true;
						}
				}
				foreach(Hash b in HashList){
					if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
							(((Hash)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Hash)(object)gdb).getplaintext ())).Hashequal (b)==true)))||
							subterms.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Hash)(object)gdb).getplaintext ())).Hashequal (b)==true))))
							&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Hash)(object)gdb).getplaintext ())).Hashequal (b)==true)))) {
							Hash hash = new Hash (b);
							inf.Add (hash);
							changed = true;
						}
				}
				foreach(Sign b in SignList){
					if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
							(((Hash)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Hash)(object)gdb).getplaintext ())).Signequal (b)==true)))||
							subterms.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Hash)(object)gdb).getplaintext ())).Signequal (b)==true))))
							&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Hash)(object)gdb).getplaintext ())).Signequal (b)==true)))) {
							Hash hash = new Hash (b);
							inf.Add (hash);
							changed = true;
						}
				}
				foreach(Commit b in CommitList){
					if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
							(((Hash)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Hash)(object)gdb).getplaintext ())).Commitequal (b)==true)))||
							subterms.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Hash)(object)gdb).getplaintext ())).Commitequal (b)==true))))
							&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
								(((Hash)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Hash)(object)gdb).getplaintext ())).Commitequal (b)==true)))) {
							Hash hash = new Hash (b);
							inf.Add (hash);
							changed = true;
						}
				}
				//rule 13:Sign
				foreach(Nonce b in NonceList){
					foreach(SKey key in SKeyList)
					{
						infNonceSKeyRule13 (b, key);
					}
				}
				foreach(Constant b in ConstantList){
					foreach(SKey key in SKeyList)
					{
						infConstantSKeyRule13 (b, key);
					}
				}
				foreach(SKey b in SKeyList){
					foreach(SKey key in SKeyList)
					{
						infSKeySKeyRule13 (b, key);
					}
				}
				foreach(PKey b in PKeyList){
					foreach(SKey key in SKeyList)
					{
						infPKeySKeyRule13 (b, key);
					}
				}
				foreach(AEnc b in AEncList){
					foreach(SKey key in SKeyList)
					{
						infAEncSKeyRule13 (b, key);
					}
				}
				foreach(SEnc b in SEncList){
					foreach(SKey key in SKeyList)
					{
					infSEncSKeyRule13 (b, key);
					}
				}
				foreach(PEnc b in PEncList){
					foreach(SKey key in SKeyList)
					{
						infPEncSKeyRule13 (b, key);
					}
				}
				foreach(Pair b in PairList){
					foreach(SKey key in SKeyList)
					{
						infPairSKeyRule13 (b, key);
					}
				}
				foreach(Hash b in HashList){
					foreach(SKey key in SKeyList)
					{
						infHashSKeyRule13 (b, key);
					}
				}
				foreach(Sign b in SignList){
					foreach(SKey key in SKeyList)
					{
						infSignSKeyRule13 (b, key);
					}
				}
				foreach(Commit b in CommitList){
					foreach(SKey key in SKeyList)
					{
						infCommitSKeyRule13 (b, key);
					}
				}
				//rule 14: Commit
				foreach(Nonce b in NonceList){
					foreach(Nonce key in NonceList)
					{
						infNonceNonceRule14 (b, key);
					}
				}
				foreach(Constant b in ConstantList){
					foreach(Nonce key in NonceList)
					{
						infConstantNonceRule14 (b, key);
					}
				}
				foreach(SKey b in SKeyList){
					foreach(Nonce key in NonceList)
					{
						infSKeyNonceRule14 (b, key);
					}
				}
				foreach(PKey b in PKeyList){
					foreach(Nonce key in NonceList)
					{
						infPKeyNonceRule14 (b, key);
					}
				}
				foreach(AEnc b in AEncList){
					foreach(Nonce key in NonceList)
					{
						infAEncNonceRule14 (b, key);
					}
				}
				foreach(SEnc b in SEncList){
					foreach(Nonce key in NonceList)
					{
						infSEncNonceRule14 (b, key);
					}
				}
				foreach(PEnc b in PEncList){
					foreach(Nonce key in NonceList)
					{
						infPEncNonceRule14 (b, key);
					}
				}
				foreach(Pair b in PairList){
					foreach(Nonce key in NonceList)
					{
						infPairNonceRule14 (b, key);
					}
				}
				foreach(Hash b in HashList){
					foreach(Nonce key in NonceList)
					{
						infHashNonceRule14 (b, key);
					}
				}
				foreach(Sign b in SignList){
					foreach(Nonce key in NonceList)
					{
						infSignNonceRule14 (b, key);
					}
				}
				foreach(Commit b in CommitList){
					foreach(Nonce key in NonceList)
					{
						infCommitNonceRule14 (b, key);
					}
				}
				if (changed == true) {

					//List<Unitype> te = new List<Unitype> ();
					//List<SKey> SKeyinf = new List<SKey> ();
					te = inf.FindAll (delegate(Unitype gdb) {
						return gdb is SKey;
					});
					if(te.Count!=0){
						for (int a = 0; a <te.Count; a++) {
							SKeyinf.Add((SKey)(object)te [a]);
						}
						te.Clear ();}
					
					//List<PKey> PKeyinf = new List<PKey> ();
					te = inf.FindAll (delegate(Unitype gdb) {
						return gdb is PKey;
					});  
					if(te.Count!=0){
						for (int a = 0; a<te.Count; a++) {
							PKeyinf.Add((PKey)(object)te [a]);
					}
						te.Clear ();}
					//List<AEnc> AEncinf = new List<AEnc> ();
					te = inf.FindAll (delegate(Unitype gdb) {
						return gdb is AEnc;
					});
					if(te.Count!=0){
					for (int a = 0; a<te.Count; a++) {
						AEncinf.Add((AEnc)(object)te [a]);
					}
						te.Clear ();}
					//List<SEnc> SEncinf = new List<SEnc> ();
					te = inf.FindAll (delegate(Unitype gdb) {
						return gdb is SEnc;
					});
					if(te.Count!=0){
					for (int a = 0; a<te.Count; a++) {
						SEncinf.Add((SEnc)(object)te [a]);
					}
						te.Clear ();}
					//List<PEnc> PEncinf = new List<PEnc> ();
					te = inf.FindAll (delegate(Unitype gdb) {
						return gdb is PEnc;
					});
					if(te.Count!=0){
					for (int a = 0; a<te.Count; a++) {
						PEncinf.Add((PEnc)(object)te [a]);
					}
						te.Clear ();}
					//List<Pair> Pairinf = new List<Pair> ();
					te = inf.FindAll (delegate(Unitype gdb) {
						return gdb is Pair;
					});
					if(te.Count!=0){
					for (int a = 0; a<te.Count; a++) {
						Pairinf.Add((Pair)(object)te [a]);
					}
						te.Clear ();}
					//List<Nonce> Nonceinf = new List<Nonce> ();
					te = inf.FindAll (delegate(Unitype gdb) {
						return gdb is Nonce;
					});
					if(te.Count!=0){
					for (int a = 0; a<te.Count; a++) {
						Nonceinf.Add((Nonce)(object)te [a]);
					}
						te.Clear ();}
					//List<Constant> Constantinf = new List<Constant> ();
					te = inf.FindAll (delegate(Unitype gdb) {
						return gdb is Constant;
					});
					if(te.Count!=0){
					for (int a = 0; a<te.Count; a++) {
						Constantinf.Add((Constant)(object)te [a]);
					}
						te.Clear ();}
					//List<Commit> Commitinf = new List<Commit> ();
					te = inf.FindAll (delegate(Unitype gdb) {
						return gdb is Commit;
					});
					if(te.Count!=0){
					for (int a = 0; a<te.Count; a++) {
						Commitinf.Add((Commit)(object)te [a]);
					}
						te.Clear ();}
					//List<Hash> Hashinf = new List<Hash> ();
					te = inf.FindAll (delegate(Unitype gdb) {
						return gdb is Hash;
					});
					if(te.Count!=0){
					for (int a = 0; a<te.Count; a++) {
						Hashinf.Add((Hash)(object)te [a]);
					}
						te.Clear ();}
					//List<Sign> Signinf = new List<Sign> ();
					te = inf.FindAll (delegate(Unitype gdb) {
						return gdb is Sign;
					});
					if(te.Count!=0){
					for (int a = 0; a<te.Count; a++) {
						Signinf.Add((Sign)(object)te [a]);
					}
						te.Clear ();}
					//List<Unitype> dinf = new List<Unitype> ();
							
					//rule 1:
					foreach (AEnc ciphertext in AEncList) {
						foreach (SKey key in SKeyinf) {
							dinfAEncSKey (ciphertext, key);
						}
					}
					foreach (AEnc ciphertext in AEncinf) {
						foreach (SKey key in SKeyList) {
							dinfAEncSKey (ciphertext, key);
						}
					}
					foreach (AEnc ciphertext in AEncinf) {
						foreach (SKey key in SKeyinf) {
							dinfAEncSKey (ciphertext, key);
						}
					}
					//rule 2:
					foreach (PEnc ciphertext in PEncList) { 
						foreach (SKey key in SKeyinf) {
							dinfPEncSKey (ciphertext, key);
						}
					}
					foreach (PEnc ciphertext in PEncinf) { 
						foreach (SKey key in SKeyList) {
							dinfPEncSKey (ciphertext, key);
						}
					}
					foreach (PEnc ciphertext in PEncinf) { 
						foreach (SKey key in SKeyinf) {
							dinfPEncSKey (ciphertext, key);
						}
					}
					//rule 3:
					foreach (SEnc ciphertext in SEncList) { 
						foreach (SKey key in SKeyinf) {
							dinfSEncSKey (ciphertext, key);
						}
					}
					foreach (SEnc ciphertext in SEncinf) { 
						foreach (SKey key in SKeyList) {
							dinfSEncSKey (ciphertext, key);
						}
					}
					foreach (SEnc ciphertext in SEncinf) { 
						foreach (SKey key in SKeyinf) {
							dinfSEncSKey (ciphertext, key);
						}
					}
					//rule 4:
					foreach (Pair p in Pairinf) {
						dinfPair (p);
					}
					//rule 5:
					foreach (Sign ciphertext in SignList) {
						foreach (PKey key in PKeyinf) {
							dinfSignPKey (ciphertext, key);
						}
					}
					foreach (Sign ciphertext in Signinf) {
						foreach (PKey key in PKeyList) {
							dinfSignPKey (ciphertext, key);
						}
					}
					foreach (Sign ciphertext in Signinf) {
						foreach (PKey key in PKeyinf) {
							dinfSignPKey (ciphertext, key);
						}
					}
					//rule 6:
					foreach (Commit ciphertext in CommitList) {
						foreach (Nonce key in Nonceinf) {
							dinfCommitNonce (ciphertext, key);
						}
					}
					foreach (Commit ciphertext in Commitinf) {
						foreach (Nonce key in NonceList) {
							dinfCommitNonce (ciphertext, key);
						}
					}
					foreach (Commit ciphertext in Commitinf) {
						foreach (Nonce key in Nonceinf) {
							dinfCommitNonce (ciphertext, key);
						}
					}
					//rule 7:
					foreach (SKey key in SKeyinf) {
						dinfSKey (key);
					}
					//rule 8:
					foreach (Nonce b in NonceList) {
						foreach (PKey key in PKeyinf) {
							dinfNoncePKey (b, key);
						}
					}
					foreach (Constant b in ConstantList) {
						foreach (PKey key in PKeyinf) {
							dinfConstantPKey (b, key);
						}
					}
					foreach (SKey b in SKeyList) {
						foreach (PKey key in PKeyinf) {
							dinfSKeyPKey (b, key);
						}
					}
					foreach (PKey b in PKeyList) {
						foreach (PKey key in PKeyinf) {
							dinfPKeyPKey (b, key);
						}
					}
					foreach (AEnc b in AEncList) {
						foreach (PKey key in PKeyinf) {
							dinfAEncPKey (b, key);
						}
					}
					foreach (SEnc b in SEncList) {
						foreach (PKey key in PKeyinf) {
							dinfSEncPKey (b, key);
						}
					}
					foreach (PEnc b in PEncList) {
						foreach (PKey key in PKeyinf) {
							dinfPEncPKey (b, key);
						}
					}
					foreach (Pair b in PairList) {
						foreach (PKey key in PKeyinf) {
							dinfPairPKey (b, key);
						}
					}
					foreach (Hash b in HashList) {
						foreach (PKey key in PKeyinf) {
							dinfHashPKey (b, key);
						}
					}
					foreach (Sign b in SignList) {
						foreach (PKey key in PKeyinf) {
							dinfSignPKeyRule8 (b, key);
						}
					}
					foreach (Commit b in CommitList) {
						foreach (PKey key in PKeyinf) {
							dinfCommitPKey (b, key);
						}
					}
					foreach (Unitype b in inf) {
						foreach (PKey key in PKeyList) {
							dinfUnitypePKey (b, key);
						}
					}
					foreach (Unitype b in inf) {
						foreach (PKey key in PKeyinf) {
							dinfUnitypePKey (b, key);
						}
					}
					//rule 9:get SEnc
					foreach (Nonce b in NonceList) {
						foreach (SKey key in SKeyinf) {
							dinfNonceSKey (b, key);
						}
					}
					foreach (Constant b in ConstantList) {
						foreach (SKey key in SKeyinf) {
							dinfConstantSKey (b, key);
						}
					}
					foreach (SKey b in SKeyList) {
						foreach (SKey key in SKeyinf) {
							dinfSKeySKey (b, key);
						}
					}
					foreach (PKey b in PKeyList) {
						foreach (SKey key in SKeyinf) {
							dinfPKeySKey (b, key);
						}
					}
					foreach (AEnc b in AEncList) {
						foreach (SKey key in SKeyinf) {
							dinfAEncSKeyRule9 (b, key);
						}
					}
					foreach (SEnc b in SEncList) {
						foreach (SKey key in SKeyinf) {
							dinfSEncSKeyRule9 (b, key);
						}
					}
					foreach (PEnc b in PEncList) {
						foreach (SKey key in SKeyinf) {
							dinfPEncSKeyRule9 (b, key);
						}
					}
					foreach (Pair b in PairList) {
						foreach (SKey key in SKeyinf) {
							dinfPairSKey (b, key);
						}
					}
					foreach (Hash b in HashList) {
						foreach (SKey key in SKeyinf) {
							dinfHashSKey (b, key);
						}
					}
					foreach (Sign b in SignList) {
						foreach (SKey key in SKeyinf) {
							dinfSignSKey (b, key);
						}
					}
					foreach (Commit b in CommitList) {
						foreach (SKey key in SKeyinf) {
							dinfCommitSKey (b, key);
						}
					}
					foreach (Unitype b in inf) {
						foreach (SKey key in SKeyList) {
							dinfUnitypeSKey (b, key);
						}
					}
					foreach (Unitype b in inf) {
						foreach (SKey key in SKeyinf) {
							dinfUnitypeSKey (b, key);
						}
					}
					//rule 10: PEnc
					foreach (Nonce b in NonceList) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyinf) {
								dinfNonceNoncePKey (b, r, key);
							}
						}
					}
					foreach (Constant b in ConstantList) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyinf) {
								dinfConstantNoncePKey (b, r, key);
							}
						}
					}
					foreach (SKey b in SKeyList) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyinf) {
								dinfSKeyNoncePKey (b, r, key);
							}
						}
					}
					foreach (PKey b in PKeyList) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyinf) {
								dinfPKeyNoncePKey (b, r, key);
							}
						}
					}
					foreach (AEnc b in AEncList) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyinf) {
								dinfAEncNoncePKey (b, r, key);
							}
						}
					}
					foreach (SEnc b in SEncList) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyinf) {
								dinfSEncNoncePKey (b, r, key);
							}
						}
					}
					foreach (PEnc b in PEncList) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyinf) {
								dinfPEncNoncePKey (b, r, key);
							}
						}
					}
					foreach (Pair b in PairList) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyinf) {
								dinfPairNoncePKey (b, r, key);
							}
						}
					}
					foreach (Hash b in HashList) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyinf) {
								dinfHashNoncePKey (b, r, key);
							}
						}
					}
					foreach (Sign b in SignList) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyinf) {
								dinfSignNoncePKey (b, r, key);
							}
						}
					}
					foreach (Commit b in CommitList) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyinf) {
								dinfCommitNoncePKey (b, r, key);
							}
						}
					}
					//
					foreach (Nonce b in NonceList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyList) {
								dinfNonceNoncePKey (b, r, key);
							}
						}
					}
					foreach (Constant b in ConstantList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyList) {
								dinfConstantNoncePKey (b, r, key);
							}
						}
					}
					foreach (SKey b in SKeyList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyList) {
								dinfSKeyNoncePKey (b, r, key);
							}
						}
					}
					foreach (PKey b in PKeyList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyList) {
								dinfPKeyNoncePKey (b, r, key);
							}
						}
					}
					foreach (AEnc b in AEncList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyList) {
								dinfAEncNoncePKey (b, r, key);
							}
						}
					}
					foreach (SEnc b in SEncList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyList) {
								dinfSEncNoncePKey (b, r, key);
							}
						}
					}
					foreach (PEnc b in PEncList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyList) {
								dinfPEncNoncePKey (b, r, key);
							}
						}
					}
					foreach (Pair b in PairList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyList) {
								dinfPairNoncePKey (b, r, key);
							}
						}
					}
					foreach (Hash b in HashList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyList) {
								dinfHashNoncePKey (b, r, key);
							}
						}
					}
					foreach (Sign b in SignList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyList) {
								dinfSignNoncePKey (b, r, key);
							}
						}
					}
					foreach (Commit b in CommitList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyList) {
								dinfCommitNoncePKey (b, r, key);
							}
						}
					}
					//
					foreach (Nonce b in NonceList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyinf) {
								dinfNonceNoncePKey (b, r, key);
							}
						}
					}
					foreach (Constant b in ConstantList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyinf) {
								dinfConstantNoncePKey (b, r, key);
							}
						}
					}
					foreach (SKey b in SKeyList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyinf) {
								dinfSKeyNoncePKey (b, r, key);
							}
						}
					}
					foreach (PKey b in PKeyList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyinf) {
								dinfPKeyNoncePKey (b, r, key);
							}
						}
					}
					foreach (AEnc b in AEncList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyinf) {
								dinfAEncNoncePKey (b, r, key);
							}
						}
					}
					foreach (SEnc b in SEncList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyinf) {
								dinfSEncNoncePKey (b, r, key);
							}
						}
					}
					foreach (PEnc b in PEncList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyinf) {
								dinfPEncNoncePKey (b, r, key);
							}
						}
					}
					foreach (Pair b in PairList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyinf) {
								dinfPairNoncePKey (b, r, key);
							}
						}
					}
					foreach (Hash b in HashList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyinf) {
								dinfHashNoncePKey (b, r, key);
							}
						}
					}
					foreach (Sign b in SignList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyinf) {
								dinfSignNoncePKey (b, r, key);
							}
						}
					}
					foreach (Commit b in CommitList) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyinf) {
								dinfCommitNoncePKey (b, r, key);
							}
						}
					}
					foreach (Unitype b in inf) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyinf) {
								dinfUnitypeNoncePKey (b, r, key);
							}
						}
					}
					foreach (Unitype b in inf) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyinf) {
								dinfUnitypeNoncePKey (b, r, key);
							}
						}
					}

					foreach (Unitype b in inf) {
						foreach (Nonce r in Nonceinf) {
							foreach (PKey key in PKeyList) {
								dinfUnitypeNoncePKey (b, r, key);
							}
						}
					}
					foreach (Unitype b in inf) {
						foreach (Nonce r in NonceList) {
							foreach (PKey key in PKeyList) {
								dinfUnitypeNoncePKey (b, r, key);
							}
						}
					}
					//rule 11: Pair
					//<list,inf>
					foreach (Nonce b in NonceList) {
						foreach (Unitype key in inf) {
							dinfNonceUnitype (b, key);
						}
					}
					foreach (Constant b in ConstantList) {
						foreach (Unitype key in inf) {
							dinfConstantUnitype (b, key);
						}
					}
					foreach (SKey b in SKeyList) {
						foreach (Unitype key in inf) {
							dinfSKeyUnitype (b, key);
						}
					}
					foreach (PKey b in PKeyList) {
						foreach (Unitype key in inf) {
							dinfPKeyUnitype (b, key);
						}
					}
					foreach (AEnc b in AEncList) {
						foreach (Unitype key in inf) {
							dinfAEncUnitype (b, key);
						}
					}
					foreach (SEnc b in SEncList) {
						foreach (Unitype key in inf) {
							dinfSEncUnitype (b, key);
						}
					}
					foreach (PEnc b in PEncList) {
						foreach (Unitype key in inf) {
							dinfPEncUnitype (b, key);
						}
					}
					foreach (Pair b in PairList) {
						foreach (Unitype key in inf) {
							dinfPairUnitype (b, key);
						}
					}
					foreach (Hash b in HashList) {
						foreach (Unitype key in inf) {
							dinfHashUnitype (b, key);
						}
					}
					foreach (Sign b in SignList) {
						foreach (Unitype key in inf) {
							dinfSignUnitype (b, key);
						}
					}
					foreach (Commit b in CommitList) {
						foreach (Unitype key in inf) {
							dinfCommitUnitype (b, key);
						}
					}
					//<inf,list>
					foreach (Nonce b in NonceList) {
						foreach (Unitype key in inf) {
							dinfNonceUnitype (b, key);
						}
					}
					foreach (Constant b in ConstantList) {
						foreach (Unitype key in inf) {
							dinfConstantUnitype (b, key);
						}
					}
					foreach (SKey b in SKeyList) {
						foreach (Unitype key in inf) {
							dinfSKeyUnitype (b, key);
						}
					}
					foreach (PKey b in PKeyList) {
						foreach (Unitype key in inf) {
							dinfPKeyUnitype (b, key);
						}
					}
					foreach (AEnc b in AEncList) {
						foreach (Unitype key in inf) {
							dinfAEncUnitype (b, key);
						}
					}
					foreach (SEnc b in SEncList) {
						foreach (Unitype key in inf) {
							dinfSEncUnitype (b, key);
						}
					}
					foreach (PEnc b in PEncList) {
						foreach (Unitype key in inf) {
							dinfPEncUnitype (b, key);
						}
					}
					foreach (Pair b in PairList) {
						foreach (Unitype key in inf) {
							dinfPairUnitype (b, key);
						}
					}
					foreach (Hash b in HashList) {
						foreach (Unitype key in inf) {
							dinfHashUnitype (b, key);
						}
					}
					foreach (Sign b in SignList) {
						foreach (Unitype key in inf) {
							dinfSignUnitype (b, key);
						}
					}
					foreach (Commit b in CommitList) {
						foreach (Unitype key in inf) {
							dinfCommitUnitype (b, key);
						}
					}
					//<inf, inf>
					foreach (Unitype b in inf) {
						foreach (Unitype key in inf) {
							if ((targetsub.Exists (gdb => (gdb.IsPair () == true && ((((Pair)(object)gdb).getfirst ()).equal (key) == true &&
							    ((((Pair)(object)gdb).getsecond ())).equal (b) == true))) ||
							    subterms.Exists (gdb => (gdb.IsPair () == true && ((((Pair)(object)gdb).getfirst ()).equal (key) == true &&
							    ((((Pair)(object)gdb).getsecond ())).equal (b) == true))))
							    && !PairList.Exists (gdb => (gdb.IsPair () == true && ((((Pair)(object)gdb).getfirst ()).equal (key) == true &&
							    ((((Pair)(object)gdb).getsecond ())).equal (b) == true)))) {
								if (!Pairinf.Exists (gdb => (gdb.IsPair () == true && ((((Pair)(object)gdb).getfirst ()).equal (key) == true &&
								   ((((Pair)(object)gdb).getsecond ())).equal (b) == true)))) {
									Pair pair = new Pair (key, b);
									inf.Add (pair);
									dinf.Add (pair);
									changed = true;
								}
							}
						}
					}
					//rule 12:Hash
					foreach (Unitype b in inf) {
						if ((targetsub.Exists (gdb => (gdb.IsHash () == true && (((Hash)(object)gdb).getplaintext ()).equal (b) == true)) ||
						    subterms.Exists (gdb => (gdb.IsHash () == true && (((Hash)(object)gdb).getplaintext ()).equal (b) == true)))
						    && !HashList.Exists (gdb => (gdb.IsHash () == true && (((Hash)(object)gdb).getplaintext ()).equal (b) == true))) {
							if (!Hashinf.Exists (gdb => (gdb.IsHash () == true && (((Hash)(object)gdb).getplaintext ()).equal (b) == true))) {
								Hash hash = new Hash (b);
								inf.Add (hash);
								dinf.Add (hash);
								changed = true;
							}
						}

					}
					//rule 13:Sign
					foreach (Nonce b in NonceList) {
						foreach (SKey key in SKeyinf) {
							dinfNonceSKeyRule13 (b, key);
						}
					}
					foreach (Constant b in ConstantList) {
						foreach (SKey key in SKeyinf) {
							dinfConstantSKeyRule13 (b, key);
						}
					}
					foreach (SKey b in SKeyList) {
						foreach (SKey key in SKeyinf) {
							dinfSKeySKeyRule13 (b, key);
						}
					}
					foreach (PKey b in PKeyList) {
						foreach (SKey key in SKeyinf) {
							dinfPKeySKeyRule13 (b, key);
						}
					}
					foreach (AEnc b in AEncList) {
						foreach (SKey key in SKeyinf) {
							dinfAEncSKeyRule13 (b, key);
						}
					}
					foreach (SEnc b in SEncList) {
						foreach (SKey key in SKeyinf) {
							dinfSEncSKeyRule13 (b, key);
						}
					}
					foreach (PEnc b in PEncList) {
						foreach (SKey key in SKeyinf) {
							dinfPEncSKeyRule13 (b, key);
						}
					}
					foreach (Pair b in PairList) {
						foreach (SKey key in SKeyinf) {
							dinfPairSKeyRule13 (b, key);
						}
					}
					foreach (Hash b in HashList) {
						foreach (SKey key in SKeyinf) {
							dinfHashSKeyRule13 (b, key);
						}
					}
					foreach (Sign b in SignList) {
						foreach (SKey key in SKeyinf) {
							dinfSignSKeyRule13 (b, key);
						}
					}
					foreach (Commit b in CommitList) {
						foreach (SKey key in SKeyinf) {
							dinfCommitSKeyRule13 (b, key);
						}
					}
					foreach (Unitype b in inf) {
						foreach (SKey key in SKeyList) {
							dinfUnitypeSKeyRule13 (b, key);
						}
					}
					foreach (Unitype b in inf) {
						foreach (SKey key in SKeyinf) {
							dinfUnitypeSKeyRule13 (b, key);
						}
					}
					//rule 14: Commit
					foreach (Nonce b in NonceList) {
						foreach (Nonce key in Nonceinf) {
							dinfNonceNonceRule14 (b, key);
						}
					}
					foreach (Constant b in ConstantList) {
						foreach (Nonce key in Nonceinf) {
							dinfConstantNonceRule14 (b, key);
						}
					}
					foreach (SKey b in SKeyList) {
						foreach (Nonce key in Nonceinf) {
							dinfSKeyNonceRule14 (b, key);
						}
					}
					foreach (PKey b in PKeyList) {
						foreach (Nonce key in Nonceinf) {
							dinfPKeyNonceRule14 (b, key);
						}
					}
					foreach (AEnc b in AEncList) {
						foreach (Nonce key in Nonceinf) {
							dinfAEncNonceRule14 (b, key);
						}
					}
					foreach (SEnc b in SEncList) {
						foreach (Nonce key in Nonceinf) {
							dinfSEncNonceRule14 (b, key);
						}
					}
					foreach (PEnc b in PEncList) {
						foreach (Nonce key in Nonceinf) {
							dinfPEncNonceRule14 (b, key);
						}
					}
					foreach (Pair b in PairList) {
						foreach (Nonce key in Nonceinf) {
							dinfPairNonceRule14 (b, key);
						}
					}
					foreach (Hash b in HashList) {
						foreach (Nonce key in Nonceinf) {
							dinfHashNonceRule14 (b, key);
						}
					}
					foreach (Sign b in SignList) {
						foreach (Nonce key in Nonceinf) {
							dinfSignNonceRule14 (b, key);
						}
					}
					foreach (Commit b in CommitList) {
						foreach (Nonce key in Nonceinf) {
							dinfCommitNonceRule14 (b, key);
						}
					}
					foreach (Unitype b in inf) {
						foreach (Nonce key in NonceList) {
							dinfUnitypeNonceRule14 (b, key);
						}
					}
					foreach (Unitype b in inf) {
						foreach (Nonce key in Nonceinf) {
							dinfUnitypeNonceRule14 (b, key);
						}
					}
				

					do {if(dinf.Count!=0){
						//List<SKey> nSKeyinf = new List<SKey> ();
						te=dinf.FindAll (delegate(Unitype gdb) {
							return gdb is SKey;
						});
					if(te.Count!=0){
			            for(int a = 0; a<te.Count; a++){
						nSKeyinf.Add((SKey)(object)te[a]);
						}
						te.Clear ();}
							//List<PKey>	nPKeyinf=new List<PKey>();
						te=dinf.FindAll (delegate(Unitype gdb) {
							return gdb is PKey;
						});  
					if(te.Count!=0){
					    for(int a = 0; a<te.Count; a++){
						nPKeyinf.Add((PKey)(object)te[a]);
						}
						te.Clear ();}
							//List<AEnc> nAEncinf=new List<AEnc>();
						te=dinf.FindAll (delegate(Unitype gdb) {
							return gdb is AEnc;
						});
					if(te.Count!=0){
					    for(int a = 0; a<te.Count; a++){
						nAEncinf.Add((AEnc)(object)te[a]);
						}
						te.Clear ();}
							//List<SEnc> nSEncinf=new List<SEnc>();
						te=dinf.FindAll (delegate(Unitype gdb) {
							return gdb is SEnc;
						});
					if(te.Count!=0){
					    for(int a = 0; a<te.Count; a++){
						    nSEncinf.Add((SEnc)(object)te[a]);
						}
						te.Clear ();}
							//List<PEnc> nPEncinf=new List<PEnc>();
						te=dinf.FindAll (delegate(Unitype gdb) {
							return gdb is PEnc;
						});
					if(te.Count!=0){
					    for(int a = 0; a<te.Count; a++){
						    nPEncinf.Add((PEnc)(object)te[a]);
						}
						te.Clear ();}
							//List<Pair> nPairinf=new List<Pair>();
						te=dinf.FindAll (delegate(Unitype gdb) {
							return gdb is Pair;
						});
					if(te.Count!=0){
					    for(int a = 0; a<te.Count; a++){
						    nPairinf.Add((Pair)(object)te[a]);
						}
						te.Clear();}
							//List<Nonce> nNonceinf=new List<Nonce>();
						te=dinf.FindAll (delegate(Unitype gdb) {
							return gdb is Nonce;
						});
					if(te.Count!=0){
					    for(int a = 0; a<te.Count; a++){
						    nNonceinf.Add((Nonce)(object)te[a]);
						}
						te.Clear();}
							//List<Constant> nConstantinf=new List<Constant>();
						te=dinf.FindAll (delegate(Unitype gdb) {
							return gdb is Constant;
						});
					if(te.Count!=0){
					    for(int a = 0; a<te.Count; a++){
						    nConstantinf.Add((Constant)(object)te[a]);
						}
						te.Clear();}
							//List<Commit> nCommitinf=new List<Commit>();
						te=dinf.FindAll (delegate(Unitype gdb) {
							return gdb is Commit;
						});
					if(te.Count!=0){
					    for(int a = 0; a<te.Count; a++){
						    nCommitinf.Add((Commit)(object)te[a]);
						}
						te.Clear();}
							//List<Hash> nHashinf=new List<Hash>();
						te=dinf.FindAll (delegate(Unitype gdb) {
							return gdb is Hash;
						});
					if(te.Count!=0){
					    for(int a = 0; a<te.Count; a++){
						    nHashinf.Add((Hash)(object)te[a]);
						}
						te.Clear();}
							//List<Sign> nSigninf=new List<Sign>();
						te=dinf.FindAll (delegate(Unitype gdb) {
							return gdb is Sign;
						});
					if(te.Count!=0){
					    for(int a = 0; a<te.Count; a++){
						    nSigninf.Add((Sign)(object)te[a]);
						}
						te.Clear();}
							dinf.Clear();
						changed = false;
						if(list.Count!=0)
						{//apply rules to list and *dinf
							//rule 1:
							foreach (AEnc ciphertext in AEncList)
							{
								foreach (SKey key in nSKeyinf)
								{
									dinfAEncSKey (ciphertext, key);
								}
							}
							foreach (AEnc ciphertext in nAEncinf)
							{
								foreach (SKey key in SKeyList)
								{
									dinfAEncSKey (ciphertext, key);
								}
							}
							//rule 2:
							foreach(PEnc ciphertext in PEncList)
							{ 
								foreach (SKey key in nSKeyinf)
								{
									dinfPEncSKey (ciphertext, key);
								}
							}
							foreach(PEnc ciphertext in nPEncinf)
							{ 
								foreach (SKey key in SKeyList)
								{
									dinfPEncSKey (ciphertext, key);
								}
							}
							//rule 3:
							foreach(SEnc ciphertext in SEncList)
							{ 
								foreach (SKey key in nSKeyinf)
								{
									dinfSEncSKey (ciphertext, key);
								}
							}
							foreach(SEnc ciphertext in nSEncinf)
							{ 
								foreach (SKey key in SKeyList)
								{
									dinfSEncSKey (ciphertext, key);
								}
							}
							//rule 4: no need
							//rule 5:
							foreach (Sign ciphertext in SignList) {
								foreach (PKey key in nPKeyinf) {
									dinfSignPKey (ciphertext, key);
								}
							}
							foreach (Sign ciphertext in nSigninf) {
								foreach (PKey key in PKeyList) {
									dinfSignPKey (ciphertext, key);
								}
							}
							//rule 6:
							foreach (Commit ciphertext in CommitList) {
								foreach(Nonce key in nNonceinf){
									dinfCommitNonce (ciphertext, key);
								}
							}
							foreach (Commit ciphertext in nCommitinf) {
								foreach(Nonce key in NonceList){
									dinfCommitNonce (ciphertext, key);
								}
							}
							//rule 7: no need
							//rule 8:
							foreach(Unitype b in list){
								foreach(PKey key in nPKeyinf)
								{
									dinfUnitypePKey (b, key);
								}
							}
							foreach(Nonce b in nNonceinf){
								foreach(PKey key in PKeyList)
								{
									dinfNoncePKey (b, key);
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(PKey key in PKeyList)
								{
									dinfConstantPKey (b, key);
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(PKey key in PKeyList)
								{
									dinfSKeyPKey (b, key);
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(PKey key in PKeyList)
								{
									dinfPKeyPKey (b, key);
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(PKey key in PKeyList)
								{
									dinfAEncPKey (b, key);
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(PKey key in PKeyList)
								{
									dinfSEncPKey (b, key);
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(PKey key in PKeyList)
								{
									dinfPEncPKey (b, key);
								}
							}
							foreach(Pair b in nPairinf){
								foreach(PKey key in PKeyList)
								{
									dinfPairPKey (b, key);
								}
							}
							foreach(Hash b in nHashinf){
								foreach(PKey key in PKeyList)
								{
									dinfHashPKey (b, key);
								}
							}
							foreach(Sign b in nSigninf){
								foreach(PKey key in PKeyList)
								{
									dinfSignPKeyRule8 (b, key);
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(PKey key in PKeyList)
								{
									dinfCommitPKey (b, key);
								}
							}
							//rule 9:get SEnc
							foreach(Unitype b in list){
								foreach(SKey key in nSKeyinf)
								{
									dinfUnitypeSKey (b, key);
								}
							}
							foreach(Nonce b in nNonceinf){
								foreach(SKey key in SKeyList)
								{
									dinfNonceSKey (b, key);
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(SKey key in SKeyList)
								{
									dinfConstantSKey (b, key);
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(SKey key in SKeyList)
								{
									dinfSKeySKey (b, key);
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(SKey key in SKeyList)
								{
									dinfPKeySKey (b, key);
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(SKey key in SKeyList)
								{
									dinfAEncSKeyRule9 (b, key);
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(SKey key in SKeyList)
								{
									dinfSEncSKeyRule9 (b, key);
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(SKey key in SKeyList)
								{
									dinfPEncSKeyRule9 (b, key);
								}
							}
							foreach(Pair b in nPairinf){
								foreach(SKey key in SKeyList)
								{
									dinfPairSKey (b, key);
								}
							}
							foreach(Hash b in nHashinf){
								foreach(SKey key in SKeyList)
								{
									dinfHashSKey (b, key);
								}
							}
							foreach(Sign b in nSigninf){
								foreach(SKey key in SKeyList)
								{
									dinfSignSKey (b, key);
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(SKey key in SKeyList)
								{
									dinfCommitSKey (b, key);
								}
							}

							//rule 10: PEnc
							foreach(Nonce b in nNonceinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyList)
									{
										dinfNonceNoncePKey (b, r, key);
									}
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyList)
									{
										dinfConstantNoncePKey (b, r, key);
									}
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyList)
									{
										dinfSKeyNoncePKey (b, r, key);
									}
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyList)
									{
										dinfPKeyNoncePKey (b, r, key);
									}
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyList)
									{
										dinfAEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyList)
									{
										dinfSEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyList)
									{
										dinfPEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(Pair b in nPairinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyList)
									{
										dinfPairNoncePKey (b, r, key);
									}
								}
							}
							foreach(Hash b in nHashinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyList)
									{
										dinfHashNoncePKey (b, r, key);
									}
								}
							}
							foreach(Sign b in nSigninf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyList)
									{
										dinfSignNoncePKey (b, r, key);
									}
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyList)
									{
										dinfCommitNoncePKey (b, r, key);
									}
								}
							}
							//
							foreach(Nonce b in nNonceinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in nPKeyinf)
									{
										dinfNonceNoncePKey (b, r, key);
									}
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in nPKeyinf)
									{
										dinfConstantNoncePKey (b, r, key);
									}
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in nPKeyinf)
									{
										dinfSKeyNoncePKey (b, r, key);
									}
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in nPKeyinf)
									{
										dinfPKeyNoncePKey (b, r, key);
									}
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in nPKeyinf)
									{
										dinfAEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in nPKeyinf)
									{
										dinfSEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in nPKeyinf)
									{
										dinfPEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(Pair b in nPairinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in nPKeyinf)
									{
										dinfPairNoncePKey (b, r, key);
									}
								}
							}
							foreach(Hash b in nHashinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in nPKeyinf)
									{
										dinfHashNoncePKey (b, r, key);
									}
								}
							}
							foreach(Sign b in nSigninf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in nPKeyinf)
									{
										dinfSignNoncePKey (b, r, key);
									}
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in nPKeyinf)
									{
										dinfCommitNoncePKey (b, r, key);
									}
								}
							}
							//
							foreach(Nonce b in nNonceinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in PKeyList)
									{
										dinfNonceNoncePKey (b, r, key);
									}
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in PKeyList)
									{
										dinfConstantNoncePKey (b, r, key);
									}
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in PKeyList)
									{
										dinfSKeyNoncePKey (b, r, key);
									}
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in PKeyList)
									{
										dinfPKeyNoncePKey (b, r, key);
									}
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in PKeyList)
									{
										dinfAEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in PKeyList)
									{
										dinfSEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in PKeyList)
									{
										dinfPEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(Pair b in nPairinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in PKeyList)
									{
										dinfPairNoncePKey (b, r, key);
									}
								}
							}
							foreach(Hash b in nHashinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in PKeyList)
									{
										dinfHashNoncePKey (b, r, key);
									}
								}
							}
							foreach(Sign b in nSigninf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in PKeyList)
									{
										dinfSignNoncePKey (b, r, key);
									}
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(Nonce r in NonceList){
									foreach(PKey key in PKeyList)
									{
										dinfCommitNoncePKey (b, r, key);
									}
								}
							}
							//
							foreach(Unitype b in list){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfUnitypeNoncePKey (b, r, key);
									}
								}
							}
							foreach(Unitype b in list){
								foreach(Nonce r in NonceList){
									foreach(PKey key in nPKeyinf)
									{
										dinfUnitypeNoncePKey (b, r, key);
									}
								}
							}

							foreach(Unitype b in list){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyList)
									{
										dinfUnitypeNoncePKey (b, r, key);
									}
								}
							}
							//rule 11: Pair
							//<dinf,list>
							foreach(Nonce b in nNonceinf){
								foreach(Unitype key in list)
								{
									dinfNonceUnitype (b, key);
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(Unitype key in list)
								{
									dinfConstantUnitype (b, key);
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(Unitype key in list)
								{
									dinfSKeyUnitype (b, key);
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(Unitype key in list)
								{
									dinfPKeyUnitype (b, key);
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(Unitype key in list)
								{
									dinfAEncUnitype (b, key);
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(Unitype key in list)
								{
									dinfSEncUnitype (b, key);
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(Unitype key in list)
								{
									dinfPEncUnitype (b, key);
								}
							}
							foreach(Pair b in nPairinf){
								foreach(Unitype key in list)
								{
									dinfPairUnitype (b, key);
								}
							}
							foreach(Hash b in nHashinf){
								foreach(Unitype key in list)
								{
									dinfHashUnitype (b, key);
								}
							}
							foreach(Sign b in nSigninf){
								foreach(Unitype key in list)
								{
									dinfSignUnitype (b, key);
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(Unitype key in list)
								{
									dinfCommitUnitype (b, key);
								}
							}
							//<list,dinf>
							foreach(Nonce b in nNonceinf){
								foreach(Unitype key in list)
								{
									dinfNonceUnitype (b, key);
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(Unitype key in list)
								{
									dinfSKeyUnitype (b, key);
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(Unitype key in list)
								{
									dinfPKeyUnitype (b, key);
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(Unitype key in list)
								{
									dinfAEncUnitype (b, key);
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(Unitype key in list)
								{
									dinfSEncUnitype (b, key);
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(Unitype key in list)
								{
									dinfPEncUnitype (b, key);
								}
							}
							foreach(Pair b in nPairinf){
								foreach(Unitype key in list)
								{
									dinfPairUnitype (b, key);
								}
							}
							foreach(Hash b in nHashinf){
								foreach(Unitype key in list)
								{
									dinfHashUnitype (b, key);
								}
							}
							foreach(Sign b in nSigninf){
								foreach(Unitype key in list)
								{
									dinfSignUnitype (b, key);
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(Unitype key in list)
								{
									dinfCommitUnitype (b, key);
								}
							}
							//rule 12:Hash no need
							//rule 13:Sign
							foreach(Nonce b in nNonceinf){
								foreach(SKey key in SKeyList)
								{
									dinfNonceSKeyRule13 (b, key);
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(SKey key in SKeyList)
								{
									dinfConstantSKeyRule13 (b, key);
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(SKey key in SKeyList)
								{
									dinfSKeySKeyRule13 (b, key);
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(SKey key in SKeyList)
								{
									dinfPKeySKeyRule13 (b, key);
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(SKey key in SKeyList)
								{
									dinfAEncSKeyRule13 (b, key);
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(SKey key in SKeyList)
								{
									dinfSEncSKeyRule13 (b, key);
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(SKey key in SKeyList)
								{
									dinfPEncSKeyRule13 (b, key);
								}
							}
							foreach(Pair b in nPairinf){
								foreach(SKey key in SKeyList)
								{
									dinfPairSKeyRule13 (b, key);
								}
							}
							foreach(Hash b in nHashinf){
								foreach(SKey key in SKeyList)
								{
									dinfHashSKeyRule13 (b, key);
								}
							}
							foreach(Sign b in nSigninf){
								foreach(SKey key in SKeyList)
								{
									dinfSignSKeyRule13 (b, key);
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(SKey key in SKeyList)
								{
									dinfCommitSKeyRule13 (b, key);
								}
							}
							foreach(Unitype b in list){
								foreach(SKey key in nSKeyinf)
								{
									dinfUnitypeSKeyRule13 (b, key);
								}
							}
							//rule 14: Commit
							foreach(Nonce b in nNonceinf){
								foreach(Nonce key in NonceList)
								{
									dinfNonceNonceRule14 (b, key);
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(Nonce key in NonceList)
								{
									dinfConstantNonceRule14 (b, key);
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(Nonce key in NonceList)
								{
									dinfSKeyNonceRule14 (b, key);
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(Nonce key in NonceList)
								{
									dinfPKeyNonceRule14 (b, key);
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(Nonce key in NonceList)
								{
									dinfAEncNonceRule14 (b, key);
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(Nonce key in NonceList)
								{
									dinfSEncNonceRule14 (b, key);
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(Nonce key in NonceList)
								{
									dinfPEncNonceRule14 (b, key);
								}
							}
							foreach(Pair b in nPairinf){
								foreach(Nonce key in NonceList)
								{
									dinfPairNonceRule14 (b, key);
								}
							}
							foreach(Hash b in nHashinf){
								foreach(Nonce key in NonceList)
								{
									dinfHashNonceRule14 (b, key);
								}
							}
							foreach(Sign b in nSigninf){
								foreach(Nonce key in NonceList)
								{
									dinfSignNonceRule14 (b, key);
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(Nonce key in NonceList)
								{
									dinfCommitNonceRule14 (b, key);
								}
							}
							foreach(Unitype b in list){
								foreach(Nonce key in nNonceinf)
								{
									dinfUnitypeNonceRule14 (b, key);
								}
							}
						}
						if(inf.Count!=0)
						{//apply rules to inf and *dinf
							//rule 1:
							foreach (AEnc ciphertext in AEncinf)
							{
								foreach (SKey key in nSKeyinf)
								{
									dinfAEncSKey (ciphertext, key);
								}
							}
							foreach (AEnc ciphertext in nAEncinf)
							{
								foreach (SKey key in SKeyinf)
								{
									dinfAEncSKey (ciphertext, key);
								}
							}
							//rule 2:
							foreach(PEnc ciphertext in PEncinf)
							{ 
								foreach (SKey key in nSKeyinf)
								{
									dinfPEncSKey (ciphertext, key);
								}
							}
							foreach(PEnc ciphertext in nPEncinf)
							{ 
								foreach (SKey key in SKeyinf)
								{
									dinfPEncSKey (ciphertext, key);
								}
							}
							//rule 3:
							foreach(SEnc ciphertext in SEncinf)
							{ 
								foreach (SKey key in nSKeyinf)
								{
									dinfSEncSKey (ciphertext, key);
								}
							}
							foreach(SEnc ciphertext in nSEncinf)
							{ 
								foreach (SKey key in SKeyinf)
								{
									dinfSEncSKey (ciphertext, key);
								}
							}
							//rule 4: 
							foreach(Pair p in nPairinf)
							{
								dinfPair (p);
							}
							//rule 5:
							foreach (Sign ciphertext in Signinf) {
								foreach (PKey key in nPKeyinf) {
									dinfSignPKey (ciphertext, key);
								}
							}
							foreach (Sign ciphertext in nSigninf) {
								foreach (PKey key in PKeyinf) {
									dinfSignPKey (ciphertext, key);
								}
							}
							//rule 6:
							foreach (Commit ciphertext in Commitinf) {
								foreach(Nonce key in nNonceinf){
									dinfCommitNonce (ciphertext, key);
								}
							}
							foreach (Commit ciphertext in nCommitinf) {
								foreach(Nonce key in Nonceinf){
									dinfCommitNonce (ciphertext, key);
								}
							}
							//rule 7:
							foreach (SKey key in nSKeyinf) {
								dinfSKey (key);
							}
							//rule 8:
							foreach(Unitype b in inf){
								foreach(PKey key in nPKeyinf)
								{
									dinfUnitypePKey (b, key);
								}
							}
							foreach(Nonce b in nNonceinf){
								foreach(PKey key in PKeyinf)
								{
									dinfNoncePKey (b, key);
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(PKey key in PKeyinf)
								{
									dinfConstantPKey (b, key);
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(PKey key in PKeyinf)
								{
									dinfSKeyPKey (b, key);
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(PKey key in PKeyinf)
								{
									dinfPKeyPKey (b, key);
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(PKey key in PKeyinf)
								{
									dinfAEncPKey (b, key);
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(PKey key in PKeyinf)
								{
									dinfSEncPKey (b, key);
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(PKey key in PKeyinf)
								{
									dinfPEncPKey (b, key);
								}
							}
							foreach(Pair b in nPairinf){
								foreach(PKey key in PKeyinf)
								{
									dinfPairPKey (b, key);
								}
							}
							foreach(Hash b in nHashinf){
								foreach(PKey key in PKeyinf)
								{
									dinfHashPKey (b, key);
								}
							}
							foreach(Sign b in nSigninf){
								foreach(PKey key in PKeyinf)
								{
									dinfSignPKeyRule8 (b, key);
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(PKey key in PKeyinf)
								{
									dinfCommitPKey (b, key);
								}
							}
							//rule 9:get SEnc
							foreach(Unitype b in inf){
								foreach(SKey key in nSKeyinf)
								{
									dinfUnitypeSKey (b, key);
								}
							}
							foreach(Nonce b in nNonceinf){
								foreach(SKey key in SKeyinf)
								{
									dinfNonceSKey (b, key);
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(SKey key in SKeyinf)
								{
									dinfConstantSKey (b, key);
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(SKey key in SKeyinf)
								{
									dinfSKeySKey (b, key);
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(SKey key in SKeyinf)
								{
									dinfPKeySKey (b, key);
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(SKey key in SKeyinf)
								{
									dinfAEncSKeyRule9 (b, key);
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(SKey key in SKeyinf)
								{
									dinfSEncSKeyRule9 (b, key);
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(SKey key in SKeyinf)
								{
									dinfPEncSKeyRule9 (b, key);
								}
							}
							foreach(Pair b in nPairinf){
								foreach(SKey key in SKeyinf)
								{
									dinfPairSKey (b, key);
								}
							}
							foreach(Hash b in nHashinf){
								foreach(SKey key in SKeyinf)
								{
									dinfHashSKey (b, key);
								}
							}
							foreach(Sign b in nSigninf){
								foreach(SKey key in SKeyinf)
								{
									dinfSignSKey (b, key);
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(SKey key in SKeyinf)
								{
									dinfCommitSKey (b, key);
								}
							}

							//rule 10: PEnc
							foreach(Nonce b in nNonceinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfNonceNoncePKey (b, r, key);
									}
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfConstantNoncePKey (b, r, key);
									}
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfSKeyNoncePKey (b, r, key);
									}
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfPKeyNoncePKey (b, r, key);
									}
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfAEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfSEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfPEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(Pair b in nPairinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfPairNoncePKey (b, r, key);
									}
								}
							}
							foreach(Hash b in nHashinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfHashNoncePKey (b, r, key);
									}
								}
							}
							foreach(Sign b in nSigninf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfSignNoncePKey (b, r, key);
									}
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfCommitNoncePKey (b, r, key);
									}
								}
							}
							//
							foreach(Nonce b in nNonceinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfNonceNoncePKey (b, r, key);
									}
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfConstantNoncePKey (b, r, key);
									}
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfSKeyNoncePKey (b, r, key);
									}
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfPKeyNoncePKey (b, r, key);
									}
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfAEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfSEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfPEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(Pair b in nPairinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfPairNoncePKey (b, r, key);
									}
								}
							}
							foreach(Hash b in nHashinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfHashNoncePKey (b, r, key);
									}
								}
							}
							foreach(Sign b in nSigninf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfSignNoncePKey (b, r, key);
									}
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfCommitNoncePKey (b, r, key);
									}
								}
							}
							//
							foreach(Nonce b in nNonceinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfNonceNoncePKey (b, r, key);
									}
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfConstantNoncePKey (b, r, key);
									}
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfSKeyNoncePKey (b, r, key);
									}
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfPKeyNoncePKey (b, r, key);
									}
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfAEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfSEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfPEncNoncePKey (b, r, key);
									}
								}
							}
							foreach(Pair b in nPairinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfPairNoncePKey (b, r, key);
									}
								}
							}
							foreach(Hash b in nHashinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfHashNoncePKey (b, r, key);
									}
								}
							}
							foreach(Sign b in nSigninf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfSignNoncePKey (b, r, key);
									}
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfCommitNoncePKey (b, r, key);
									}
								}
							}
							//
							foreach(Unitype b in inf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfUnitypeNoncePKey (b, r, key);
									}
								}
							}
							foreach(Unitype b in inf){
								foreach(Nonce r in Nonceinf){
									foreach(PKey key in nPKeyinf)
									{
										dinfUnitypeNoncePKey (b, r, key);
									}
								}
							}

							foreach(Unitype b in inf){
								foreach(Nonce r in nNonceinf){
									foreach(PKey key in PKeyinf)
									{
										dinfUnitypeNoncePKey (b, r, key);
									}
								}
							}
							//rule 11:
							//<dinf,inf>
							foreach(Nonce b in nNonceinf){
								foreach(Unitype key in inf)
								{
									dinfNonceUnitype (b, key);
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(Unitype key in inf)
								{
									dinfConstantUnitype (b, key);
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(Unitype key in inf)
								{
									dinfSKeyUnitype (b, key);
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(Unitype key in inf)
								{
									dinfPKeyUnitype (b, key);
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(Unitype key in inf)
								{
									dinfAEncUnitype (b, key);
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(Unitype key in inf)
								{
									dinfSEncUnitype (b, key);
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(Unitype key in inf)
								{
									dinfPEncUnitype (b, key);
								}
							}
							foreach(Pair b in nPairinf){
								foreach(Unitype key in inf)
								{
									dinfPairUnitype (b, key);
								}
							}
							foreach(Hash b in nHashinf){
								foreach(Unitype key in inf)
								{
									dinfHashUnitype (b, key);
								}
							}
							foreach(Sign b in nSigninf){
								foreach(Unitype key in inf)
								{
									dinfSignUnitype (b, key);
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(Unitype key in inf)
								{
									dinfCommitUnitype (b, key);
								}
							}
							//<inf,dinf>
							foreach(Nonce b in nNonceinf){
								foreach(Unitype key in inf)
								{
									dinfNonceUnitype (b, key);
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(Unitype key in inf)
								{
									dinfConstantUnitype (b, key);
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(Unitype key in inf)
								{
									dinfSKeyUnitype (b, key);
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(Unitype key in inf)
								{
									dinfPKeyUnitype (b, key);
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(Unitype key in inf)
								{
									dinfAEncUnitype (b, key);
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(Unitype key in inf)
								{
									dinfSEncUnitype (b, key);
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(Unitype key in inf)
								{
									dinfPEncUnitype (b, key);
								}
							}
							foreach(Pair b in nPairinf){
								foreach(Unitype key in inf)
								{
									dinfPairUnitype (b, key);
								}
							}
							foreach(Hash b in nHashinf){
								foreach(Unitype key in inf)
								{
									dinfHashUnitype (b, key);
								}
							}
							foreach(Sign b in nSigninf){
								foreach(Unitype key in inf)
								{
									dinfSignUnitype (b, key);
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(Unitype key in inf)
								{
									dinfCommitUnitype (b, key);
								}
							}
							//rule 12:Hash to do
							foreach(Nonce b in nNonceinf){
								if ((targetsub.Exists (gdb=>(gdb.IsHash()==true &&(((Hash)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Hash)(object)gdb).getplaintext ())).Nonceequal (b)==true)))||
									subterms.Exists(gdb=>(gdb.IsHash()==true && (((Hash)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Hash)(object)gdb).getplaintext ())).Nonceequal (b)==true))))
									&&!HashList.Exists(gdb=>(gdb.IsHash()==true && (((Hash)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Hash)(object)gdb).getplaintext ())).Nonceequal (b)==true)))) {
									if(!Hashinf.Exists(gdb=>(gdb.IsHash()==true && (((Hash)(object)gdb).getplaintext ().IsNonce()==true&&((Nonce)(object)(((Hash)(object)gdb).getplaintext ())).Nonceequal (b)==true)))) {
									Hash hash = new Hash (b);
									inf.Add (hash);
										dinf.Add (hash);
										changed = true;}
								}

							}
							foreach(Constant b in nConstantinf){
								if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
									(((Hash)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Hash)(object)gdb).getplaintext ())).Constantequal (b)==true)))||
									subterms.Exists(gdb=>(gdb.IsHash()==true &&  
										(((Hash)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Hash)(object)gdb).getplaintext ())).Constantequal (b)==true))))
									&&!HashList.Exists(gdb=>(gdb.IsHash()==true &&
										(((Hash)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Hash)(object)gdb).getplaintext ())).Constantequal (b)==true)))) {
									if(!Hashinf.Exists(gdb=>(gdb.IsHash()==true &&
										(((Hash)(object)gdb).getplaintext ().IsConstant()==true&&((Constant)(object)(((Hash)(object)gdb).getplaintext ())).Constantequal (b)==true)))) {
									Hash hash = new Hash (b);
									inf.Add (hash);
										dinf.Add (hash);
										changed = true;}
								}
							}
							foreach(SKey b in nSKeyinf){
								if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
									(((Hash)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Hash)(object)gdb).getplaintext ())).SKeyequal (b)==true)))||
									subterms.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Hash)(object)gdb).getplaintext ())).SKeyequal (b)==true))))
									&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Hash)(object)gdb).getplaintext ())).SKeyequal (b)==true)))) {
									if(!Hashinf.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsSKey()==true&&((SKey)(object)(((Hash)(object)gdb).getplaintext ())).SKeyequal (b)==true)))) {
									Hash hash = new Hash (b);
									inf.Add (hash);
										dinf.Add (hash);
										changed = true;}
								}
							}
							foreach(PKey b in nPKeyinf){
								if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
									(((Hash)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Hash)(object)gdb).getplaintext ())).PKeyequal (b)==true)))||
									subterms.Exists(gdb=>(gdb.IsHash()==true &&
										(((Hash)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Hash)(object)gdb).getplaintext ())).PKeyequal (b)==true))))
									&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Hash)(object)gdb).getplaintext ())).PKeyequal (b)==true)))) {
									if(!Hashinf.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsPKey()==true&&((PKey)(object)(((Hash)(object)gdb).getplaintext ())).PKeyequal (b)==true)))) {
									Hash hash = new Hash (b);
									inf.Add (hash);
										dinf.Add (hash);
										changed = true;}
								}
							}
							foreach(AEnc b in nAEncinf){
								if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
									(((Hash)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Hash)(object)gdb).getplaintext ())).AEncequal (b)==true)))||
									subterms.Exists(gdb=>(gdb.IsHash()==true &&
										(((Hash)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Hash)(object)gdb).getplaintext ())).AEncequal (b)==true))))
									&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Hash)(object)gdb).getplaintext ())).AEncequal (b)==true)))) {
									if(!Hashinf.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsAEnc()==true&&((AEnc)(object)(((Hash)(object)gdb).getplaintext ())).AEncequal (b)==true)))) {
									Hash hash = new Hash (b);
									inf.Add (hash);
										dinf.Add (hash);
										changed = true;}
								}
							}
							foreach(SEnc b in nSEncinf){
								if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
									(((Hash)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Hash)(object)gdb).getplaintext ())).SEncequal (b)==true)))||
									subterms.Exists(gdb=>(gdb.IsHash()==true &&  
										(((Hash)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Hash)(object)gdb).getplaintext ())).SEncequal (b)==true))))
									&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Hash)(object)gdb).getplaintext ())).SEncequal (b)==true)))) {
									if(!Hashinf.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsSEnc()==true&&((SEnc)(object)(((Hash)(object)gdb).getplaintext ())).SEncequal (b)==true)))) {
									Hash hash = new Hash (b);
									inf.Add (hash);
										dinf.Add (hash);
										changed = true;}
								}
							}
							foreach(PEnc b in nPEncinf){
								if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
									(((Hash)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Hash)(object)gdb).getplaintext ())).PEncequal (b)==true)))||
									subterms.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Hash)(object)gdb).getplaintext ())).PEncequal (b)==true))))
									&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Hash)(object)gdb).getplaintext ())).PEncequal (b)==true)))) {
									if(!Hashinf.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsPEnc()==true&&((PEnc)(object)(((Hash)(object)gdb).getplaintext ())).PEncequal (b)==true)))) {
									Hash hash = new Hash (b);
									inf.Add (hash);
										dinf.Add (hash);
										changed = true;}
								}
							}
							foreach(Pair b in PairList){
								if ((targetsub.Exists (gdb=>(gdb.IsHash()==true &&
									(((Hash)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Hash)(object)gdb).getplaintext ())).Pairequal (b)==true)))||
									subterms.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Hash)(object)gdb).getplaintext ())).Pairequal (b)==true))))
									&&!HashList.Exists(gdb=>(gdb.IsHash()==true &&
										(((Hash)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Hash)(object)gdb).getplaintext ())).Pairequal (b)==true)))) {
									if(!Hashinf.Exists(gdb=>(gdb.IsHash()==true &&
										(((Hash)(object)gdb).getplaintext ().IsPair()==true&&((Pair)(object)(((Hash)(object)gdb).getplaintext ())).Pairequal (b)==true)))) {
									Hash hash = new Hash (b);
									inf.Add (hash);
										dinf.Add (hash);
										changed = true;}
								}
							}
							foreach(Hash b in HashList){
								if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
									(((Hash)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Hash)(object)gdb).getplaintext ())).Hashequal (b)==true)))||
									subterms.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Hash)(object)gdb).getplaintext ())).Hashequal (b)==true))))
									&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Hash)(object)gdb).getplaintext ())).Hashequal (b)==true)))) {
									if(!Hashinf.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsHash()==true&&((Hash)(object)(((Hash)(object)gdb).getplaintext ())).Hashequal (b)==true)))) {
									Hash hash = new Hash (b);
									inf.Add (hash);
										dinf.Add (hash);
										changed = true;}
								}
							}
							foreach(Sign b in nSigninf){
								if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
									(((Hash)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Hash)(object)gdb).getplaintext ())).Signequal (b)==true)))||
									subterms.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Hash)(object)gdb).getplaintext ())).Signequal (b)==true))))
									&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Hash)(object)gdb).getplaintext ())).Signequal (b)==true)))) {
									if(!Hashinf.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsSign()==true&&((Sign)(object)(((Hash)(object)gdb).getplaintext ())).Signequal (b)==true)))) {
									Hash hash = new Hash (b);
									inf.Add (hash);
										dinf.Add (hash);
										changed = true;}
								}
							}
							foreach(Commit b in nCommitinf){
								if ((targetsub.Exists (gdb=>(gdb.IsHash()==true && 
									(((Hash)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Hash)(object)gdb).getplaintext ())).Commitequal (b)==true)))||
									subterms.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Hash)(object)gdb).getplaintext ())).Commitequal (b)==true))))
									&&!HashList.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Hash)(object)gdb).getplaintext ())).Commitequal (b)==true)))) {
									if(!Hashinf.Exists(gdb=>(gdb.IsHash()==true && 
										(((Hash)(object)gdb).getplaintext ().IsCommit()==true&&((Commit)(object)(((Hash)(object)gdb).getplaintext ())).Commitequal (b)==true)))) {
									Hash hash = new Hash (b);
									inf.Add (hash);
										dinf.Add (hash);
										changed = true;}
								}
							}
							//rule 13:Sign
							foreach(Nonce b in nNonceinf){
								foreach(SKey key in SKeyinf)
								{
									dinfNonceSKeyRule13 (b, key);
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(SKey key in SKeyinf)
								{
									dinfConstantSKeyRule13 (b, key);
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(SKey key in SKeyinf)
								{
									dinfSKeySKeyRule13 (b, key);
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(SKey key in SKeyinf)
								{
									dinfPKeySKeyRule13 (b, key);
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(SKey key in SKeyinf)
								{
									dinfAEncSKeyRule13 (b, key);
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(SKey key in SKeyinf)
								{
									dinfSEncSKeyRule13 (b, key);
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(SKey key in SKeyinf)
								{
									dinfPEncSKeyRule13 (b, key);
								}
							}
							foreach(Pair b in nPairinf){
								foreach(SKey key in SKeyinf)
								{
									dinfPairSKeyRule13 (b, key);
								}
							}
							foreach(Hash b in nHashinf){
								foreach(SKey key in SKeyinf)
								{
									dinfHashSKeyRule13 (b, key);
								}
							}
							foreach(Sign b in nSigninf){
								foreach(SKey key in SKeyinf)
								{
									dinfSignSKeyRule13 (b, key);
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(SKey key in SKeyinf)
								{
									dinfCommitSKeyRule13 (b, key);
								}
							}
							foreach(Unitype b in inf){
								foreach(SKey key in nSKeyinf)
								{
									dinfUnitypeSKeyRule13 (b, key);
								}
							}
							//rule 14: Commit
							foreach(Nonce b in nNonceinf){
								foreach(Nonce key in Nonceinf)
								{
									dinfNonceNonceRule14 (b, key);
								}
							}
							foreach(Constant b in nConstantinf){
								foreach(Nonce key in Nonceinf)
								{
									dinfConstantNonceRule14 (b, key);
								}
							}
							foreach(SKey b in nSKeyinf){
								foreach(Nonce key in Nonceinf)
								{
									dinfSKeyNonceRule14 (b, key);
								}
							}
							foreach(PKey b in nPKeyinf){
								foreach(Nonce key in Nonceinf)
								{
									dinfPKeyNonceRule14 (b, key);
								}
							}
							foreach(AEnc b in nAEncinf){
								foreach(Nonce key in Nonceinf)
								{
									dinfAEncNonceRule14 (b, key);
								}
							}
							foreach(SEnc b in nSEncinf){
								foreach(Nonce key in Nonceinf)
								{
									dinfSEncNonceRule14 (b, key);
								}
							}
							foreach(PEnc b in nPEncinf){
								foreach(Nonce key in Nonceinf)
								{
									dinfPEncNonceRule14 (b, key);
								}
							}
							foreach(Pair b in nPairinf){
								foreach(Nonce key in Nonceinf)
								{
									dinfPairNonceRule14 (b, key);
								}
							}
							foreach(Hash b in nHashinf){
								foreach(Nonce key in Nonceinf)
								{
									dinfHashNonceRule14 (b, key);
								}
							}
							foreach(Sign b in nSigninf){
								foreach(Nonce key in Nonceinf)
								{
									dinfSignNonceRule14 (b, key);
								}
							}
							foreach(Commit b in nCommitinf){
								foreach(Nonce key in Nonceinf)
								{
									dinfCommitNonceRule14 (b, key);
								}
							}
							foreach(Unitype b in inf){
								foreach(Nonce key in nNonceinf)
								{
									dinfUnitypeNonceRule14 (b, key);
								}
							}
						}
						// asign new inf to old inf
						SKeyinf.AddRange(nSKeyinf);
						PKeyinf.AddRange(nPKeyinf);
						AEncinf.AddRange(nAEncinf);
						SEncinf.AddRange(nSEncinf);
						PEncinf.AddRange(nPEncinf);
						Pairinf.AddRange(nPairinf);
						Nonceinf.AddRange(nNonceinf);
						Constantinf.AddRange(nConstantinf);
						Commitinf.AddRange(nCommitinf);
						Hashinf.AddRange(nHashinf);
						Signinf.AddRange(nSigninf);
							dinf.Clear();}

					} while(changed);
				}
				if (changed==true&&(inf.Exists(n=>n.equal(i)==true))){return true;}else{
						return false;}
							}
		
		}
//define a function to add knowledge into the inital adversary knowledge list(this function is called in the CSP# model)		
		public bool addKnowledge(Unitype i)
		{
		//if the input i is not already contained in the list
			if (!list.Contains(i))
			{
			    //if i is a nonce then directly add it, meanwhile add a copy to the NonceList, and add it to the subterm list
				if (i.IsNonce () == true) {
					list.Add (i);
					NonceList.Add ((Nonce)(object)i);
					if (!subterms.Contains(i)){
						subterms.Add (i);}
					return true;
				}
				//if i is a constant, add it to list, add a copy to ConstantList, and add it to the subterm list
				else if (i.IsConstant () == true) {
					list.Add (i);
					ConstantList.Add ((Constant)(object)i);
					if (!subterms.Contains (i)) {
						subterms.Add (i);
					}
					return true;
				}
				//if i is a secret key, add it to list, add a copy to SkeyList, and add it to the subterm list
				else if (i.IsSKey () == true) {
					list.Add (i);
					SKeyList.Add ((SKey)(object)i);
					if (!subterms.Contains (i)) {
						subterms.Add (i);
					}
					return true;
				}
				//if i is a public key, add it to list, add a copy to PKeyList, and add it to the subterm list together with its corresponding secret key
				else if (i.IsPKey () == true) {
					list.Add (i);
					PKeyList.Add ((PKey)(object)i);
					if (!subterms.Contains (i)) {
						subterms.Add (i);
						if (!subterms.Contains (((PKey)(object)i).getsk ())){
							subterms.Add (((PKey)(object)i).getsk ());
						}
					}
					return true;
				}
				else if (i.IsAEnc () == true) {
					list.Add (i);
					AEncList.Add ((AEnc)(object)i);
					if (!subterms.Contains (i)) {
						subterms.Add (i);
						if (!subterms.Contains (((AEnc)(object)i).getpk ())) {
							subterms.Add (((AEnc)(object)i).getpk ());
							if(!subterms.Contains (((AEnc)(object)i).getpk ().getsk())) {
								subterms.Add(((AEnc)(object)i).getpk ().getsk());
							}
						}
						if (addsubterm (((AEnc)(object)i).getplaintext ())!=true) {
							throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
						}
					}
					return true;
				}
				else if (i.IsSEnc () == true) {
					list.Add (i);
					SEncList.Add ((SEnc)(object)i);
					if (!subterms.Contains (i)) {
						subterms.Add (i);
						if (!subterms.Contains (((SEnc)(object)i).getsk ())) {
							subterms.Add (((SEnc)(object)i).getsk ());
						}
						if (addsubterm (((SEnc)(object)i).getplaintext ())!=true) {
							throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm senc");
						}
					}
					return true;
				}
				else if (i.IsPEnc () == true) {
					list.Add (i);
					PEncList.Add ((PEnc)(object)i);
					if (!subterms.Contains (i)) {
						subterms.Add (i);
						if (!subterms.Contains (((PEnc)(object)i).getpk ())) {
							subterms.Add (((PEnc)(object)i).getpk ());
							if(!subterms.Contains (((PEnc)(object)i).getpk ().getsk())) {
								subterms.Add(((PEnc)(object)i).getpk ().getsk());
							}
						}
						if (!subterms.Contains (((PEnc)(object)i).getrandom ())) {
							subterms.Add (((PEnc)(object)i).getrandom ());
						}
						if (addsubterm (((PEnc)(object)i).getplaintext ())!=true) {
							throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm penc");
						}
					}
					return true;
				}
				else if (i.IsPair () == true) {
					list.Add (i);
					PairList.Add ((Pair)(object)i);
					if (!subterms.Contains (i)) {
						subterms.Add (i);
						if (addsubterm (((Pair)(object)i).getfirst ())!=true) {
							throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm pair first");
						}
						if (addsubterm (((Pair)(object)i).getsecond ())!=true) {
							throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm Pair second");
						}
					}
					return true;
				}
				else if (i.IsHash () == true) {
					list.Add (i);
					HashList.Add ((Hash)(object)i);
					if (!subterms.Contains (i)) {
						subterms.Add (i);
						if (addsubterm (((Hash)(object)i).getplaintext ())!=true) {
							throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
						}
					}
					return true;
				}
				else if (i.IsSign () == true) {
					list.Add (i);
					SignList.Add ((Sign)(object)i);
					if (!subterms.Contains (i)) {
						subterms.Add (i);
						if (!subterms.Contains (((Sign)(object)i).getsk ())) {
							subterms.Add (((Sign)(object)i).getsk ());
						}
						if (addsubterm (((Sign)(object)i).getplaintext ())!=true) {
							throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
						}
					}
					return true;
				}
				else if (i.IsCommit () == true) {
					list.Add (i);
					CommitList.Add ((Commit)(object)i);
					if (!subterms.Contains (i)) {
						subterms.Add (i);
						if (!subterms.Contains (((Commit)(object)i).getrandom ())) {
							subterms.Add (((Commit)(object)i).getrandom ());
						}
						if (addsubterm (((Commit)(object)i).getplaintext ())!=true) {
							throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
						}
					}
					return true;
				}
				else if (i.IsADec () == true) {
					if (((ADec)(object)i).getcipher ().isDecryptable (((ADec)(object)i).getsk ()) == true) {
						if (((ADec)(object)i).result ().IsNonce () == true) {
							list.Add (((ADec)(object)i).result ());
							NonceList.Add ((Nonce)(object)((ADec)(object)i).result ());
							if (!subterms.Contains(((ADec)(object)i).result ())){
								subterms.Add (((ADec)(object)i).result ());}
							return true;
						} else if (((ADec)(object)i).result ().IsConstant () == true) {
							list.Add (((ADec)(object)i).result ());
							ConstantList.Add ((Constant)(object)((ADec)(object)i).result ());
							if (!subterms.Contains(((ADec)(object)i).result ())){
								subterms.Add (((ADec)(object)i).result ());}
							return true;
						} else if (((ADec)(object)i).result ().IsSKey () == true) {
							list.Add (((ADec)(object)i).result ());
							SKeyList.Add ((SKey)(object)((ADec)(object)i).result ());
							if (!subterms.Contains(((ADec)(object)i).result ())){
								subterms.Add (((ADec)(object)i).result ());}
							return true;
						} else if (((ADec)(object)i).result ().IsPKey () == true) {
							list.Add (((ADec)(object)i).result ());
							PKeyList.Add ((PKey)(object)((ADec)(object)i).result ());
							if (!subterms.Contains (((ADec)(object)i).result ())) {
								subterms.Add (((ADec)(object)i).result ());
								if (!subterms.Contains (((PKey)(object)(((ADec)(object)i).result ())).getsk ())){
									subterms.Add (((PKey)(object)(((ADec)(object)i).result ())).getsk ());
								}
							}
							return true;
						} else if (((ADec)(object)i).result ().IsAEnc () == true) {
							list.Add (((ADec)(object)i).result ());
							AEncList.Add ((AEnc)(object)((ADec)(object)i).result ());
							if (!subterms.Contains (((ADec)(object)i).result ())) {
								subterms.Add (((ADec)(object)i).result ());
								if (!subterms.Contains (((AEnc)(object)(((ADec)(object)i).result ())).getpk ())) {
									subterms.Add (((AEnc)(object)(((ADec)(object)i).result ())).getpk ());
									if(!subterms.Contains (((AEnc)(object)(((ADec)(object)i).result ())).getpk ().getsk())) {
										subterms.Add(((AEnc)(object)(((ADec)(object)i).result ())).getpk ().getsk());
									}
								}
								if (addsubterm (((AEnc)(object)(((ADec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((ADec)(object)i).result ().IsSEnc () == true) {
							list.Add (((ADec)(object)i).result ());
							SEncList.Add ((SEnc)(object)((ADec)(object)i).result ());
							if (!subterms.Contains (((ADec)(object)i).result ())) {
								subterms.Add (((ADec)(object)i).result ());
								if (!subterms.Contains (((SEnc)(object)(((ADec)(object)i).result ())).getsk ())) {
									subterms.Add (((SEnc)(object)(((ADec)(object)i).result ())).getsk ());
								}
								if (addsubterm (((SEnc)(object)(((ADec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm senc");
								}
							}
							return true;
						} else if (((ADec)(object)i).result ().IsPEnc () == true) {
							list.Add (((ADec)(object)i).result ());
							PEncList.Add ((PEnc)(object)((ADec)(object)i).result ());
							if (!subterms.Contains (((ADec)(object)i).result ())) {
								subterms.Add (((ADec)(object)i).result ());
								if (!subterms.Contains (((PEnc)(object)(((ADec)(object)i).result ())).getpk ())) {
									subterms.Add (((PEnc)(object)(((ADec)(object)i).result ())).getpk ());
									if(!subterms.Contains (((PEnc)(object)(((ADec)(object)i).result ())).getpk ().getsk())) {
										subterms.Add(((PEnc)(object)(((ADec)(object)i).result ())).getpk ().getsk());
									}
								}
								if (!subterms.Contains (((PEnc)(object)(((ADec)(object)i).result ())).getrandom ())) {
									subterms.Add (((PEnc)(object)(((ADec)(object)i).result ())).getrandom ());
								}
								if (addsubterm (((PEnc)(object)(((ADec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm penc");
								}
							}
							return true;
						} else if (((ADec)(object)i).result ().IsPair () == true) {
							list.Add (((ADec)(object)i).result ());
							PairList.Add ((Pair)(object)((ADec)(object)i).result ());
							if (!subterms.Contains (((ADec)(object)i).result ())) {
								subterms.Add (((ADec)(object)i).result ());
								if (addsubterm (((Pair)(object)(((ADec)(object)i).result ())).getfirst ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm pair first");
								}
								if (addsubterm (((Pair)(object)(((ADec)(object)i).result ())).getsecond ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm Pair second");
								}
							}
							return true;
						} else if (((ADec)(object)i).result ().IsHash () == true) {
							list.Add (((ADec)(object)i).result ());
							HashList.Add ((Hash)(object)((ADec)(object)i).result ());
							if (!subterms.Contains (((ADec)(object)i).result ())) {
								subterms.Add (((ADec)(object)i).result ());
								if (addsubterm (((Hash)(object)(((ADec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((ADec)(object)i).result ().IsSign () == true) {
							list.Add (((ADec)(object)i).result ());
							SignList.Add ((Sign)(object)((ADec)(object)i).result ());
							if (!subterms.Contains (((ADec)(object)i).result ())) {
								subterms.Add (((ADec)(object)i).result ());
								if (!subterms.Contains (((Sign)(object)(((ADec)(object)i).result ())).getsk ())) {
									subterms.Add (((Sign)(object)(((ADec)(object)i).result ())).getsk ());
								}
								if (addsubterm (((Sign)(object)(((ADec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((ADec)(object)i).result ().IsCommit () == true) {
							list.Add (((ADec)(object)i).result ());
							CommitList.Add ((Commit)(object)((ADec)(object)i).result ());
							if (!subterms.Contains (((ADec)(object)i).result ())) {
								subterms.Add (((ADec)(object)i).result ());
								if (!subterms.Contains (((Commit)(object)(((ADec)(object)i).result ())).getrandom ())) {
									subterms.Add (((Commit)(object)(((ADec)(object)i).result ())).getrandom ());
								}
								if (addsubterm (((Commit)(object)(((ADec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((ADec)(object)i).result ().IsADec () == true) {
							return addKnowledge ((ADec)(object)((ADec)(object)i).result ());
						} else if (((ADec)(object)i).result ().IsSDec () == true) {
							return addKnowledge ((SDec)(object)((ADec)(object)i).result ());
						} else if (((ADec)(object)i).result ().IsPDec () == true) {
							return addKnowledge ((PDec)(object)((ADec)(object)i).result ());
						} else if (((ADec)(object)i).result ().IsGetSignMsg () == true) {
							return addKnowledge ((GetSignMsg)(object)((ADec)(object)i).result ());
						} else if (((ADec)(object)i).result ().IsOpen () == true) {
							return addKnowledge ((Open)(object)((ADec)(object)i).result ());
						} else
							return false;
					} else {
						list.Add (i);
						ADecList.Add ((ADec)(object)i);
						return true;
					}
				}
				else if (i.IsSDec () == true) {
					if (((SDec)(object)i).getcipher ().isDecryptable (((SDec)(object)i).getsk ()) == true) {
						if (((SDec)(object)i).result ().IsNonce () == true) {
							list.Add (((SDec)(object)i).result ());
							NonceList.Add ((Nonce)(object)((SDec)(object)i).result ());
							if (!subterms.Contains(((SDec)(object)i).result ())){
								subterms.Add (((SDec)(object)i).result ());}
							return true;
						} else if (((SDec)(object)i).result ().IsConstant () == true) {
							list.Add (((SDec)(object)i).result ());
							ConstantList.Add ((Constant)(object)((SDec)(object)i).result ());
							if (!subterms.Contains(((SDec)(object)i).result ())){
								subterms.Add (((SDec)(object)i).result ());}
							return true;
						} else if (((SDec)(object)i).result ().IsSKey () == true) {
							list.Add (((SDec)(object)i).result ());
							SKeyList.Add ((SKey)(object)((SDec)(object)i).result ());
							if (!subterms.Contains(((SDec)(object)i).result ())){
								subterms.Add (((SDec)(object)i).result ());}
							return true;
						} else if (((SDec)(object)i).result ().IsPKey () == true) {
							list.Add (((SDec)(object)i).result ());
							PKeyList.Add ((PKey)(object)((SDec)(object)i).result ());
							if (!subterms.Contains (((SDec)(object)i).result ())) {
								subterms.Add (((SDec)(object)i).result ());
								if (!subterms.Contains (((PKey)(object)(((SDec)(object)i).result ())).getsk ())){
									subterms.Add (((PKey)(object)(((SDec)(object)i).result ())).getsk ());
								}
							}
							return true;
						} else if (((SDec)(object)i).result ().IsAEnc () == true) {
							list.Add (((SDec)(object)i).result ());
							AEncList.Add ((AEnc)(object)((SDec)(object)i).result ());
							if (!subterms.Contains (((SDec)(object)i).result ())) {
								subterms.Add (((SDec)(object)i).result ());
								if (!subterms.Contains (((AEnc)(object)(((SDec)(object)i).result ())).getpk ())) {
									subterms.Add (((AEnc)(object)(((SDec)(object)i).result ())).getpk ());
									if(!subterms.Contains (((AEnc)(object)(((SDec)(object)i).result ())).getpk ().getsk())) {
										subterms.Add(((AEnc)(object)(((SDec)(object)i).result ())).getpk ().getsk());
									}
								}
								if (addsubterm (((AEnc)(object)(((SDec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((SDec)(object)i).result ().IsSEnc () == true) {
							list.Add (((SDec)(object)i).result ());
							SEncList.Add ((SEnc)(object)((SDec)(object)i).result ());
							if (!subterms.Contains (((SDec)(object)i).result ())) {
								subterms.Add (((SDec)(object)i).result ());
								if (!subterms.Contains (((SEnc)(object)(((SDec)(object)i).result ())).getsk ())) {
									subterms.Add (((SEnc)(object)(((SDec)(object)i).result ())).getsk ());
								}
								if (addsubterm (((SEnc)(object)(((SDec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm senc");
								}
							}
							return true;
						} else if (((SDec)(object)i).result ().IsPEnc () == true) {
							list.Add (((SDec)(object)i).result ());
							PEncList.Add ((PEnc)(object)(((SDec)(object)i).result ()));
							if (!subterms.Contains (((SDec)(object)i).result ())) {
								subterms.Add (((SDec)(object)i).result ());
								if (!subterms.Contains (((PEnc)(object)(((SDec)(object)i).result ())).getpk ())) {
									subterms.Add (((PEnc)(object)(((SDec)(object)i).result ())).getpk ());
									if(!subterms.Contains (((PEnc)(object)(((SDec)(object)i).result ())).getpk ().getsk())) {
										subterms.Add(((PEnc)(object)(((SDec)(object)i).result ())).getpk ().getsk());
									}
								}
								if (!subterms.Contains (((PEnc)(object)(((SDec)(object)i).result ())).getrandom ())) {
									subterms.Add (((PEnc)(object)(((SDec)(object)i).result ())).getrandom ());
								}
								if (addsubterm (((PEnc)(object)(((SDec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm penc");
								}
							}
							return true;
						} else if (((SDec)(object)i).result ().IsPair () == true) {
							list.Add (((SDec)(object)i).result ());
							PairList.Add ((Pair)(object)((SDec)(object)i).result ());
							if (!subterms.Contains (((SDec)(object)i).result ())) {
								subterms.Add (((SDec)(object)i).result ());
								if (addsubterm (((Pair)(object)(((SDec)(object)i).result ())).getfirst ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm pair first");
								}
								if (addsubterm (((Pair)(object)(((SDec)(object)i).result ())).getsecond ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm Pair second");
								}
							}
							return true;
						} else if (((SDec)(object)i).result ().IsHash () == true) {
							list.Add (((SDec)(object)i).result ());
							HashList.Add ((Hash)(object)((SDec)(object)i).result ());
							if (!subterms.Contains (((SDec)(object)i).result ())) {
								subterms.Add (((SDec)(object)i).result ());
								if (addsubterm (((Hash)(object)(((SDec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((SDec)(object)i).result ().IsSign () == true) {
							list.Add (((SDec)(object)i).result ());
							SignList.Add ((Sign)(object)((SDec)(object)i).result ());
							if (!subterms.Contains (((SDec)(object)i).result ())) {
								subterms.Add (((SDec)(object)i).result ());
								if (!subterms.Contains (((Sign)(object)(((SDec)(object)i).result ())).getsk ())) {
									subterms.Add (((Sign)(object)(((SDec)(object)i).result ())).getsk ());
								}
								if (addsubterm (((Sign)(object)(((SDec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((SDec)(object)i).result ().IsCommit () == true) {
							list.Add (((SDec)(object)i).result ());
							CommitList.Add ((Commit)(object)((SDec)(object)i).result ());
							if (!subterms.Contains (((SDec)(object)i).result ())) {
								subterms.Add (((SDec)(object)i).result ());
								if (!subterms.Contains (((Commit)(object)(((SDec)(object)i).result ())).getrandom ())) {
									subterms.Add (((Commit)(object)(((SDec)(object)i).result ())).getrandom ());
								}
								if (addsubterm (((Commit)(object)(((SDec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((SDec)(object)i).result ().IsADec () == true) {
							return addKnowledge ((ADec)(object)((SDec)(object)i).result ());
						} else if (((SDec)(object)i).result ().IsSDec () == true) {
							return addKnowledge ((SDec)(object)((SDec)(object)i).result ());
						} else if (((SDec)(object)i).result ().IsPDec () == true) {
							return addKnowledge ((PDec)(object)((SDec)(object)i).result ());
						} else if (((SDec)(object)i).result ().IsGetSignMsg () == true) {
							return addKnowledge ((GetSignMsg)(object)((SDec)(object)i).result ());
						} else if (((SDec)(object)i).result ().IsOpen () == true) {
							return addKnowledge ((Open)(object)((SDec)(object)i).result ());
						} else
							return false;
					} else {
						list.Add (i);
						SDecList.Add ((SDec)(object)i);
						return true;
					}
				}
				else if (i.IsPDec () == true) {
					if (((PDec)(object)i).getcipher ().isDecryptable (((PDec)(object)i).getsk ()) == true) {
						if (((PDec)(object)i).result ().IsNonce () == true) {
							list.Add (((PDec)(object)i).result ());
							NonceList.Add ((Nonce)(object)((PDec)(object)i).result ());
							if (!subterms.Contains(((PDec)(object)i).result ())){
								subterms.Add (((PDec)(object)i).result ());}
							return true;
						} else if (((PDec)(object)i).result ().IsConstant () == true) {
							list.Add (((PDec)(object)i).result ());
							ConstantList.Add ((Constant)(object)((PDec)(object)i).result ());
							if (!subterms.Contains(((PDec)(object)i).result ())){
								subterms.Add (((PDec)(object)i).result ());}
							return true;
						} else if (((PDec)(object)i).result ().IsSKey () == true) {
							list.Add (((PDec)(object)i).result ());
							SKeyList.Add ((SKey)(object)((PDec)(object)i).result ());
							if (!subterms.Contains(((PDec)(object)i).result ())){
								subterms.Add (((PDec)(object)i).result ());}
							return true;
						} else if (((PDec)(object)i).result ().IsPKey () == true) {
							list.Add (((PDec)(object)i).result ());
							PKeyList.Add ((PKey)(object)((PDec)(object)i).result ());
							if (!subterms.Contains (((PDec)(object)i).result ())) {
								subterms.Add (((PDec)(object)i).result ());
								if (!subterms.Contains (((PKey)(object)(((PDec)(object)i).result ())).getsk ())){
									subterms.Add (((PKey)(object)(((PDec)(object)i).result ())).getsk ());
								}
							}
							return true;
						} else if (((PDec)(object)i).result ().IsAEnc () == true) {
							list.Add (((PDec)(object)i).result ());
							AEncList.Add ((AEnc)(object)((PDec)(object)i).result ());
							if (!subterms.Contains (((PDec)(object)i).result ())) {
								subterms.Add (((PDec)(object)i).result ());
								if (!subterms.Contains (((AEnc)(object)(((PDec)(object)i).result ())).getpk ())) {
									subterms.Add (((AEnc)(object)(((PDec)(object)i).result ())).getpk ());
									if(!subterms.Contains (((AEnc)(object)(((PDec)(object)i).result ())).getpk ().getsk())) {
										subterms.Add(((AEnc)(object)(((PDec)(object)i).result ())).getpk ().getsk());
									}
								}
								if (addsubterm (((AEnc)(object)(((PDec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((PDec)(object)i).result ().IsSEnc () == true) {
							list.Add (((PDec)(object)i).result ());
							SEncList.Add ((SEnc)(object)((PDec)(object)i).result ());
							if (!subterms.Contains (((PDec)(object)i).result ())) {
								subterms.Add (((PDec)(object)i).result ());
								if (!subterms.Contains (((SEnc)(object)(((PDec)(object)i).result ())).getsk ())) {
									subterms.Add (((SEnc)(object)(((PDec)(object)i).result ())).getsk ());
								}
								if (addsubterm (((SEnc)(object)(((PDec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm senc");
								}
							}
							return true;
						} else if (((PDec)(object)i).result ().IsPEnc () == true) {
							list.Add (((PDec)(object)i).result ());
							PEncList.Add ((PEnc)(object)((PDec)(object)i).result ());
							if (!subterms.Contains (((PDec)(object)i).result ())) {
								subterms.Add (((PDec)(object)i).result ());
								if (!subterms.Contains (((PEnc)(object)(((PDec)(object)i).result ())).getpk ())) {
									subterms.Add (((PEnc)(object)(((PDec)(object)i).result ())).getpk ());
									if(!subterms.Contains (((PEnc)(object)(((PDec)(object)i).result ())).getpk ().getsk())) {
										subterms.Add(((PEnc)(object)(((PDec)(object)i).result ())).getpk ().getsk());
									}
								}
								if (!subterms.Contains (((PEnc)(object)(((PDec)(object)i).result ())).getrandom ())) {
									subterms.Add (((PEnc)(object)(((PDec)(object)i).result ())).getrandom ());
								}
								if (addsubterm (((PEnc)(object)(((PDec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm penc");
								}
							}
							return true;
						} else if (((PDec)(object)i).result ().IsPair () == true) {
							list.Add (((PDec)(object)i).result ());
							PairList.Add ((Pair)(object)((PDec)(object)i).result ());
							if (!subterms.Contains (((PDec)(object)i).result ())) {
								subterms.Add (((PDec)(object)i).result ());
								if (addsubterm (((Pair)(object)(((PDec)(object)i).result ())).getfirst ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm pair first");
								}
								if (addsubterm (((Pair)(object)(((PDec)(object)i).result ())).getsecond ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm Pair second");
								}
							}
							return true;
						} else if (((PDec)(object)i).result ().IsHash () == true) {
							list.Add (((PDec)(object)i).result ());
							HashList.Add ((Hash)(object)((PDec)(object)i).result ());
							if (!subterms.Contains (((PDec)(object)i).result ())) {
								subterms.Add (((PDec)(object)i).result ());
								if (addsubterm (((Hash)(object)(((PDec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((PDec)(object)i).result ().IsSign () == true) {
							list.Add (((PDec)(object)i).result ());
							SignList.Add ((Sign)(object)((PDec)(object)i).result ());
							if (!subterms.Contains (((PDec)(object)i).result ())) {
								subterms.Add (((PDec)(object)i).result ());
								if (!subterms.Contains (((Sign)(object)(((PDec)(object)i).result ())).getsk ())) {
									subterms.Add (((Sign)(object)(((PDec)(object)i).result ())).getsk ());
								}
								if (addsubterm (((Sign)(object)(((PDec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((PDec)(object)i).result ().IsCommit () == true) {
							list.Add (((PDec)(object)i).result ());
							CommitList.Add ((Commit)(object)((PDec)(object)i).result ());
							if (!subterms.Contains (((PDec)(object)i).result ())) {
								subterms.Add (((PDec)(object)i).result ());
								if (!subterms.Contains (((Commit)(object)(((PDec)(object)i).result ())).getrandom ())) {
									subterms.Add (((Commit)(object)(((PDec)(object)i).result ())).getrandom ());
								}
								if (addsubterm (((Commit)(object)(((PDec)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((PDec)(object)i).result ().IsADec () == true) {
							return addKnowledge ((ADec)(object)((PDec)(object)i).result ());
						} else if (((PDec)(object)i).result ().IsSDec () == true) {
							return addKnowledge ((SDec)(object)((PDec)(object)i).result ());
						} else if (((PDec)(object)i).result ().IsPDec () == true) {
							return addKnowledge ((PDec)(object)((PDec)(object)i).result ());
						} else if (((PDec)(object)i).result ().IsGetSignMsg () == true) {
							return addKnowledge ((GetSignMsg)(object)((PDec)(object)i).result ());
						} else if (((PDec)(object)i).result ().IsOpen () == true) {
							return addKnowledge ((Open)(object)((PDec)(object)i).result ());
						} else
							return false;
					} else {
						list.Add (i);
						PDecList.Add ((PDec)(object)i);
						return true;
					}
				}
				else if (i.IsGetSignMsg () == true) {
					if (((GetSignMsg)(object)i).getsign ().isDecryptable (((GetSignMsg)(object)i).getpk ()) == true) {
						if (((GetSignMsg)(object)i).result ().IsNonce () == true) {
							list.Add (((GetSignMsg)(object)i).result ());
							NonceList.Add ((Nonce)(object)((GetSignMsg)(object)i).result ());
							if (!subterms.Contains(((GetSignMsg)(object)i).result ())){
								subterms.Add (((GetSignMsg)(object)i).result ());}
							return true;
						} else if (((GetSignMsg)(object)i).result ().IsConstant () == true) {
							list.Add (((GetSignMsg)(object)i).result ());
							ConstantList.Add ((Constant)(object)((GetSignMsg)(object)i).result ());
							if (!subterms.Contains(((GetSignMsg)(object)i).result ())){
								subterms.Add (((GetSignMsg)(object)i).result ());}
							return true;
						} else if (((GetSignMsg)(object)i).result ().IsSKey () == true) {
							list.Add (((GetSignMsg)(object)i).result ());
							SKeyList.Add ((SKey)(object)((GetSignMsg)(object)i).result ());
							if (!subterms.Contains(((GetSignMsg)(object)i).result ())){
								subterms.Add (((GetSignMsg)(object)i).result ());}
							return true;
						} else if (((GetSignMsg)(object)i).result ().IsPKey () == true) {
							list.Add (((GetSignMsg)(object)i).result ());
							PKeyList.Add ((PKey)(object)((GetSignMsg)(object)i).result ());
							if (!subterms.Contains (((GetSignMsg)(object)i).result ())) {
								subterms.Add (((GetSignMsg)(object)i).result ());
								if (!subterms.Contains (((PKey)(object)(((GetSignMsg)(object)i).result ())).getsk ())){
									subterms.Add (((PKey)(object)(((GetSignMsg)(object)i).result ())).getsk ());
								}
							}
							return true;
						} else if (((GetSignMsg)(object)i).result ().IsAEnc () == true) {
							list.Add (((GetSignMsg)(object)i).result ());
							AEncList.Add ((AEnc)(object)((GetSignMsg)(object)i).result ());
							if (!subterms.Contains (((GetSignMsg)(object)i).result ())) {
								subterms.Add (((GetSignMsg)(object)i).result ());
								if (!subterms.Contains (((AEnc)(object)(((GetSignMsg)(object)i).result ())).getpk ())) {
									subterms.Add (((AEnc)(object)(((GetSignMsg)(object)i).result ())).getpk ());
									if(!subterms.Contains (((AEnc)(object)(((GetSignMsg)(object)i).result ())).getpk ().getsk())) {
										subterms.Add(((AEnc)(object)(((GetSignMsg)(object)i).result ())).getpk ().getsk());
									}
								}
								if (addsubterm (((AEnc)(object)(((GetSignMsg)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((GetSignMsg)(object)i).result ().IsSEnc () == true) {
							list.Add (((GetSignMsg)(object)i).result ());
							SEncList.Add ((SEnc)(object)((GetSignMsg)(object)i).result ());
							if (!subterms.Contains (((GetSignMsg)(object)i).result ())) {
								subterms.Add (((GetSignMsg)(object)i).result ());
								if (!subterms.Contains (((SEnc)(object)(((GetSignMsg)(object)i).result ())).getsk ())) {
									subterms.Add (((SEnc)(object)(((GetSignMsg)(object)i).result ())).getsk ());
								}
								if (addsubterm (((SEnc)(object)(((GetSignMsg)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm senc");
								}
							}
							return true;
						} else if (((GetSignMsg)(object)i).result ().IsPEnc () == true) {
							list.Add (((GetSignMsg)(object)i).result ());
							PEncList.Add ((PEnc)(object)((GetSignMsg)(object)i).result ());
							if (!subterms.Contains (((GetSignMsg)(object)i).result ())) {
								subterms.Add (((GetSignMsg)(object)i).result ());
								if (!subterms.Contains (((PEnc)(object)(((GetSignMsg)(object)i).result ())).getpk ())) {
									subterms.Add (((PEnc)(object)(((GetSignMsg)(object)i).result ())).getpk ());
									if(!subterms.Contains (((PEnc)(object)(((GetSignMsg)(object)i).result ())).getpk ().getsk())) {
										subterms.Add(((PEnc)(object)(((GetSignMsg)(object)i).result ())).getpk ().getsk());
									}
								}
								if (!subterms.Contains (((PEnc)(object)(((GetSignMsg)(object)i).result ())).getrandom ())) {
									subterms.Add (((PEnc)(object)(((GetSignMsg)(object)i).result ())).getrandom ());
								}
								if (addsubterm (((PEnc)(object)(((GetSignMsg)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm penc");
								}
							}
							return true;
						} else if (((GetSignMsg)(object)i).result ().IsPair () == true) {
							list.Add (((GetSignMsg)(object)i).result ());
							PairList.Add ((Pair)(object)((GetSignMsg)(object)i).result ());
							if (!subterms.Contains (((GetSignMsg)(object)i).result ())) {
								subterms.Add (((GetSignMsg)(object)i).result ());
								if (addsubterm (((Pair)(object)(((GetSignMsg)(object)i).result ())).getfirst ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm pair first");
								}
								if (addsubterm (((Pair)(object)(((GetSignMsg)(object)i).result ())).getsecond ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm Pair second");
								}
							}
							return true;
						} else if (((GetSignMsg)(object)i).result ().IsHash () == true) {
							list.Add (((GetSignMsg)(object)i).result ());
							HashList.Add ((Hash)(object)((GetSignMsg)(object)i).result ());
							if (!subterms.Contains (((GetSignMsg)(object)i).result ())) {
								subterms.Add (((GetSignMsg)(object)i).result ());
								if (addsubterm (((Hash)(object)(((GetSignMsg)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((GetSignMsg)(object)i).result ().IsSign () == true) {
							list.Add (((GetSignMsg)(object)i).result ());
							SignList.Add ((Sign)(object)((GetSignMsg)(object)i).result ());
							if (!subterms.Contains (((GetSignMsg)(object)i).result ())) {
								subterms.Add (((GetSignMsg)(object)i).result ());
								if (!subterms.Contains (((Sign)(object)(((GetSignMsg)(object)i).result ())).getsk ())) {
									subterms.Add (((Sign)(object)(((GetSignMsg)(object)i).result ())).getsk ());
								}
								if (addsubterm (((Sign)(object)(((GetSignMsg)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((GetSignMsg)(object)i).result ().IsCommit () == true) {
							list.Add (((GetSignMsg)(object)i).result ());
							CommitList.Add ((Commit)(object)((GetSignMsg)(object)i).result ());
							if (!subterms.Contains (((GetSignMsg)(object)i).result ())) {
								subterms.Add (((GetSignMsg)(object)i).result ());
								if (!subterms.Contains (((Commit)(object)(((GetSignMsg)(object)i).result ())).getrandom ())) {
									subterms.Add (((Commit)(object)(((GetSignMsg)(object)i).result ())).getrandom ());
								}
								if (addsubterm (((Commit)(object)(((GetSignMsg)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((GetSignMsg)(object)i).result ().IsADec () == true) {
							return addKnowledge ((ADec)(object)((GetSignMsg)(object)i).result ());
						} else if (((GetSignMsg)(object)i).result ().IsSDec () == true) {
							return addKnowledge ((SDec)(object)((GetSignMsg)(object)i).result ());
						} else if (((GetSignMsg)(object)i).result ().IsPDec () == true) {
							return addKnowledge ((PDec)(object)((GetSignMsg)(object)i).result ());
						} else if (((GetSignMsg)(object)i).result ().IsGetSignMsg () == true) {
							return addKnowledge ((GetSignMsg)(object)((GetSignMsg)(object)i).result ());
						} else if (((GetSignMsg)(object)i).result ().IsOpen () == true) {
							return addKnowledge ((Open)(object)((GetSignMsg)(object)i).result ());
						} else
							return false;
					} else {
						list.Add (i);
						GetSignMsgList.Add ((GetSignMsg)(object)i);
						return true;
					}
				}
				else if (i.IsOpen () == true) {
					if (((Open)(object)i).getcipher ().isDecryptable (((Open)(object)i).getrandom ()) == true) {
						if (((Open)(object)i).result ().IsNonce () == true) {
							list.Add (((Open)(object)i).result ());
							NonceList.Add ((Nonce)(object)((Open)(object)i).result ());
							if (!subterms.Contains(((Open)(object)i).result ())){
								subterms.Add (((Open)(object)i).result ());}
							return true;
						} else if (((Open)(object)i).result ().IsConstant () == true) {
							list.Add (((Open)(object)i).result ());
							ConstantList.Add ((Constant)(object)((Open)(object)i).result ());
							if (!subterms.Contains(((Open)(object)i).result ())){
								subterms.Add (((Open)(object)i).result ());}
							return true;
						} else if (((Open)(object)i).result ().IsSKey () == true) {
							list.Add (((Open)(object)i).result ());
							SKeyList.Add ((SKey)(object)((Open)(object)i).result ());
							if (!subterms.Contains(((Open)(object)i).result ())){
								subterms.Add (((Open)(object)i).result ());}
							return true;
						} else if (((Open)(object)i).result ().IsPKey () == true) {
							list.Add (((Open)(object)i).result ());
							PKeyList.Add ((PKey)(object)((Open)(object)i).result ());
							if (!subterms.Contains (((Open)(object)i).result ())) {
								subterms.Add (((Open)(object)i).result ());
								if (!subterms.Contains (((PKey)(object)(((Open)(object)i).result ())).getsk ())){
									subterms.Add (((PKey)(object)(((Open)(object)i).result ())).getsk ());
								}
							}
							return true;
						} else if (((Open)(object)i).result ().IsAEnc () == true) {
							list.Add (((Open)(object)i).result ());
							AEncList.Add ((AEnc)(object)((Open)(object)i).result ());
							if (!subterms.Contains (((Open)(object)i).result ())) {
								subterms.Add (((Open)(object)i).result ());
								if (!subterms.Contains (((AEnc)(object)(((Open)(object)i).result ())).getpk ())) {
									subterms.Add (((AEnc)(object)(((Open)(object)i).result ())).getpk ());
									if(!subterms.Contains (((AEnc)(object)(((Open)(object)i).result ())).getpk ().getsk())) {
										subterms.Add(((AEnc)(object)(((Open)(object)i).result ())).getpk ().getsk());
									}
								}
								if (addsubterm (((AEnc)(object)(((Open)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((Open)(object)i).result ().IsSEnc () == true) {
							list.Add (((Open)(object)i).result ());
							SEncList.Add ((SEnc)(object)((Open)(object)i).result ());
							if (!subterms.Contains (((Open)(object)i).result ())) {
								subterms.Add (((Open)(object)i).result ());
								if (!subterms.Contains (((SEnc)(object)(((Open)(object)i).result ())).getsk ())) {
									subterms.Add (((SEnc)(object)(((Open)(object)i).result ())).getsk ());
								}
								if (addsubterm (((SEnc)(object)(((Open)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm senc");
								}
							}
							return true;
						} else if (((Open)(object)i).result ().IsPEnc () == true) {
							list.Add (((Open)(object)i).result ());
							PEncList.Add ((PEnc)(object)((Open)(object)i).result ());
							if (!subterms.Contains (((Open)(object)i).result ())) {
								subterms.Add (((Open)(object)i).result ());
								if (!subterms.Contains (((PEnc)(object)(((Open)(object)i).result ())).getpk ())) {
									subterms.Add (((PEnc)(object)(((Open)(object)i).result ())).getpk ());
									if(!subterms.Contains (((PEnc)(object)(((Open)(object)i).result ())).getpk ().getsk())) {
										subterms.Add(((PEnc)(object)(((Open)(object)i).result ())).getpk ().getsk());
									}
								}
								if (!subterms.Contains (((PEnc)(object)(((Open)(object)i).result ())).getrandom ())) {
									subterms.Add (((PEnc)(object)(((Open)(object)i).result ())).getrandom ());
								}
								if (addsubterm (((PEnc)(object)(((Open)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm penc");
								}
							}
							return true;
						} else if (((Open)(object)i).result ().IsPair () == true) {
							list.Add (((Open)(object)i).result ());
							PairList.Add ((Pair)(object)((Open)(object)i).result ());
							if (!subterms.Contains (((Open)(object)i).result ())) {
								subterms.Add (((Open)(object)i).result ());
								if (addsubterm (((Pair)(object)(((Open)(object)i).result ())).getfirst ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm pair first");
								}
								if (addsubterm (((Pair)(object)(((Open)(object)i).result ())).getsecond ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm Pair second");
								}
							}
							return true;
						} else if (((Open)(object)i).result ().IsHash () == true) {
							list.Add (((Open)(object)i).result ());
							HashList.Add ((Hash)(object)((Open)(object)i).result ());
							if (!subterms.Contains (((Open)(object)i).result ())) {
								subterms.Add (((Open)(object)i).result ());
								if (addsubterm (((Hash)(object)(((Open)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((Open)(object)i).result ().IsSign () == true) {
							list.Add (((Open)(object)i).result ());
							SignList.Add ((Sign)(object)((Open)(object)i).result ());
							if (!subterms.Contains (((Open)(object)i).result ())) {
								subterms.Add (((Open)(object)i).result ());
								if (!subterms.Contains (((Sign)(object)(((Open)(object)i).result ())).getsk ())) {
									subterms.Add (((Sign)(object)(((Open)(object)i).result ())).getsk ());
								}
								if (addsubterm (((Sign)(object)(((Open)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((Open)(object)i).result ().IsCommit () == true) {
							list.Add (((Open)(object)i).result ());
							CommitList.Add ((Commit)(object)((Open)(object)i).result ());
							if (!subterms.Contains (((Open)(object)i).result ())) {
								subterms.Add (((Open)(object)i).result ());
								if (!subterms.Contains (((Commit)(object)(((Open)(object)i).result ())).getrandom ())) {
									subterms.Add (((Commit)(object)(((Open)(object)i).result ())).getrandom ());
								}
								if (addsubterm (((Commit)(object)(((Open)(object)i).result ())).getplaintext ())!=true) {
									throw new  PAT.Common.Classes.Expressions.ExpressionClass.RuntimeException("stun in addknowledge subterm aenc");
								}
							}
							return true;
						} else if (((Open)(object)i).result ().IsADec () == true) {
							return addKnowledge ((ADec)(object)((Open)(object)i).result ());
						} else if (((Open)(object)i).result ().IsSDec () == true) {
							return addKnowledge ((SDec)(object)((Open)(object)i).result ());
						} else if (((Open)(object)i).result ().IsPDec () == true) {
							return addKnowledge ((PDec)(object)((Open)(object)i).result ());
						} else if (((Open)(object)i).result ().IsGetSignMsg () == true) {
							return addKnowledge ((GetSignMsg)(object)((Open)(object)i).result ());
						} else if (((Open)(object)i).result ().IsOpen () == true) {
							return addKnowledge ((Open)(object)((Open)(object)i).result ());
						} else
							return false;
					} else {
						list.Add (i);
						OpenList.Add ((Open)(object)i);
						return true;
					}
				}
				else
					return false;
			}
			else
				return false;
		}
	}
}

#import "Lib_v0+equal+know";
#define TimeLock 2;
#define Going 5;
#define Off 6;
#define Notification1 7;
#define Notification2 7;
#define Notification3 7;
#define Notification4 7;
#define CheckingBurnAssetTransaction 8;
#define ReclaimCheck 8;


// Keys exchange
channel SenderAndRecipient 0;
channel SenderAndSourceChain 0;
channel RecipientAndSourcechain 0;
channel SourceChainAndSourceMiner 0;
channel DestinationAndSourceMiner 0;
channel SourceAndDestination 0;
channel DestinationAndDestinationMiner 0;
channel SourceAndDestinationMiner 0;
channel SenderAndDestination 0;
channel RecipientAndDestination 0;

channel SourceChainAndEvent 0;
channel DestinationAndEvent 0;

var SecredCode = 1;
var<SKey> SKsender = new SKey();
var<PKey> PKsender = new PKey(SKsender); 
var<SKey> SKreceive = new SKey();
var<PKey> PKreceive = new PKey(SKreceive); 

var<AEnc> cipherScode;                     
var<ADec> decipherScode;

var moneyS;
var moneySnew;
var moneyR;
var moneyRnew;
var asset = 0;
var BurnAddress = 0;   
var Address = [BurnAddress, asset];
var Encrypt = [SecredCode, cipherScode];

var ExitTransaction;
var going;
var off;
var TXmind;
var TXID;

var time = 1;
var EntryTransaction;
var reclaim = 0;
var repeat = 0;

var Event1 = [BurnAddress, SecredCode, TimeLock, asset];
var Event2 = [TXmind, BurnAddress, SecredCode, TimeLock, asset];
var Event3 = 0;



sender() = SenderAndRecipient!PKsender -> SenderAndRecipient?Var_PKreceive -> SenderAndRecipient?AddressNew.SecredCodeNew -> 
tau{cipherScode = new SEnc(SecredCode,PKreceive)} -> SenderAndRecipient!cipherScode -> 
tau{if(moneyS>=0 && TimeLock >= 0)
                      {moneySnew = moneyS - asset;}} -> 
tau{BurnAddress = BurnAddress + asset;} -> SenderAndSourceChain!BurnAddress.asset.cipherScode.TimeLock -> 
tau{decipherScode = new SDec(cipherScode)} -> SenderAndRecipient!decipherScode -> SenderAndDestination?Notification3 ->
tau{if(time>TimeLock)
       {reclaim = repeat;}
    else
       {reclaim = Going;}} -> 
SenderAndSourceChain!reclaim -> Skip;
                   

recipient() = SenderAndRecipient?Var_PKsender -> SenderAndRecipient!PKreceive -> SenderAndRecipient!Address.SecredCode -> SenderAndRecipient?cipherScodeNew -> 
RecipientAndSourcechain?Notification2 -> SenderAndRecipient?decipherScodeNew -> 
tau{if(BurnAddress == asset && decipherScode == SecredCode && time<TimeLock)  //problem
      {moneyRnew = moneyR + asset;}} -> 
RecipientAndDestination!BurnAddress.SecredCode.asset -> RecipientAndDestination?Notification3 -> Skip;


SourceChain() = SenderAndSourceChain?BurnAddressNew.assetNew.cipherScodeNew.TimeLockNew -> SourceChainAndSourceMiner!Notification1 -> SourceChainAndSourceMiner?TXmindNew -> RecipientAndSourcechain!Notification2 -> 
SourceChainAndEvent!Event1 -> SourceAndDestinationMiner?CheckingBurnAssetTransactionNew -> SourceChainAndSourceMiner!SKsender -> SenderAndSourceChain?reclaimNew -> SourceAndDestination!ReclaimCheck -> 
SourceChainAndEvent!Event3 -> Skip;


DestinationChain() = RecipientAndDestination?BurnAddressNew.SecredCodeNew.assetNew -> DestinationAndDestinationMiner!Notification4 -> DestinationAndDestinationMiner?TXmindNew -> 
SenderAndDestination!Notification3 -> RecipientAndDestination!Notification3 -> DestinationAndEvent!Event2 -> DestinationAndSourceMiner!SKreceive -> SourceAndDestination?ReclaimCheckNew -> Skip;


SourceMiner() = SourceChainAndSourceMiner?Notification1 -> SourceChainAndSourceMiner!TXmind -> SourceChainAndSourceMiner?SKsenderNew -> DestinationAndSourceMiner?SKreceiveNew -> Skip;
DestinationMiner() = DestinationAndDestinationMiner?Notification4 -> SourceAndDestinationMiner!CheckingBurnAssetTransaction -> DestinationAndDestinationMiner!TXmind ->  Skip;

Event() = SourceChainAndEvent?Event1New -> DestinationAndEvent?Event2New -> SourceChainAndEvent?Event3New -> Skip;



protocol() = sender() || recipient() || SourceChain() ||DestinationChain() || SourceMiner() || Event() || DestinationMiner();

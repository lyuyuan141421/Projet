#import "Lib_v0+equal+know";
#define TimeLock 2;
#define time 1;
#define Going 5;
#define Off 6;
#define Notification1 7;
#define Notification2 7;
#define Notification3 7;
#define Notification4 7;
#define NewBlockNotification 7;
#define HashResult 7;
#define HashResultConfirm 7;
#define LoginNewTransaction 7;
#define CheckingBurnAssetTransaction 8;
#define ReclaimCheck 8;
#define N 9;
#define Bill_Registration 1;


// Keys exchange
channel SenderAndRecipient 0;
channel SenderAndSourceChain 0;
channel RecipientAndSourcechain 0;
channel SourceChainAndSourceMiner 0;
channel DestinationAndSourceMiner 0;
channel SourceAndDestination 0;
channel DestinationAndDestinationMiner 0;
channel SourceAndDestinationMiner 0;
channel SenderAndDestination 0;
channel RecipientAndDestination 0;
channel SourceMinerAndEvent 0;
channel DestinationMinerAndEvent 0;
channel SenderAndFakeRecipient 0;

channel SourceChainAndEvent 0;
channel DestinationAndEvent 0;

channel Miner1AndSourceMiner 0;
channel Miner2AndSourceMiner 0;
channel Miner1AndDestinationMiner 0;
channel Miner2AndDestinationMiner 0;

//var SecredCode = 1;
var<SKey> SKsender = new SKey();
var<PKey> PKsender = new PKey(SKsender); 
var<SKey> SKreceive = new SKey();
var<PKey> PKreceive = new PKey(SKreceive); 
var<Nonce> SecredCode = new Nonce();

var<SEnc> cipherScode;                     
var<SDec> decipherScode;

var moneyS = 10;
var moneySnew;

var moneyR = 0;
var moneyRnew = 0;
var moneyRnew1 = 0;
var moneyRnew2 = 0;
var moneyRnew3 = 0;

var asset = 9;
var BurnAddress = 0;   
var Address = [BurnAddress, asset];
var NewBlock = [0,0,0,0,0,0];

var TXmind;
var EntryTransaction;
var Miner_verification;
var Miner_verified_successfully = 1;
var Result;
var Proof_Of_Work;

var Event1 = [BurnAddress, SecredCode, TimeLock, asset];
var Event2 = [TXmind, BurnAddress, SecredCode, TimeLock, asset];
var Event3 = 0;
var i = 0;

var moneyS_enought = false;
var moneySnewCheck = false;
var fakerecipientHasNoTruePk = false;
var reclaimResult = false;

//ExitTransaction = exitTransaction{moneySnew = moneyS - asset;moneySnewCheck = true} -> Skip;

sender() = SenderAndRecipient!PKsender -> SenderAndFakeRecipient!PKsender -> SenderAndRecipient?Var_PKreceive -> SenderAndFakeRecipient?Var_PKreceive1 -> 
SenderAndRecipient?AddressNew.SecredCodeNew -> SenderAndFakeRecipient?AddressNew1.SecredCodeNew1 -> tau{cipherScode = new SEnc(new Pair(PKreceive,SecredCodeNew), SKsender);} -> 
SenderAndRecipient!cipherScode -> SenderAndFakeRecipient!cipherScode -> // SecredCode,PKreceive   Unity type?
tau{if(moneyS>asset && TimeLock > 0)
                      {moneySnew = moneyS - asset; 
                       moneySnewCheck = true;}} -> tau{if(moneySnew >= 0){moneyS_enought = true;}}->
tau{BurnAddress = BurnAddress + asset;} -> SenderAndSourceChain!BurnAddress.asset.cipherScode.TimeLock -> SenderAndDestination?Notification3 ->
tau{if(time>TimeLock)
       {reclaimResult = true;}
    else
       {reclaimResult = false;}} -> 
SenderAndSourceChain!reclaimResult -> tau{if(moneyRnew == 0){moneySnew = moneySnew + asset;}} -> Skip;
                   

recipient() = SenderAndRecipient?Var_PKsender -> SenderAndRecipient!PKreceive -> SenderAndRecipient!Address.SecredCode -> SenderAndRecipient?cipherScodeNew -> 
RecipientAndSourcechain?Notification2 -> tau{decipherScode = new SDec(cipherScodeNew,SKreceive);} ->   // cipherScode
tau{if(BurnAddress == asset && decipherScode == cipherScodeNew && time<TimeLock)  // && decipherScode == SecredCode    Problem
      {moneyRnew = moneyR + asset;}} ->
RecipientAndDestination!BurnAddress.SecredCode.asset -> RecipientAndDestination?Notification3 -> Skip;


FakeRecipient() = SenderAndFakeRecipient?Var_PKsender1 -> SenderAndFakeRecipient!PKreceive -> PKcheck -> SenderAndFakeRecipient!Address.SecredCode -> 
SenderAndFakeRecipient?cipherScode1 -> tau{decipherScode = new SDec(cipherScode1,SKreceive);} -> 
tau{if(decipherScode != SecredCode && time<TimeLock)
    {fakerecipientHasNoTruePk = true;}} -> Skip;


SourceChain() = SenderAndSourceChain?BurnAddressNew.assetNew.cipherScodeNew.TimeLockNew -> SourceChainAndSourceMiner!Notification1.cipherScode -> SourceChainAndSourceMiner?TXmindNew -> 
RecipientAndSourcechain!Notification2 -> SourceChainAndEvent!Event1 -> SourceAndDestinationMiner?CheckingBurnAssetTransactionNew -> SourceChainAndSourceMiner!SKsender -> 
SenderAndSourceChain?reclaimNew -> SourceAndDestination!ReclaimCheck -> SourceChainAndEvent!Event3 -> Skip;


DestinationChain() = RecipientAndDestination?BurnAddressNew.SecredCodeNew.assetNew -> DestinationAndDestinationMiner!Notification4.SecredCodeNew -> DestinationAndDestinationMiner?TXmindNew -> 
SenderAndDestination!Notification3 -> RecipientAndDestination!Notification3 -> DestinationAndEvent!Event2 -> DestinationAndSourceMiner!SKreceive -> SourceAndDestination?ReclaimCheckNew -> Skip;


SourceMiner() = SourceChainAndSourceMiner?Notification1.cipherScodeNew -> SourceChainAndSourceMiner!TXmind ->  tau{if(moneyS >= 0){Miner_verification = Miner_verified_successfully;}} -> Hash_calculation -> 
tau{Result = new Hash(cipherScodeNew)} -> Miner1AndSourceMiner!Result ->  Miner2AndSourceMiner!Result -> CreateNewBlock -> SourceMinerAndEvent!NewBlockNotification -> 
SourceChainAndSourceMiner?SKsenderNew -> DestinationAndSourceMiner?SKreceiveNew -> Skip;

DestinationMiner() = DestinationAndDestinationMiner?Notification4.SecredCodeNew1 -> tau{if(moneyRnew >= asset){Miner_verification = Miner_verified_successfully;}} -> Hash_calculation -> 
Miner1AndDestinationMiner!Result -> Miner2AndDestinationMiner!Result -> tau{NewBlock[i] = Bill_Registration;} -> DestinationMinerAndEvent!NewBlockNotification -> 
SourceAndDestinationMiner!CheckingBurnAssetTransaction -> DestinationAndDestinationMiner!TXmind ->  Skip;

Miner1() = Miner1AndSourceMiner?ResultNew -> ResultVerification -> Miner1AndDestinationMiner?ResultNew -> ResultVerification -> tau{NewBlock[i+1] = 1;} -> Skip;  

Miner2() = Miner2AndSourceMiner?ResultNew -> ResultVerification -> Miner2AndDestinationMiner?ResultNew -> ResultVerification -> tau{NewBlock[i+2] = 1; i=i+3;} -> Skip;

Event() = SourceMinerAndEvent?NewBlockNotificationNew -> SourceChainAndEvent?Event1New -> DestinationMinerAndEvent?NewBlockNotificationNew -> 
DestinationAndEvent?Event2New -> SourceChainAndEvent?Event3New -> Skip;


protocol() = sender() || recipient() || SourceChain() || DestinationChain() || SourceMiner() || Event() || DestinationMiner() || Miner1() || Miner2() ||FakeRecipient();

#assert protocol() deadlockfree;

#define BurnAddressVerification (BurnAddress == 9 && moneySnew == 1);
#assert protocol() |= <>[] BurnAddressVerification;

#define assetCheck (moneySnew == 1 && moneyRnew == 9 && fakerecipientHasNoTruePk == true);   //moneyS = 10  moneyR = 0   //什么是正确的receive
#assert protocol() |= <>[] assetCheck;

#define FakeRecieveCheck (fakerecipientHasNoTruePk == true && decipherScode != SecredCode);
#assert protocol() |= <>[] FakeRecieveCheck;


// #define BurnbeforeClaim (BurnAddress == 10); // (!(moneySnew == 0) U BurnAddress/\(<> (moneySnew == 0)))   // LTL的图 p93 (! t U b) /\ (<>t)
#define MoneyCheck (moneySnewCheck == true);
#define BurnAddressCheck (BurnAddress == 10);
#assert protocol() |= [] (([] !MoneyCheck) || (!MoneyCheck U BurnAddressCheck));

#define sender_has_enought_Money (moneyS_enought == true);  
#assert protocol() reaches sender_has_enought_Money;

#define Reclaim (reclaimResult == false && moneySnew == 1);
#assert protocol() |= <>[] Reclaim;

// #define MinerVerification (NewBlock == [0,0,0,0,0,0]);
// #assert protocol() |= <>[] MinerVerification;

#define assetCheck_Miner (Miner_verification == 1);
#assert protocol() |= <>[] assetCheck_Miner;

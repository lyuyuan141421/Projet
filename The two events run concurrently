#import "Lib_v0+equal+know";
#define TimeLock 5;
#define N 4;
#define Notification1 10;
#define Notification2 11;
#define Notification3 12;
#define Go 1;
#define Off 0;

channel SenderAndRecipient 0;
channel SenderAndSourceChain 0;
channel RecipientAndSourcechain 0;
channel SourceChainAndSourceMiner 0;
channel DestinationAndSourceMiner 0;
channel SourceAndDestination 0;
channel DestinationAndDestinationMiner 0;
channel SourceAndDestinationMiner 0;
channel SenderAndDestination 0;
channel RecipientAndDestination 0;
channel SourceMinerAndEvent 0;
channel DestinationMinerAndEvent 0;
channel SenderAndFakeRecipient 0;


channel SourceChainAndEvent 0;
channel DestinationAndEvent 0;

channel Miner1AndSourceMiner 0;
channel Miner2AndSourceMiner 0;
channel Miner1AndDestinationMiner 0;
channel Miner2AndDestinationMiner 0;

var<SKey> SKsender = new SKey();
var<PKey> PKsender = new PKey(SKsender); 
var<SKey> SKreceive = new SKey();
var<PKey> PKreceive = new PKey(SKreceive); 
var<Nonce> Message = new Nonce();

var moneyS = 100;
var moneySnew;
var moneyR = 0;
var moneyRnew ;
var asset = 10;
var BurnAddress = 0;
var moneyS_NoEnought = false;
//var fakerecipientHasNoTruePk = true;
var truereceiverHasTruePK = false;


var AddressR = [PKreceive, SKreceive, moneyS];
var AddressS = [PKsender, SKsender, moneyR];

var event1 = [PKsender, Message, asset];
var event2 = [PKreceive, Message, asset];
var event3 = 0;

var moneySnewCheck = false;
//var reclaimResult = false;
var MinerResultVerification1 = false;
var MinerResultVerification2 = false;

var<Hash> HashResult;
var<Nonce> Math_problemS = new Nonce();
var<Nonce> Math_problemD = new Nonce();
var<Sign> digital_signature;
var<AEnc> encrypted_inf;
var<ADec> decrypted_inf;
var<Sign> decrypted_Sign;

var n = 0;
var NewBlockS = [0,0,0,0,0,0,0,0,0,0,0,0];
var NewBlockD = [0,0,0,0,0,0,0,0,0,0,0,0];
// digital_signature = Digital_Signature{new Pair(PKreceive,Message)} -> Skip;
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

var<SKey> SKsenderP = new SKey();
var<PKey> PKsenderP = new PKey(SKsender); 
var<SKey> SKreceiveP = new SKey();
var<PKey> PKreceiveP = new PKey(SKreceive); 
var<Nonce> MessageP = new Nonce();

var moneySP = 100;
var moneySPnew;
var moneyRP = 0;
var moneyRPnew ;
var assetP = 10;
var BurnAddressP = 0;
var moneyS_NoEnoughtP = false;
//var fakerecipientHasNoTruePk = true;
var truereceiverHasTruePK_P = false;


var AddressRP = [PKreceive, SKreceive, moneyS];
var AddressSP = [PKsender, SKsender, moneyR];

var event1P = [PKsender, Message, asset];
var event2P = [PKreceive, Message, asset];
var event3P = 0;

var moneySnewCheckP = false;
//var reclaimResult = false;
var MinerResultVerification1P = false;
var MinerResultVerification2P = false;

var<Hash> HashResultP;
var<Nonce> Math_problemSP = new Nonce();
var<Nonce> Math_problemDP = new Nonce();
var<Sign> digital_signatureP;
var<AEnc> encrypted_infP;
var<ADec> decrypted_infP;
var<Sign> decrypted_SignP;

var nP = 0;
var NewBlockSP = [0,0,0,0,0,0,0,0,0,0,0,0];
var NewBlockDP = [0,0,0,0,0,0,0,0,0,0,0,0];


sender() = SenderAndRecipient!PKsender -> 
SenderAndRecipient?PKreceive1 -> 
SenderAndRecipient?BurnAddress1 -> 
Digital_Signature{digital_signature = new Sign(Message,SKsender);} -> 
Encrypted_inf{encrypted_inf = new AEnc(digital_signature, PKreceive1);} -> 
SenderAndSourceChain!encrypted_inf.asset.BurnAddress1.digital_signature.PKsender -> Skip();

sender1() = SenderAndRecipient!PKsenderP -> 
SenderAndRecipient?PKreceiveP1 -> 
SenderAndRecipient?BurnAddressP1 -> 
Digital_Signature{digital_signatureP = new Sign(MessageP,SKsenderP);} -> 
Encrypted_inf{encrypted_infP = new AEnc(digital_signatureP, PKreceiveP1);} -> 
SenderAndSourceChain!encrypted_infP.asset.BurnAddressP1.digital_signatureP.PKsenderP -> Skip();





SourceChain() = SenderAndSourceChain?encrypted_inf1.asset1.BurnAddress2.digital_signature1.PKsender1 -> 
ExitTransaction{if(digital_signature1==digital_signature && PKsender1==PKsender && moneyS >= asset1)    //ExitTransaction
                  {moneySnew = moneyS - asset1;}
                  else{moneyS_NoEnought = true;}} ->
Burn_Transaction{if(moneySnew < moneyS && moneySnew > 0)     //Burn_Transaction
                    {BurnAddress = BurnAddress2 + asset1;
                     moneyS = moneySnew;}} ->
SourceChainAndSourceMiner!moneySnew.BurnAddress.encrypted_inf1.digital_signature1.asset1 ->
SourceChainAndSourceMiner?MinerResultVerification1new ->
SourceChainAndEvent!event1 ->
SourceAndDestination!moneySnew.BurnAddress.encrypted_inf1.digital_signature1.asset1.MinerResultVerification1new  ->  Skip();

SourceChain1() = SenderAndSourceChain?encrypted_infP1.assetP1.BurnAddressP2.digital_signatureP1.PKsenderP1 -> 
ExitTransaction{if(digital_signatureP1==digital_signatureP && PKsenderP1==PKsenderP && moneySP >= assetP1)    //ExitTransaction
                  {moneySPnew = moneySP - assetP1;}
                  else{moneyS_NoEnoughtP = true;}} ->
Burn_Transaction{if(moneySPnew < moneySP && moneySPnew > 0)     //Burn_Transaction
                    {BurnAddressP = BurnAddressP2 + assetP1;
                     moneySP = moneySPnew;}} ->
SourceChainAndSourceMiner!moneySPnew.BurnAddressP.encrypted_infP1.digital_signatureP1.assetP1 ->
SourceChainAndSourceMiner?MinerResultVerification1newP ->
SourceChainAndEvent!event1P ->
SourceAndDestination!moneySPnew.BurnAddressP.encrypted_infP1.digital_signatureP1.assetP1.MinerResultVerification1newP  ->  Skip();






DestinationChain() = SourceAndDestination?moneySnew1.BurnAddress1.encrypted_inf2.digital_signature2.asset2.MinerResultVerification1new1 ->
EntryTransaction{if(moneySnew1<=moneyS && BurnAddress1==asset2 && encrypted_inf2 == encrypted_inf && digital_signature2 == digital_signature && MinerResultVerification1new1 == true)  // EntryTransaction
                 {decrypted_inf = new ADec(encrypted_inf2,SKreceive);
                  decrypted_Sign = decrypted_inf.result();}} ->
AssetCreate{if(decrypted_Sign == digital_signature2)  // decrypted_Sign.Signequal(digital_signature2) == true
               {moneyRnew = moneyR  + asset2;
                truereceiverHasTruePK = true;}} ->
DestinationAndDestinationMiner!decrypted_inf.encrypted_inf2 ->
DestinationAndDestinationMiner?MinerResultVerification2new ->
DestinationAndEvent!event2 ->
RecipientAndDestination!moneyRnew.MinerResultVerification2new -> Skip();

DestinationChain1() = SourceAndDestination?moneySPnew1.BurnAddressP1.encrypted_infP2.digital_signatureP2.assetP2.MinerResultVerification1newP1 ->
EntryTransaction{if(moneySPnew1<=moneyS && BurnAddressP1==assetP2 && encrypted_infP2 == encrypted_infP && digital_signatureP2 == digital_signatureP && MinerResultVerification1newP1 == true)  // EntryTransaction
                 {decrypted_infP = new ADec(encrypted_infP2,SKreceiveP);
                  decrypted_SignP = decrypted_infP.result();}} ->
AssetCreate{if(decrypted_SignP == digital_signatureP2)  // decrypted_Sign.Signequal(digital_signature2) == true
               {moneyRPnew = moneyRP  + assetP2;
                truereceiverHasTruePK_P = true;}} ->
DestinationAndDestinationMiner!decrypted_infP.encrypted_infP2 ->
DestinationAndDestinationMiner?MinerResultVerification2Pnew ->
DestinationAndEvent!event2P ->
RecipientAndDestination!moneyRPnew.MinerResultVerification2Pnew -> Skip();






recipient() = SenderAndRecipient?PKsender1 -> 
SenderAndRecipient!PKreceive -> 
SenderAndRecipient!BurnAddress -> 
RecipientAndDestination?moneyRnew1.MinerResultVerification2new1 ->
MoneyGet{if(MinerResultVerification2new1 == true){moneyR = moneyRnew1;}} -> Skip();

recipient1() = SenderAndRecipient?PKsenderP1 -> 
SenderAndRecipient!PKreceiveP -> 
SenderAndRecipient!BurnAddressP -> 
RecipientAndDestination?moneyRnewP1.MinerResultVerification2newP1 ->
MoneyGet{if(MinerResultVerification2newP1 == true){moneyRP = moneyRnewP1;}} -> Skip();




SourceMiner() = SourceChainAndSourceMiner?moneySnew11.BurnAddress11.encrypted_inf111.digital_signature111.asset111 -> 
ResultVerification{if(moneySnew11<=moneyS && BurnAddress11==asset){MinerResultVerification1 = true;}} -> 
HashCalculation{HashResult = new Hash(Math_problemS);} -> 
Miner1AndSourceMiner!HashResult ->
Miner1AndSourceMiner?NewBlockS1 ->
Miner2AndSourceMiner!HashResult ->
Miner2AndSourceMiner?NewBlockS2 ->
SourceChainAndSourceMiner!MinerResultVerification1 -> Skip();  // interrupt[5] Reclaim();

SourceMiner1() = SourceChainAndSourceMiner?moneySnewP11.BurnAddressP11.encrypted_infP111.digital_signatureP111.assetP111 -> 
ResultVerification{if(moneySnewP11<=moneySP && BurnAddressP11==assetP){MinerResultVerification1P = true;}} -> 
HashCalculation{HashResultP = new Hash(Math_problemSP);} -> 
Miner1AndSourceMiner!HashResultP ->
Miner1AndSourceMiner?NewBlockSP1 ->
Miner2AndSourceMiner!HashResultP ->
Miner2AndSourceMiner?NewBlockSP2 ->
SourceChainAndSourceMiner!MinerResultVerification1P -> Skip();  // interrupt[5] Reclaim();





DestinationMiner() = DestinationAndDestinationMiner?decrypted_inf1.encrypted_inf21 ->
ResultVerification{if(decrypted_inf1 == digital_signature){MinerResultVerification2 = true;}} ->
HashCalculation{HashResult = new Hash(Math_problemD);} ->
Miner1AndDestinationMiner!HashResult ->
Miner2AndDestinationMiner!HashResult ->
Miner1AndDestinationMiner?NewBlockS1 ->
Miner2AndDestinationMiner?NewBlockS2 ->
DestinationAndDestinationMiner!MinerResultVerification2 -> Skip();  // interrupt[5] Reclaim();

DestinationMiner1() = DestinationAndDestinationMiner?decrypted_infP1.encrypted_infP21 ->
ResultVerification{if(decrypted_infP1 == digital_signatureP){MinerResultVerification2P = true;}} ->
HashCalculation{HashResultP = new Hash(Math_problemDP);} ->
Miner1AndDestinationMiner!HashResultP ->
Miner2AndDestinationMiner!HashResultP ->
Miner1AndDestinationMiner?NewBlockSP1 ->
Miner2AndDestinationMiner?NewBlockSP2 ->
DestinationAndDestinationMiner!MinerResultVerification2P -> Skip();  // interrupt[5] Reclaim();




Miner1() = Miner1AndSourceMiner?HashResult1 -> 
           AddNewBlock{NewBlockS[n] = 1; n++;} -> 
           Miner1AndSourceMiner!NewBlockS ->
           Miner1AndDestinationMiner?HashResult11 -> 
           AddNewBlock{NewBlockS[n] = 1; n++;} -> 
           Miner1AndDestinationMiner!NewBlockS -> Skip;
    
Miner11() = Miner1AndSourceMiner?HashResultP1 -> 
           AddNewBlock{NewBlockSP[n] = 1; n++;} -> 
           Miner1AndSourceMiner!NewBlockSP ->
           Miner1AndDestinationMiner?HashResultP11 -> 
           AddNewBlock{NewBlockSP[n] = 1; n++;} -> 
           Miner1AndDestinationMiner!NewBlockSP -> Skip;
           
           
           
           
Miner2() = Miner2AndSourceMiner?HashResult2 -> 
           AddNewBlock{NewBlockS[n] = 1; n++;} -> 
           Miner2AndSourceMiner!NewBlockS ->
           Miner2AndDestinationMiner?HashResult22 -> 
           AddNewBlock{NewBlockS[n] = 1; n++;} -> 
           Miner2AndDestinationMiner!NewBlockS -> Skip;
       
Miner21() = Miner2AndSourceMiner?HashResultP2 -> 
           AddNewBlock{NewBlockSP[n] = 1; n++;} -> 
           Miner2AndSourceMiner!NewBlockSP ->
           Miner2AndDestinationMiner?HashResultP22 -> 
           AddNewBlock{NewBlockSP[n] = 1; n++;} -> 
           Miner2AndDestinationMiner!NewBlockSP -> Skip;
           
           
           
           
Event() = SourceChainAndEvent?event1Pnew -> DestinationAndEvent?event2Pnew -> Skip();

Event1() = SourceChainAndEvent?event1Pnew -> DestinationAndEvent?event2Pnew -> Skip();

// Reclaim() = MoneyReset{moneySnew = moneyS; moneyRnew = moneyR;} -> SourceChain(); 

protocol() = sender() || recipient() || SourceChain() || DestinationChain() || SourceMiner() || Event() || DestinationMiner() || 
             sender1() || recipient1() || SourceChain1() || DestinationChain1() || SourceMiner1() || Event1() || DestinationMiner1() || Miner1() || Miner2() || Miner11() || Miner21();



# assert protocol() deadlockfree;               // dead-lock free


# define BurnAddressMoney (BurnAddress == 20);  // unspendability
# assert protocol() |= <>[] BurnAddressMoney;





# define BurnTrans (BurnAddress == 20);        // burn before claim
# define MoneyCreate (moneyRnew == 20);
# assert protocol() |= [] (([] !MoneyCreate) || (!MoneyCreate U BurnTrans));





# define MoneyS_NoEnought (moneyS_NoEnought == true);   // Ownership
# assert protocol() |= <>[] MoneyS_NoEnought;

//# define money_S (moneyS == 100);                           
//# assert protocol() |= <>[] money_S;
//
//# define money_R (moneyR == 0);                
//# assert protocol() |= <>[] money_R;




# define TrueReceiverHasTruePK (truereceiverHasTruePK == true);
# assert protocol() |= <>[] TrueReceiverHasTruePK;




# define money_S (moneyS == 80);               // accuracy             
# assert protocol() |= <>[] money_S;

# define money_R (moneyR == 20);                
# assert protocol() |= <>[] money_R;

